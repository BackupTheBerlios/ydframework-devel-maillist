From ximian at mail.berlios.de  Tue May  1 20:02:42 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Tue, 1 May 2007 20:02:42 +0200
Subject: [ydf-devel] r2421 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200705011802.l41I2guF032347@sheep.berlios.de>

Author: ximian
Date: 2007-05-01 20:02:28 +0200 (Tue, 01 May 2007)
New Revision: 2421

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
- simple optimization on ydajax

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2007-04-28 21:25:47 UTC (rev 2420)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2007-05-01 18:02:28 UTC (rev 2421)
@@ -745,9 +745,12 @@
 
 			// if result is an array we should export to a valid js string
 			if (is_array( $result )) $result = str_replace( "\n", "<br>", var_export( $result, true ) );
+
+			// compute complete result
+			$result = 'document.getElementById("' . $formElementName . '").' . $attribute . ' = "' . $result . '";';
 			
 			// assign result to form element using the id
-			return $this->response->addScript( 'document.getElementById("' . $formElementName . '").' . $attribute . ' = "' . $result . '";' );
+			return $this->response->addScript( &$result  );
 		}
 
 



From ximian at mail.berlios.de  Mon May  7 13:18:39 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Mon, 7 May 2007 13:18:39 +0200
Subject: [ydf-devel] r2422 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705071118.l47BId3f011969@sheep.berlios.de>

Author: ximian
Date: 2007-05-07 13:18:13 +0200 (Mon, 07 May 2007)
New Revision: 2422

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
Log:
added YDTemplate::assignArray to assign multiple values

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2007-05-01 18:02:28 UTC (rev 2421)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2007-05-07 11:18:13 UTC (rev 2422)
@@ -209,7 +209,18 @@
                 $this->assign( $name, $fetched );
             }
 
+
             /**
+             *	This function will assign multiple values from an array
+             */
+            function assignArray( $values ) {
+                foreach( $values as $k => $v ){
+                    $this->assign( $k, $v );
+                }
+            }
+
+
+            /**
              *	This function will parse the template and will assign custom code to head.
              *
              *	@param $tpl_source		Template source
@@ -469,7 +480,18 @@
                 $this->assign( $name, $fetched );
             }
 
+
             /**
+             *	This function will assign multiple values from an array
+             */
+            function assignArray( $values ) {
+                foreach( $values as $k => $v ){
+                    $this->assign( $k, $v );
+                }
+            }
+
+
+            /**
              *	This function will add a YDForm object to the template. It will automatically convert the form to an array
              *	using the template object so that you don't have to do it manually.
              *



From ximian at mail.berlios.de  Sun May 13 19:10:38 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sun, 13 May 2007 19:10:38 +0200
Subject: [ydf-devel] r2423 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705131710.l4DHAc9d018189@sheep.berlios.de>

Author: ximian
Date: 2007-05-13 19:10:18 +0200 (Sun, 13 May 2007)
New Revision: 2423

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php
Log:
on date form element,
  * fixed year adjustment (not all date elements have the year field)

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php	2007-05-07 11:18:13 UTC (rev 2422)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php	2007-05-13 17:10:18 UTC (rev 2423)
@@ -474,7 +474,7 @@
             }
 
             // Check year value if belongs to options. If not, prepend or append that value to options
-            if( ! in_array( $this->year->_value, $this->year->_options ) ){
+            if( isset( $this->year ) && ! in_array( $this->year->_value, $this->year->_options ) ){
                 $years = array_keys( $this->year->_options );
 
                 if ( $this->year->_value < $years[0] ){



From ximian at mail.berlios.de  Sun May 13 19:11:57 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sun, 13 May 2007 19:11:57 +0200
Subject: [ydf-devel] r2424 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705131711.l4DHBvul020975@sheep.berlios.de>

Author: ximian
Date: 2007-05-13 19:11:42 +0200 (Sun, 13 May 2007)
New Revision: 2424

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
on checkboxgroup:
  * added a simple array check

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2007-05-13 17:10:18 UTC (rev 2423)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2007-05-13 17:11:42 UTC (rev 2424)
@@ -127,7 +127,7 @@
             // check if is numeric
             if ( is_integer( $val ) ){
                 $this->_items[ intval( $val ) ]->setValue( 1 );
-            }else{
+            }elseif ( is_array( $val ) ){
                 foreach ( $val as $k=>$v ) {
                     $this->_items[$k]->setValue( $v );
                 }



From ximian at mail.berlios.de  Mon May 14 13:10:42 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Mon, 14 May 2007 13:10:42 +0200
Subject: [ydf-devel] r2425 - YDFramework2.0/trunk/YDFramework2
Message-ID: <200705141110.l4EBAgfe025780@sheep.berlios.de>

Author: ximian
Date: 2007-05-14 13:10:26 +0200 (Mon, 14 May 2007)
New Revision: 2425

Modified:
   YDFramework2.0/trunk/YDFramework2/YDF2_init.php
Log:
now it's possible to define the includes in YDIncludeCompatibility

Modified: YDFramework2.0/trunk/YDFramework2/YDF2_init.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2007-05-13 17:11:42 UTC (rev 2424)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2007-05-14 11:10:26 UTC (rev 2425)
@@ -244,10 +244,10 @@
      *
      *  @ingroup YDFramework
      */
-    function YDIncludeCompatibility() {
-        include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/upgrade.php' );
-        include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/ext/gettext.php' );
-        include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/ext/array.php' );
+    function YDIncludeCompatibility( $core = true, $gettext = true, $array = true ) {
+        if ( $core )    include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/upgrade.php' );
+        if ( $gettext ) include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/ext/gettext.php' );
+        if ( $array )   include_once( dirname( __FILE__ ) . '/3rdparty/upgrade/ext/array.php' );
     }
 
     /**



From ximian at mail.berlios.de  Wed May 16 20:52:23 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Wed, 16 May 2007 20:52:23 +0200
Subject: [ydf-devel] r2426 -
	YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObjectTree
Message-ID: <200705161852.l4GIqNsF018237@sheep.berlios.de>

Author: ximian
Date: 2007-05-16 20:52:10 +0200 (Wed, 16 May 2007)
New Revision: 2426

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObjectTree/YDDatabaseObjectTree.php
Log:
on YDDatabaseObjectTree:
 - added minlevel for getDescendants() to retrieve descendants with a bigger level than the specified
 - added support for multiple ids in getChildren() to retrieve more than one node in a single query
 - added minlevel for getPath() to retrieve a path with nodes that have a bigger level than the specified only

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObjectTree/YDDatabaseObjectTree.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObjectTree/YDDatabaseObjectTree.php	2007-05-14 11:10:26 UTC (rev 2425)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObjectTree/YDDatabaseObjectTree.php	2007-05-16 18:52:10 UTC (rev 2426)
@@ -1,860 +1,880 @@
-<?php
-
-    /*
-
-        Yellow Duck Framework version 2.1
-        (c) Copyright 2002-2007 Pieter Claerhout
-
-        This library is free software; you can redistribute it and/or
-        modify it under the terms of the GNU Lesser General Public
-        License as published by the Free Software Foundation; either
-        version 2.1 of the License, or (at your option) any later version.
-
-        This library is distributed in the hope that it will be useful,
-        but WITHOUT ANY WARRANTY; without even the implied warranty of
-        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
-        Lesser General Public License for more details.
-
-        You should have received a copy of the GNU Lesser General Public
-        License along with this library; if not, write to the Free Software
-        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-
-    */
-
-    /**
-     *  @addtogroup YDDatabaseObjectTree Addons - DatabaseObjectTree
-     */
-
-    // Check if the framework is loaded
-    if ( ! defined( 'YD_FW_NAME' ) ) {
-        die( 'Yellow Duck Framework is not loaded.' );
-    }
-
-	// add YDF libs needed by this class
-	require_once( YD_DIR_HOME_ADD . '/YDDatabaseObject/YDDatabaseObject.php' );
-
-    /**
-     *	This is the actual implementation of the lineage tree algorithm but as an YDDatabaseObject.
-     *
-     *  The DatabaseObjectTree needs to have the following database schema.
-     *  
-     *  @code
-     *	CREATE TABLE nested_tree (
-     *	    id int NOT NULL auto_increment,
-     *	    parent_id int NULL,
-     *	    lineage varchar(255) NOT NULL default '//',
-     *	    level int NOT NULL default '1',
-     *	    position int NOT NULL default '1',
-     *	    title varchar(255) NOT NULL default '',
-     *	    PRIMARY KEY (id),
-     *	    FOREIGN KEY (parent_id)
-     *	        REFERENCES nested_tree(id)
-     *	             ON DELETE CASCADE
-     *	             ON UPDATE CASCADE
-     *	)TYPE=InnoDB;
-     *  @endcode
-     *
-     *  Note: root node must have ID 1, PARENT null and LINEAGE '' !
-     * 
-     *  @code
-     *  INSERT INTO nested_tree VALUES ( 1, null, '',         0, 1, '');
-     *  INSERT INTO nested_tree VALUES ( 2,    1, '//',       1, 1, 'General Resources');
-     *  INSERT INTO nested_tree VALUES ( 3,    2, '//2/',     2, 1, 'Code Paste');
-     *  INSERT INTO nested_tree VALUES ( 4,    2, '//2/',     2, 2, 'Documentation');
-     *  INSERT INTO nested_tree VALUES ( 5,    2, '//2/',     2, 3, 'Books & Publications');
-     *  INSERT INTO nested_tree VALUES ( 6,    5, '//2/5/',   3, 1, 'Apache');
-     *  INSERT INTO nested_tree VALUES ( 7,    5, '//2/5/',   3, 2, 'PostgreSQL');
-     *  INSERT INTO nested_tree VALUES ( 8,    5, '//2/5/',   3, 3, 'MySQL');
-     *  INSERT INTO nested_tree VALUES ( 9,    2, '//2/',     2, 4, 'Links');
-     *  INSERT INTO nested_tree VALUES (10,    9, '//2/9/',   3, 1, 'Databases');
-     *  INSERT INTO nested_tree VALUES (11,    9, '//2/9/',   3, 2, 'Generators');
-     *  INSERT INTO nested_tree VALUES (12,    9, '//2/9/',   3, 3, 'Portals');
-     *  @endcode
-     *
-     *  @ingroup YDDatabaseObjectTree
-     */
-    class YDDatabaseObjectTree extends YDDatabaseObject {
-    
-        function YDDatabaseObjectTree( $table, $db = 'default', $idField = 'id', $parentField = 'parent_id', $lineageField = 'lineage', $levelField = 'level', $positionField = 'position' ) {
-        
-			// init DB object
-            $this->YDDatabaseObject();
-
-			// register database
-            $this->registerDatabase( $db );
-
-			// register table
-            $this->registerTable( $table );
-
-			// register reserved fields
-			$this->registerKey( $idField, true );
-			$this->registerField( $parentField );
-			$this->registerField( $lineageField );
-			$this->registerField( $levelField );
-			$this->registerField( $positionField );
-
-			// save field names for future use
-			$this->__id       = $idField;
-			$this->__parent   = $parentField;
-			$this->__lineage  = $lineageField;
-			$this->__level    = $levelField;
-			$this->__position = $positionField;
-
-			$this->__table_id       = $table . '.' . $idField;
-			$this->__table_parent   = $table . '.' . $parentField;
-			$this->__table_lineage  = $table . '.' . $lineageField;
-			$this->__table_level    = $table . '.' . $levelField;
-			$this->__table_position = $table . '.' . $positionField;
-
-
-			// define a generic tree order
-			$this->setOrder( $this->__table_level . ' ASC,' . $this->__table_position . ' ASC' );
-		}
-
-
-        /**
-         *  This function defines the order used in all SELECTS
-         *
-         *  @param $sql  The sql order string.
-         */
-        function setOrder( $sql ){
-
-			return $this->_tree_order = $sql;
-        }
-
-
-        /**
-         *  This function will overide the YDDatabaseObject to reset object but init order
-         */
-		function resetAll(){
-			parent::resetAll();
-			$this->order( $this->_tree_order );
-		}
-
-
-        /**
-         *  Returns the node level based on the lineage string
-         *
-         *  @returns  level int value
-         */
-        function _getLevel( $lineage ) {
-			return substr_count( $lineage, '/' ) - 1;
-        }
-
-
-        /**
-         *  Fetch the node data for the node identified by $id.
-         *
-         *  @param $id      The ID of the node to fetch.
-         *  @param $field   (Optional) The unique field to select on. Defaults to id, which means that the ID field specified
-         *                  when the object was instantiated will be used.
-         *  @param $class   (optional) Relation name
-         *  @param $prefix  (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns An object containing the node's data, or false if node not found
-         */
-        function getNode( $id, $field = null, $class = null, $prefix = false ) {
-
-			$this->resetAll();
-
-            // get node
-            return $this->_getNode( $id, $field, $class, $prefix );
-        }
-
-
-        /**
-         *  Helper method to fetch a node.
-         *
-         *  @param $id      The ID of the node to fetch.
-         *  @param $field   (optional) The unique field to select on. Defaults to id, which means that the ID field specified
-         *                             when the object was instantiated will be used.
-         *  @param $class   (optional) Relation name
-         *  @param $prefix  (optional) Adds the relation's vars as prefixes to the keys. Default: true.
-         *
-         *  @returns An object containing the node's data, or false if node not found
-         */
-        function _getNode( $id, $field = null, $class = null, $prefix = true ) {
-
-			// if field not defined, field is id
-			if ( is_null( $field ) ) $field = $this->__id;
-	
-			// set local field
-			if ( is_null( $class ) ){
-
-				// set field value
-				$this->set( $field, $id );
-			}else{
-
-				// load relation and set field
-				$this->load( $class );
-				$this->$class->set( $field, $id );
-			}
-
-			// check results
-			if ( $this->findAll() == 0 ) return false;
-
-            // Execute the query and return the record
-            return $this->getValues( false, false, false, $prefix );
-        }
-
-
-        /**
-         *  Fetch the descendants of a node. NOTE: To get all elements use getTreeElements()
-         *
-         *  @param $id              The ID of the node to fetch descendant data for. 
-         *  @param $includeSelf     (optional) Whether or not to include the passed node in results. 
-         *  @param $maxLevel        (optional) Max level to retrieve. Eg: 10 returns all descendants with level smaller than 10; NULL retrieve all descendants.
-         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns The descendants of the passed now
-         */
-        function getDescendants( $id, $includeSelf = false, $maxLevel = null, $prefix = false ) {
-
-			// check if we want an invalid id (like 0 or 1)
-			if ( $id < 2 ) return $this->getTreeElements( $prefix );
-
-			$this->resetAll();
-
-			return $this->_getDescendants( $id, $includeSelf, $maxLevel, $prefix );
-		}
-
-
-        /**
-         *  Helper to fetch the descendants of a node
-         *
-         *  @param $id              The ID of the node to fetch descendant data for. 
-         *  @param $includeSelf     (optional) Whether or not to include the passed node in results. 
-         *  @param $maxLevel        (optional) Max level to retrieve. Eg: 10 returns all descendants with level smaller than 10; NULL retrieve all descendants.
-         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns The descendants of id
-         */
-        function _getDescendants( $id, $includeSelf = false, $maxLevel = null, $prefix = false ) {
-
-            // get just children
-			if ( $includeSelf == false ) $this->where(       $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
-			else                         $this->where( '(' . $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%" OR ' . $this->__table_id . ' = ' . intval( $id ) . ')' );
-
-			// check max level to retrieve
-			if ( is_numeric( $maxLevel ) ) $this->where( $this->__table_level . '<' . intval( $maxLevel ) );
-
-			// find nodes
-			$this->findAll();
-
-			// return all nodes
-			return $this->getResults( false, false, false, $prefix );
-		}
-
-
-        /**
-         *  Fetch all elements of a tree
-         *
-         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns All tree nodes
-         */
-        function getTreeElements( $prefix = false ) {
-
-			$this->resetAll();
-
-			return $this->_getTreeElements( $prefix );
-		}
-
-
-        /**
-         *  Helper to fetch all elements of a tree
-         *
-         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns All tree nodes
-         */
-        function _getTreeElements( $prefix = false ) {
-
-			// get all elements except root
-			$this->where( $this->__table_id . ' > 1' );
-
-			// find elements
-			$this->findAll();
-
-			// return all nodes
-			return $this->getResults( false, false, false, $prefix );
-		}
-
-
-        /**
-         *  Helper to fetch all elements of a tree as an assocArray
-         *
-         *  @param $columns             (Optional) Columns to retrieve. Default: add columns
-         *  @param $key                 (Optional) Key to use. Default: current table key
-         *
-         *  @returns All tree nodes
-         */
-        function _getTreeElementsAsAssocArray( $columns = array(), $key = null ) {
-
-			// get all elements except root
-			$this->where( $this->__table_id . ' > 1' );
-
-			// find elements
-			$this->findAll();
-
-			// compute key
-			if ( is_null( $key ) ) $key = $this->__id;
-
-			// return all nodes
-			return $this->getResultsAsAssocArray( $key, $columns );
-		}
-
-
-        /**
-         *  Fetch the children of a node, or if no node is specified, fetch the top level items.
-         *
-         *  @param $id             The ID of the node to fetch child data for.
-         *  @param $includeSelf    (optional) Include self node in results. Default: false.
-         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns The children of the passed id
-         */
-        function getChildren( $id, $includeSelf = false, $prefix = false ){
-
-			$this->resetAll();
-			
-			return $this->_getChildren( $id, $includeSelf, $prefix );
-        }
-
-
-        /**
-         *  Helper to fetch the children of a node, or if no node is specified, fetch the top level items.
-         *
-         *  @param $id             The ID of the node to fetch child data for.
-         *  @param $includeSelf    (optional) Include self node in results. Default: false.
-         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns The children of the passed id
-         */
-        function _getChildren( $id, $includeSelf = false, $prefix = false  ){
-
-            // get just children
-			if ( $includeSelf == false ) $this->where(       $this->__table_parent . ' = ' . intval( $id ) );
-			else                         $this->where( '(' . $this->__table_parent . ' = ' . intval( $id ) . ' OR ' . $this->__table_id . ' = ' . intval( $id ) . ')' );
-
-			$this->findAll();
-
-			return $this->getResults( false, false, false, $prefix );
-        }
-
-
-        /**
-         *  Fetch the path to a node. If an invalid node is passed, an empty array is returned. If a top level node is 
-         *  passed, an array containing on that node is included (if 'includeSelf' is set to true, otherwise an empty
-         *  array).
-         *
-         *  @param $id             The ID of the node to fetch child data for.
-         *  @param $includeSelf    (optional) Whether or not to include the passed node in the the results.
-         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns An array of each node to passed node
-         */
-        function getPath( $id, $includeSelf = false, $prefix = false ) {
-
-			$this->resetAll();
-
-			return $this->_getPath( $id, $includeSelf, $prefix );
-        }
-
-
-        /**
-         *  Helper to fetch the path to a node. 
-         *
-         *  @param $id             The ID of the node to fetch child data for.
-         *  @param $includeSelf    (optional) Whether or not to include the passed node in the the results.
-         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
-         *
-         *  @returns An array of each node to passed node
-         */
-        function _getPath( $id, $includeSelf = false, $prefix = false ) {
-
-            // Get the node
-            $node = $this->getNode( intval($id) ) ;
-
-			// reset values of previous getNode()
-			$this->resetAll();
-
-            // No node, return empty array
-            if ( ! $node ) return array();
-
-			// compute parents of this node. Read lineage, delete first '//', last '/', apply 'intval' to all elements and implode
-			$nodes = array_map( 'intval', explode( '/', substr( substr( $node[ $this->__lineage ], 2 ), 0, -1 ) ) );
-
-			// if we want current node too, lets add it to nodes array
-            if ( $includeSelf == true ) $nodes[] = intval( $id );
-
-			// apply where clause
-			$this->where( $this->__table_id . ' IN (' . $this->escapeSqlArray( $nodes ) . ')' );
-
-			$this->findAll();
-
-			return $this->getResults( false, false, false, $prefix );
-        }
-
-
-        /**
-         *  Check if one node descends from another node. If either node is not found, then false is returned.
-         *
-         *  @param $descendant_id  The node that potentially descends
-         *  @param $ancestor_id    The node that is potentially descended from
-         *
-         *  @returns True if $descendant_id descends from $ancestor_id, false otherwise
-         */
-        function isDescendantOf( $descendant_id, $ancestor_id ) {
-
-			// if ancertor is root, element is descendant if exist
-			if ( $ancestor_id == 1 ) return ( $this->getNode( $descendant_id ) != false );
-
-			$this->resetAll();
-			
-			return $this->_isDescendantOf( $descendant_id, $ancestor_id );
-        }
-
-
-        /**
-         *  Helper to check if one node descends from another node.
-         *
-         *  @param $descendant_id  The node that potentially descends
-         *  @param $ancestor_id    The node that is potentially descended from
-         *
-         *  @returns True if $descendant_id descends from $ancestor_id, false otherwise
-         */
-        function _isDescendantOf( $descendant_id, $ancestor_id ) {
-
-			// id must be the descendant
-			$this->set( $this->__id, intval( $descendant_id ) );
-
-			// check if descendant has the ancestor in lineage ;)
-			$this->where( $this->__table_lineage . ' LIKE "%/' . intval( $ancestor_id ) . '/%"' );
-		
-			// get total of rows
-			return ( $this->findAll() == 1 );
-        }
-
-
-        /**
-         *  Check if one node is a child of another node. If either node is not found, then false is returned.
-         *
-         * @param $child_id       The node that is possibly a child
-         * @param $parent_id      The node that is possibly a parent
-         *
-         * @returns True if $child_id is a child of $parent_id, false otherwise
-         */
-        function isChildOf( $child_id, $parent_id ) {
-
-			$this->resetAll();
-
-			// check if there is a id that equals $child_id
-			$this->set( $this->__id, intval( $child_id ) );
-
-			// check if there is a parent that equals $parent_id
-			$this->where( $this->__table_parent . ' = ' . intval( $parent_id ) );
-
-			// get total of rows
-			return ( $this->findAll() == 1 );
-        }
-
-
-        /**
-         *  Find the number of descendants a node has
-         *
-         *  @param $id     The ID of the node to search for.
-         *
-         *  @returns The number of descendants the node has
-         */
-        function numDescendants( $id ) {
-
-			$this->resetAll();
-
-			return $this->_numDescendants( $id );
-        }
-
-
-        /**
-         *  Helper to find the number of descendants a node has
-         *
-         *  @param $id     The ID of the node to search for.
-         *
-         *  @returns The number of descendants the node has
-         */
-        function _numDescendants( $id ) {
-
-			// search all nodes that contains this id in lineage. if node is root, count all nodes
-			if ( $id > 1 ) $this->where( $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
-
-			// find them
-			return $this->findAll();
-        }
-
-
-        /**
-         *  Find the number of children a node has
-         *
-         *  @param $id     The ID of the node to search for. Pass 0 to count the first level items
-         *
-         *  @returns The number of descendants the node has, or -1 if the node isn't found.
-         */
-        function numChildren( $id ) {
-
-			$this->resetAll();
-
-			// search all nodes that contains this id in lineage
-			$this->where( $this->__table_parent . ' = ' . intval( $id ) );
-
-			// find them
-			return $this->findAll();
-        }
-
-
-        /**
-         *  Fetch the immediately family of a node. More specifically, fetch a node's parent, siblings and children. 
-         *
-         * @param $id   The ID of the node to fetch child data for.
-         *
-         * @returns An array of each node in the family
-         */
-        function getImmediateFamily( $id ) {
-
-            // Get the node parent
-            $node = $this->getNode( $id );
-
-            // No node, return empty array
-            if ( ! $node ) return array();
-
-			$this->resetAll();
-
-			// get elements that have parent $parent (this returns current element and brothers), that have id $parent (returns parent), and that have lineage like /$id/ (returns all children)
-			$this->where( '(' . $this->__table_parent . '=' . $node[ $this->__parent ] . ' OR ' . $this->__table_id . ' = ' . $node[ $this->__parent ] . ' OR ' . $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' . ')' );
-
-			$this->findAll();
-
-            // Execute the query and get the record
-            return $this->getResults();
-        }
-
-
-        /**
-         *  This function adds a node to the database.
-         *
-         *  @param $values      The field values of the node. Do NOT define parent_id here!
-         *  @param $parent_id   The parent ID of the node. If not set, node will be added as a root child (its parent will be 1)
-         *  @param $position    (optional) Node position. If not set, node will be added at the end position
-         *  @param $onDate      (optional) When element of $values is a date (read: array ), we should convert to this format. Default: 'datetimesql'
-         *
-         *  @returns    The ID of the newly inserted node.
-         */
-        function addNode( $values, $parent_id = 1, $position = null, $onDate = 'datetimesql' ) {
-
-			// check values
-			foreach( $values as $element => $value )
-				if ( is_array( $value ) ) $values[ $element ] = YDStringUtil::formatDate( $value, $onDate );
-
-            // compute linege. to do that we must check if we want to add node to root
-            if ( $parent_id == 1 ) { 
-
-				// compute lineage
-				$lineage = '//';
-			}else{
-
-				// get parent lineage and compute node lineage
-				$parent_node = $this->getNode( $parent_id );
-				$lineage     = $parent_node[ $this->__lineage ] . $parent_id . '/';
-			}
-
-			// get how much brothers we will have
-			$total_brothers = $this->numChildren( $parent_id );
-
-			// compute position. If passed in arg we check if really can be that value, otherwise place node at the end
-			if ( !is_numeric( $position ) || intval( $position ) < 1 || intval( $position ) > $total_brothers + 1 )
-				$position = $total_brothers + 1;
-
-			// create an empty position. To do this, if node is not added in the end, we must increment position of nodes that have the same parent and equal or bigger position 
-			if ( $position != $total_brothers + 1 ){
-	
-				$this->resetAll();
-
-				// position field must increment
-				$this->set( $this->__position, $this->__table_position . ' + 1' );
-
-				// only on new brothers with higher or equal position
-				$this->where( '(' . $this->__table_parent . ' = ' . intval( $parent_id ) . ' AND ' .  $this->__table_position . ' >= ' . intval( $position ) . ')' );
-
-				// lets update.
-				$this->update( array(), $this->__position );
-			}
-
-			// reset any previous value to create insert
-			$this->resetAll();
-
-			// apply custom values
-			$this->setValues( $values );
-
-			// override reserved fields
-			$this->set( $this->__parent,   $parent_id );
-			$this->set( $this->__lineage,  $lineage );
-			$this->set( $this->__level,    $this->_getLevel( $lineage ) );
-			$this->set( $this->__position, $position );
-
-			return $this->insert();
-        }
-
-
-        /**
-         *  This function updates a node fields ( that are NOT RESERVED only )
-         *
-         *  @param $values      The field values of the node. Do NOT update position, parent_id, lineage or level
-         *  @param $id          (optional) The ID of the node to update.
-         *  @param $onDate      (optional) When element of $values is a date (read: array ), we should convert to this format. Default: 'datetimesql'
-         *
-         *  @returns    Total of lines affected
-         */
-        function updateNode( $values, $id, $onDate = 'datetimesql' ) {
-
-			// check values
-			foreach( $values as $element => $value )
-				if ( is_array( $value ) ) $values[ $element ] = YDStringUtil::formatDate( $value, $onDate );
-
-			$this->resetAll();
-
-			// apply custom values
-			$this->setValues( $values );
-			
-			// overwrite id
-			$this->set( $this->__id, intval( $id ) );
-
-			// unset reserved fields
-			$this->unsetVar( $this->__parent );
-			$this->unsetVar( $this->__lineage );
-			$this->unsetVar( $this->__level );
-			$this->unsetVar( $this->__position );
-
-			return $this->update();
-        }
-
-
-        /**
-         *  Delete the node and it's children. NOTE: Make shure your table is in InnoDB !
-         *
-         *  @param $id             The ID of the node to delete.
-         *  @param $deleteAll     (Optional) Delete id and all children (true by default. if false, deletes children only)
-         *
-         *  @returns    Total of lines affected
-         */
-        function deleteNode( $id, $deleteAll = true ) {
-
-            // if we want to delete $id (and all children) we must update positions in all $id brothers after delete
-			if ( $deleteAll ){
-
-	            // get node details before delete. we must know the position
-	            $node = $this->getNode( $id );
-
-				$this->resetAll();
-
-				$this->set( $this->__id, intval( $id ) );
-
-				// if delete didn't affect any rows we don't need to update brothers
-				$total = $this->delete();
-				
-				if ( $total == 0 ) return 0;
-
-				$this->resetAll();
-
-				// decrease positions
-				$this->set( $this->__position, $this->__table_position . ' - 1' );
-
-				// in all elements with same parent AND position bigger than our
-				$this->where( '(' . $this->__table_parent . ' = ' . intval( $node[ $this->__parent ] ) . ' AND ' . $this->__table_position . ' > ' . intval( $node[ $this->__position ] ) . ')' );
-
-				$this->update( array(), $this->__position );
-				
-				return $total;
-			}
-
-			// here we want do delete child only
-			$this->resetAll();
-
-			// we only need to delete children. Children of children will be deleted when mysql is InnoDB
-			$this->where( $this->__table_parent . ' = ' . intval( $id ) );
-
-			return $this->delete();
-        }
-
-
-        /**
-         *  Move a node upper (decreasing the position on same parent).
-         *
-         *  @param  $id             The ID of the node to move
-         */
-		function moveNodeUp( $id ){
-
-			// get current node position
-			$node = $this->getNode( $id );
-
-			// check if node can be moved up
-			if ( $node[ $this->__position ] < 2 ) return false;
-			
-			return $this->moveNode( $id, null, $node[ $this->__position ] - 1 );
-		}
-
-
-        /**
-         *  Move a node upper (decreasing the position on same parent).
-         *
-         *  @param  $id             The ID of the node to move
-         */
-		function moveNodeDown( $id ){
-
-			// get current node position
-			$node = $this->getNode( $id );
-
-			return $this->moveNode( $id, null, $node[ $this->__position ] + 1 );
-		}
-
-
-        /**
-         *  Move a node to a different parent node.
-         *
-         *  @param  $id             The ID of the node to move
-         *  @param  $new_parent_id  (optional) The ID of the new parent node. If not set, will be moved in same parent
-         *  @param  $new_position   (optional) The new position.
-         */
-        function moveNode( $id, $new_parent_id = null, $new_position = null ) {
-
-            // get old node details before move
-            $old_node      = $this->getNode( $id );
-            $old_parent_id = $old_node[ $this->__parent ];
-            $old_position  = $old_node[ $this->__position ];
-            $old_lineage   = $old_node[ $this->__lineage ];
-
-			// compute new parent id
-			if ( ! is_numeric( $new_parent_id ) ) $new_parent_id = $old_parent_id;
-
-			// if position not set, we will move node to the end of the new parent
-			$total_new_brothers = $this->numChildren( $new_parent_id );
-
-			// if custom position is not valid add node at end
-			if ( ! is_numeric( $new_position ) || intval( $new_position ) < 1 || intval( $new_position ) > $total_new_brothers + 1 )
-				$new_position = 1 + $total_new_brothers;
-
-			// get information of old parent
-            $old_parent_node = $this->getNode( $old_parent_id );
-
-			// get information of new parent if diferent than old parent
-			if ( $new_parent_id == $old_parent_id ) $new_parent_node = $old_parent_node;
-            else                                    $new_parent_node = $this->getNode( $new_parent_id );
-
-
-			// only update positions if new parent and old parent are not the same OR if (they are same but) positions are not changed
-			if ( $new_parent_id != $old_parent_id || $new_position != $old_position ){
-
-				// decrease positions of old brothers that have position bigger than this node position
-				$this->resetAll();
-				$this->set( $this->__position, $this->__table_position . ' - 1' );
-				$this->where( '(' . $this->__table_parent . ' = ' . $old_parent_id . ' AND ' . $this->__table_position . ' > ' . $old_position . ')' );
-				$this->update( array(), $this->__position );
-
-				// add position space for this node in new parent: increase positions of new brothers that have position bigger than this node position
-				$this->resetAll();
-				$this->set( $this->__position, $this->__table_position . ' + 1' );
-				$this->where( '(' . $this->__table_parent . ' = ' . $new_parent_id . ' AND ' . $this->__table_position . ' >= ' . $new_position . ')' );
-				$this->update( array(), $this->__position );
-			}
-
-			// compute lineage
-			if ( $new_parent_id == 1 ) $new_lineage = '//';
-			else                       $new_lineage = $new_parent_node[ $this->__lineage ] . $new_parent_id . '/';
-
-			// update node
-			$this->resetAll();
-			$this->set( $this->__id,       intval( $id ) );
-			$this->set( $this->__parent,   intval( $new_parent_id ) );
-			$this->set( $this->__lineage,  $new_lineage );
-			$this->set( $this->__level,    $this->_getLevel( $new_lineage ) );
-			$this->set( $this->__position, intval( $new_position ) );
-			$res = $this->update();
-			
-			// update lineages of node descendants ;)
-			if ( $new_parent_id != $old_parent_id ){
-				$this->resetAll();
-				$this->set( $this->__lineage, 'REPLACE(' . $this->__table_lineage . ',"' . $old_lineage . $id . '/","' . $new_lineage . $id . '/")' );
-				$this->where( $this->__table_id . ' > 1 ' );
-				$this->update( array(), $this->__lineage );
-
-				// update levels of node descendants
-				$new_level = $this->_getLevel( $new_lineage );
-				$old_level = $this->_getLevel( $old_lineage );
-
-				$diff_level = $new_level - $old_level;
-
-				$this->resetAll();
-
-				if ( $diff_level > 0 ) $this->set( $this->__level, $this->__level . '+' . abs( $diff_level ) );
-				else                   $this->set( $this->__level, $this->__level . '-' . abs( $diff_level ) );
-
-				$this->where( $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
-				$this->update(array(), $this->__level );
-			}
-
-			return $res;
-        }
-
-
-        /**
-         *  Fetch an array of tree nodes containing a traversal of the tree. 
-         *
-         * @param $id   (optional) The ID of the node to fetch child data for.
-         *
-         * @returns An array of each node in the tree
-         */
-		function getTraversedTree( $id = 1 ) {
-		
-			$this->_tree_data = $this->getTreeElements();
-			$this->_tree_data_keys = array_keys( $this->_tree_data );
-		
-			return $this->_getTraversedTree( $id );
-		}
-
-
-        /**
-         *  Helper function to get traversal of tree. 
-         *
-         * @param $id   (optional) The ID of the node to fetch child data for.
-         *
-         * @returns An array of each node in the tree
-         */
-		function _getTraversedTree( $id = 1 ) {
-		
-			$key_match = false;
-			
-			foreach ( $this->_tree_data_keys as $key ) {
-				if ( $this->_tree_data[$key]['id'] == $id ) {
-					$key_match = true;
-					$ref = & $this->_tree_data[$key];
-					break;
-				}
-			}
-			
-			if ( $key_match ) {
-				$result = array( $ref );
-			} else {
-				$result = array();
-			}
-			
-			$children = $this->getChildren ( $id, true );
-			
-			foreach ( $children as $child ) {			
-				$child_ids = $this->getTraversedTree( $child['id'] );				
-				$result = array_merge( $result, $child_ids );
-			}
-						
-			return $result;
-		}
-		
-
-    }
+<?php
+
+    /*
+
+        Yellow Duck Framework version 2.1
+        (c) Copyright 2002-2007 Pieter Claerhout
+
+        This library is free software; you can redistribute it and/or
+        modify it under the terms of the GNU Lesser General Public
+        License as published by the Free Software Foundation; either
+        version 2.1 of the License, or (at your option) any later version.
+
+        This library is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+        Lesser General Public License for more details.
+
+        You should have received a copy of the GNU Lesser General Public
+        License along with this library; if not, write to the Free Software
+        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+
+    */
+
+    /**
+     *  @addtogroup YDDatabaseObjectTree Addons - DatabaseObjectTree
+     */
+
+    // Check if the framework is loaded
+    if ( ! defined( 'YD_FW_NAME' ) ) {
+        die( 'Yellow Duck Framework is not loaded.' );
+    }
+
+	// add YDF libs needed by this class
+	require_once( YD_DIR_HOME_ADD . '/YDDatabaseObject/YDDatabaseObject.php' );
+
+    /**
+     *	This is the actual implementation of the lineage tree algorithm but as an YDDatabaseObject.
+     *
+     *  The DatabaseObjectTree needs to have the following database schema.
+     *  
+     *  @code
+     *	CREATE TABLE nested_tree (
+     *	    id int NOT NULL auto_increment,
+     *	    parent_id int NULL,
+     *	    lineage varchar(255) NOT NULL default '//',
+     *	    level int NOT NULL default '1',
+     *	    position int NOT NULL default '1',
+     *	    title varchar(255) NOT NULL default '',
+     *	    PRIMARY KEY (id),
+     *	    FOREIGN KEY (parent_id)
+     *	        REFERENCES nested_tree(id)
+     *	             ON DELETE CASCADE
+     *	             ON UPDATE CASCADE
+     *	)TYPE=InnoDB;
+     *  @endcode
+     *
+     *  Note: root node must have ID 1, PARENT null and LINEAGE '' !
+     * 
+     *  @code
+     *  INSERT INTO nested_tree VALUES ( 1, null, '',         0, 1, '');
+     *  INSERT INTO nested_tree VALUES ( 2,    1, '//',       1, 1, 'General Resources');
+     *  INSERT INTO nested_tree VALUES ( 3,    2, '//2/',     2, 1, 'Code Paste');
+     *  INSERT INTO nested_tree VALUES ( 4,    2, '//2/',     2, 2, 'Documentation');
+     *  INSERT INTO nested_tree VALUES ( 5,    2, '//2/',     2, 3, 'Books & Publications');
+     *  INSERT INTO nested_tree VALUES ( 6,    5, '//2/5/',   3, 1, 'Apache');
+     *  INSERT INTO nested_tree VALUES ( 7,    5, '//2/5/',   3, 2, 'PostgreSQL');
+     *  INSERT INTO nested_tree VALUES ( 8,    5, '//2/5/',   3, 3, 'MySQL');
+     *  INSERT INTO nested_tree VALUES ( 9,    2, '//2/',     2, 4, 'Links');
+     *  INSERT INTO nested_tree VALUES (10,    9, '//2/9/',   3, 1, 'Databases');
+     *  INSERT INTO nested_tree VALUES (11,    9, '//2/9/',   3, 2, 'Generators');
+     *  INSERT INTO nested_tree VALUES (12,    9, '//2/9/',   3, 3, 'Portals');
+     *  @endcode
+     *
+     *  @ingroup YDDatabaseObjectTree
+     */
+    class YDDatabaseObjectTree extends YDDatabaseObject {
+    
+        function YDDatabaseObjectTree( $table, $db = 'default', $idField = 'id', $parentField = 'parent_id', $lineageField = 'lineage', $levelField = 'level', $positionField = 'position' ) {
+        
+			// init DB object
+            $this->YDDatabaseObject();
+
+			// register database
+            $this->registerDatabase( $db );
+
+			// register table
+            $this->registerTable( $table );
+
+			// register reserved fields
+			$this->registerKey( $idField, true );
+			$this->registerField( $parentField );
+			$this->registerField( $lineageField );
+			$this->registerField( $levelField );
+			$this->registerField( $positionField );
+
+			// save field names for future use
+			$this->__id       = $idField;
+			$this->__parent   = $parentField;
+			$this->__lineage  = $lineageField;
+			$this->__level    = $levelField;
+			$this->__position = $positionField;
+
+			$this->__table_id       = $table . '.' . $idField;
+			$this->__table_parent   = $table . '.' . $parentField;
+			$this->__table_lineage  = $table . '.' . $lineageField;
+			$this->__table_level    = $table . '.' . $levelField;
+			$this->__table_position = $table . '.' . $positionField;
+
+
+			// define a generic tree order
+			$this->setOrder( $this->__table_level . ' ASC,' . $this->__table_position . ' ASC' );
+		}
+
+
+        /**
+         *  This function defines the order used in all SELECTS
+         *
+         *  @param $sql  The sql order string.
+         */
+        function setOrder( $sql ){
+
+			return $this->_tree_order = $sql;
+        }
+
+
+        /**
+         *  This function will overide the YDDatabaseObject to reset object but init order
+         */
+		function resetAll(){
+			parent::resetAll();
+			$this->order( $this->_tree_order );
+		}
+
+
+        /**
+         *  Returns the node level based on the lineage string
+         *
+         *  @returns  level int value
+         */
+        function _getLevel( $lineage ) {
+			return substr_count( $lineage, '/' ) - 1;
+        }
+
+
+        /**
+         *  Fetch the node data for the node identified by $id.
+         *
+         *  @param $id      The ID of the node to fetch.
+         *  @param $field   (Optional) The unique field to select on. Defaults to id, which means that the ID field specified
+         *                  when the object was instantiated will be used.
+         *  @param $class   (optional) Relation name
+         *  @param $prefix  (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *
+         *  @returns An object containing the node's data, or false if node not found
+         */
+        function getNode( $id, $field = null, $class = null, $prefix = false ) {
+
+			$this->resetAll();
+
+            // get node
+            return $this->_getNode( $id, $field, $class, $prefix );
+        }
+
+
+        /**
+         *  Helper method to fetch a node.
+         *
+         *  @param $id      The ID of the node to fetch.
+         *  @param $field   (optional) The unique field to select on. Defaults to id, which means that the ID field specified
+         *                             when the object was instantiated will be used.
+         *  @param $class   (optional) Relation name
+         *  @param $prefix  (optional) Adds the relation's vars as prefixes to the keys. Default: true.
+         *
+         *  @returns An object containing the node's data, or false if node not found
+         */
+        function _getNode( $id, $field = null, $class = null, $prefix = true ) {
+
+			// if field not defined, field is id
+			if ( is_null( $field ) ) $field = $this->__id;
+	
+			// set local field
+			if ( is_null( $class ) ){
+
+				// set field value
+				$this->set( $field, $id );
+			}else{
+
+				// load relation and set field
+				$this->load( $class );
+				$this->$class->set( $field, $id );
+			}
+
+			// check results
+			if ( $this->findAll() == 0 ) return false;
+
+            // Execute the query and return the record
+            return $this->getValues( false, false, false, $prefix );
+        }
+
+
+        /**
+         *  Fetch the descendants of a node. NOTE: To get all elements use getTreeElements()
+         *
+         *  @param $id              The ID of the node to fetch descendant data for. 
+         *  @param $includeSelf     (optional) Whether or not to include the passed node in results. 
+         *  @param $maxLevel        (optional) Max level to retrieve. Eg: 10 returns all descendants with level smaller than 10; NULL retrieve all descendants.
+         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *  @param $minLevel        (optional) Min level to retrieve. Eg: 2 returns all descendants with level bigger than 2; NULL retrieve all descendants.
+         *
+         *  @returns The descendants of the passed now
+         */
+        function getDescendants( $id, $includeSelf = false, $maxLevel = null, $prefix = false, $minLevel = null ) {
+
+			// check if we want an invalid id (like 0 or 1)
+			if ( $id < 2 ) return $this->getTreeElements( $prefix );
+
+			$this->resetAll();
+
+			return $this->_getDescendants( $id, $includeSelf, $maxLevel, $prefix, $minLevel );
+		}
+
+
+        /**
+         *  Helper to fetch the descendants of a node
+         *
+         *  @param $id              The ID of the node to fetch descendant data for. 
+         *  @param $includeSelf     (optional) Whether or not to include the passed node in results. 
+         *  @param $maxLevel        (optional) Max level to retrieve. Eg: 10 returns all descendants with level smaller than 10; NULL retrieve all descendants.
+         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *  @param $minLevel        (optional) Min level to retrieve. Eg: 2 returns all descendants with level bigger than 2; NULL retrieve all descendants.
+         *
+         *  @returns The descendants of id
+         */
+        function _getDescendants( $id, $includeSelf = false, $maxLevel = null, $prefix = false, $minLevel = null ) {
+
+            // get just children
+			if ( $includeSelf == false ) $this->where(       $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
+			else                         $this->where( '(' . $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%" OR ' . $this->__table_id . ' = ' . intval( $id ) . ')' );
+
+			// check max level to retrieve
+			if ( is_numeric( $maxLevel ) ) $this->where( $this->__table_level . '<' . intval( $maxLevel ) );
+
+			// check min level to retrieve
+			if ( is_numeric( $minLevel ) ) $this->where( $this->__table_level . '>' . intval( $minLevel ) );
+
+			// find nodes
+			$this->findAll();
+
+			// return all nodes
+			return $this->getResults( false, false, false, $prefix );
+		}
+
+
+        /**
+         *  Fetch all elements of a tree
+         *
+         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *
+         *  @returns All tree nodes
+         */
+        function getTreeElements( $prefix = false ) {
+
+			$this->resetAll();
+
+			return $this->_getTreeElements( $prefix );
+		}
+
+
+        /**
+         *  Helper to fetch all elements of a tree
+         *
+         *  @param $prefix          (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *
+         *  @returns All tree nodes
+         */
+        function _getTreeElements( $prefix = false ) {
+
+			// get all elements except root
+			$this->where( $this->__table_id . ' > 1' );
+
+			// find elements
+			$this->findAll();
+
+			// return all nodes
+			return $this->getResults( false, false, false, $prefix );
+		}
+
+
+        /**
+         *  Helper to fetch all elements of a tree as an assocArray
+         *
+         *  @param $columns             (Optional) Columns to retrieve. Default: add columns
+         *  @param $key                 (Optional) Key to use. Default: current table key
+         *
+         *  @returns All tree nodes
+         */
+        function _getTreeElementsAsAssocArray( $columns = array(), $key = null ) {
+
+			// get all elements except root
+			$this->where( $this->__table_id . ' > 1' );
+
+			// find elements
+			$this->findAll();
+
+			// compute key
+			if ( is_null( $key ) ) $key = $this->__id;
+
+			// return all nodes
+			return $this->getResultsAsAssocArray( $key, $columns );
+		}
+
+
+        /**
+         *  Fetch the children of a node, or if no node is specified, fetch the top level items.
+         *
+         *  @param $id             The ID of the node to fetch child data for.
+         *  @param $includeSelf    (optional) Include self node in results. Default: false.
+         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *
+         *  @returns The children of the passed id
+         */
+        function getChildren( $id, $includeSelf = false, $prefix = false ){
+
+			$this->resetAll();
+			
+			return $this->_getChildren( $id, $includeSelf, $prefix );
+        }
+
+
+        /**
+         *  Helper to fetch the children of a node, or if no node is specified, fetch the top level items.
+         *
+         *  @param $id             The ID of the node to fetch child data for. When includeSelf is false ID can be an array.
+         *  @param $includeSelf    (optional) Include self node in results. Default: false.
+         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *
+         *  @returns The children of the passed id
+         */
+        function _getChildren( $id, $includeSelf = false, $prefix = false  ){
+
+            // get just children
+			if ( $includeSelf == false ){
+				
+				if ( ! is_array( $id ) ) $id = array( $id );
+				
+				$this->where( $this->__table_parent . " IN ('" . implode( "','", $id ) . "')" );
+			}else{
+			    $this->where( '(' . $this->__table_parent . ' = ' . intval( $id ) . ' OR ' . $this->__table_id . ' = ' . intval( $id ) . ')' );
+			}
+
+			$this->findAll();
+
+			return $this->getResults( false, false, false, $prefix );
+        }
+
+
+        /**
+         *  Fetch the path to a node. If an invalid node is passed, an empty array is returned. If a top level node is 
+         *  passed, an array containing on that node is included (if 'includeSelf' is set to true, otherwise an empty
+         *  array).
+         *
+         *  @param $id             The ID of the node to fetch child data for.
+         *  @param $includeSelf    (optional) Whether or not to include the passed node in the the results.
+         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *  @param $minLevel       (optional) Level where path should start. By default, starts from level 1 ( root ).
+         *
+         *  @returns An array of each node to passed node
+         */
+        function getPath( $id, $includeSelf = false, $prefix = false, $minLevel = 1 ) {
+
+			$this->resetAll();
+
+			return $this->_getPath( $id, $includeSelf, $prefix, $minLevel );
+        }
+
+
+        /**
+         *  Helper to fetch the path to a node. 
+         *
+         *  @param $id             The ID of the node to fetch child data for.
+         *  @param $includeSelf    (optional) Whether or not to include the passed node in the the results.
+         *  @param $prefix         (optional) Adds the relation's vars as prefixes to the keys. Default: false.
+         *  @param $minLevel       (optional) Level where path should start. By default, starts from level 1 ( root ).
+         *
+         *  @returns An array of each node to passed node
+         */
+        function _getPath( $id, $includeSelf = false, $prefix = false, $minLevel = 1 ) {
+
+            // Get the node
+            $node = $this->getNode( intval( $id ) ) ;
+
+			// reset values of previous getNode()
+			$this->resetAll();
+
+            // No node, return empty array
+            if ( ! $node ) return array();
+
+			// compute parents of this node. Read lineage, delete first '//', last '/', apply 'intval' to all elements and implode
+			$nodes = array_map( 'intval', explode( '/', substr( substr( $node[ $this->__lineage ], 2 ), 0, -1 ) ) );
+
+			// if we want current node too, lets add it to nodes array
+            if ( $includeSelf == true ) $nodes[] = intval( $id );
+
+            // check start level
+            if ( $minLevel > 1 ){
+                for( $i = 1; $i < $minLevel && count( $nodes ) > 0; $i++ ){
+                    array_shift( $nodes );
+                }
+            }
+
+			// apply where clause
+			$this->where( $this->__table_id . ' IN (' . $this->escapeSqlArray( $nodes ) . ')' );
+
+			$this->findAll();
+
+			return $this->getResults( false, false, false, $prefix );
+        }
+
+
+        /**
+         *  Check if one node descends from another node. If either node is not found, then false is returned.
+         *
+         *  @param $descendant_id  The node that potentially descends
+         *  @param $ancestor_id    The node that is potentially descended from
+         *
+         *  @returns True if $descendant_id descends from $ancestor_id, false otherwise
+         */
+        function isDescendantOf( $descendant_id, $ancestor_id ) {
+
+			// if ancertor is root, element is descendant if exist
+			if ( $ancestor_id == 1 ) return ( $this->getNode( $descendant_id ) != false );
+
+			$this->resetAll();
+			
+			return $this->_isDescendantOf( $descendant_id, $ancestor_id );
+        }
+
+
+        /**
+         *  Helper to check if one node descends from another node.
+         *
+         *  @param $descendant_id  The node that potentially descends
+         *  @param $ancestor_id    The node that is potentially descended from
+         *
+         *  @returns True if $descendant_id descends from $ancestor_id, false otherwise
+         */
+        function _isDescendantOf( $descendant_id, $ancestor_id ) {
+
+			// id must be the descendant
+			$this->set( $this->__id, intval( $descendant_id ) );
+
+			// check if descendant has the ancestor in lineage ;)
+			$this->where( $this->__table_lineage . ' LIKE "%/' . intval( $ancestor_id ) . '/%"' );
+		
+			// get total of rows
+			return ( $this->findAll() == 1 );
+        }
+
+
+        /**
+         *  Check if one node is a child of another node. If either node is not found, then false is returned.
+         *
+         * @param $child_id       The node that is possibly a child
+         * @param $parent_id      The node that is possibly a parent
+         *
+         * @returns True if $child_id is a child of $parent_id, false otherwise
+         */
+        function isChildOf( $child_id, $parent_id ) {
+
+			$this->resetAll();
+
+			// check if there is a id that equals $child_id
+			$this->set( $this->__id, intval( $child_id ) );
+
+			// check if there is a parent that equals $parent_id
+			$this->where( $this->__table_parent . ' = ' . intval( $parent_id ) );
+
+			// get total of rows
+			return ( $this->findAll() == 1 );
+        }
+
+
+        /**
+         *  Find the number of descendants a node has
+         *
+         *  @param $id     The ID of the node to search for.
+         *
+         *  @returns The number of descendants the node has
+         */
+        function numDescendants( $id ) {
+
+			$this->resetAll();
+
+			return $this->_numDescendants( $id );
+        }
+
+
+        /**
+         *  Helper to find the number of descendants a node has
+         *
+         *  @param $id     The ID of the node to search for.
+         *
+         *  @returns The number of descendants the node has
+         */
+        function _numDescendants( $id ) {
+
+			// search all nodes that contains this id in lineage. if node is root, count all nodes
+			if ( $id > 1 ) $this->where( $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
+
+			// find them
+			return $this->findAll();
+        }
+
+
+        /**
+         *  Find the number of children a node has
+         *
+         *  @param $id     The ID of the node to search for. Pass 0 to count the first level items
+         *
+         *  @returns The number of descendants the node has, or -1 if the node isn't found.
+         */
+        function numChildren( $id ) {
+
+			$this->resetAll();
+
+			// search all nodes that contains this id in lineage
+			$this->where( $this->__table_parent . ' = ' . intval( $id ) );
+
+			// find them
+			return $this->findAll();
+        }
+
+
+        /**
+         *  Fetch the immediately family of a node. More specifically, fetch a node's parent, siblings and children. 
+         *
+         * @param $id   The ID of the node to fetch child data for.
+         *
+         * @returns An array of each node in the family
+         */
+        function getImmediateFamily( $id ) {
+
+            // Get the node parent
+            $node = $this->getNode( $id );
+
+            // No node, return empty array
+            if ( ! $node ) return array();
+
+			$this->resetAll();
+
+			// get elements that have parent $parent (this returns current element and brothers), that have id $parent (returns parent), and that have lineage like /$id/ (returns all children)
+			$this->where( '(' . $this->__table_parent . '=' . $node[ $this->__parent ] . ' OR ' . $this->__table_id . ' = ' . $node[ $this->__parent ] . ' OR ' . $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' . ')' );
+
+			$this->findAll();
+
+            // Execute the query and get the record
+            return $this->getResults();
+        }
+
+
+        /**
+         *  This function adds a node to the database.
+         *
+         *  @param $values      The field values of the node. Do NOT define parent_id here!
+         *  @param $parent_id   The parent ID of the node. If not set, node will be added as a root child (its parent will be 1)
+         *  @param $position    (optional) Node position. If not set, node will be added at the end position
+         *  @param $onDate      (optional) When element of $values is a date (read: array ), we should convert to this format. Default: 'datetimesql'
+         *
+         *  @returns    The ID of the newly inserted node.
+         */
+        function addNode( $values, $parent_id = 1, $position = null, $onDate = 'datetimesql' ) {
+
+			// check values
+			foreach( $values as $element => $value )
+				if ( is_array( $value ) ) $values[ $element ] = YDStringUtil::formatDate( $value, $onDate );
+
+            // compute linege. to do that we must check if we want to add node to root
+            if ( $parent_id == 1 ) { 
+
+				// compute lineage
+				$lineage = '//';
+			}else{
+
+				// get parent lineage and compute node lineage
+				$parent_node = $this->getNode( $parent_id );
+				$lineage     = $parent_node[ $this->__lineage ] . $parent_id . '/';
+			}
+
+			// get how much brothers we will have
+			$total_brothers = $this->numChildren( $parent_id );
+
+			// compute position. If passed in arg we check if really can be that value, otherwise place node at the end
+			if ( !is_numeric( $position ) || intval( $position ) < 1 || intval( $position ) > $total_brothers + 1 )
+				$position = $total_brothers + 1;
+
+			// create an empty position. To do this, if node is not added in the end, we must increment position of nodes that have the same parent and equal or bigger position 
+			if ( $position != $total_brothers + 1 ){
+	
+				$this->resetAll();
+
+				// position field must increment
+				$this->set( $this->__position, $this->__table_position . ' + 1' );
+
+				// only on new brothers with higher or equal position
+				$this->where( '(' . $this->__table_parent . ' = ' . intval( $parent_id ) . ' AND ' .  $this->__table_position . ' >= ' . intval( $position ) . ')' );
+
+				// lets update.
+				$this->update( array(), $this->__position );
+			}
+
+			// reset any previous value to create insert
+			$this->resetAll();
+
+			// apply custom values
+			$this->setValues( $values );
+
+			// override reserved fields
+			$this->set( $this->__parent,   $parent_id );
+			$this->set( $this->__lineage,  $lineage );
+			$this->set( $this->__level,    $this->_getLevel( $lineage ) );
+			$this->set( $this->__position, $position );
+
+			return $this->insert();
+        }
+
+
+        /**
+         *  This function updates a node fields ( that are NOT RESERVED only )
+         *
+         *  @param $values      The field values of the node. Do NOT update position, parent_id, lineage or level
+         *  @param $id          (optional) The ID of the node to update.
+         *  @param $onDate      (optional) When element of $values is a date (read: array ), we should convert to this format. Default: 'datetimesql'
+         *
+         *  @returns    Total of lines affected
+         */
+        function updateNode( $values, $id, $onDate = 'datetimesql' ) {
+
+			// check values
+			foreach( $values as $element => $value )
+				if ( is_array( $value ) ) $values[ $element ] = YDStringUtil::formatDate( $value, $onDate );
+
+			$this->resetAll();
+
+			// apply custom values
+			$this->setValues( $values );
+			
+			// overwrite id
+			$this->set( $this->__id, intval( $id ) );
+
+			// unset reserved fields
+			$this->unsetVar( $this->__parent );
+			$this->unsetVar( $this->__lineage );
+			$this->unsetVar( $this->__level );
+			$this->unsetVar( $this->__position );
+
+			return $this->update();
+        }
+
+
+        /**
+         *  Delete the node and it's children. NOTE: Make shure your table is in InnoDB !
+         *
+         *  @param $id             The ID of the node to delete.
+         *  @param $deleteAll     (Optional) Delete id and all children (true by default. if false, deletes children only)
+         *
+         *  @returns    Total of lines affected
+         */
+        function deleteNode( $id, $deleteAll = true ) {
+
+            // if we want to delete $id (and all children) we must update positions in all $id brothers after delete
+			if ( $deleteAll ){
+
+	            // get node details before delete. we must know the position
+	            $node = $this->getNode( $id );
+
+				$this->resetAll();
+
+				$this->set( $this->__id, intval( $id ) );
+
+				// if delete didn't affect any rows we don't need to update brothers
+				$total = $this->delete();
+				
+				if ( $total == 0 ) return 0;
+
+				$this->resetAll();
+
+				// decrease positions
+				$this->set( $this->__position, $this->__table_position . ' - 1' );
+
+				// in all elements with same parent AND position bigger than our
+				$this->where( '(' . $this->__table_parent . ' = ' . intval( $node[ $this->__parent ] ) . ' AND ' . $this->__table_position . ' > ' . intval( $node[ $this->__position ] ) . ')' );
+
+				$this->update( array(), $this->__position );
+				
+				return $total;
+			}
+
+			// here we want do delete child only
+			$this->resetAll();
+
+			// we only need to delete children. Children of children will be deleted when mysql is InnoDB
+			$this->where( $this->__table_parent . ' = ' . intval( $id ) );
+
+			return $this->delete();
+        }
+
+
+        /**
+         *  Move a node upper (decreasing the position on same parent).
+         *
+         *  @param  $id             The ID of the node to move
+         */
+		function moveNodeUp( $id ){
+
+			// get current node position
+			$node = $this->getNode( $id );
+
+			// check if node can be moved up
+			if ( $node[ $this->__position ] < 2 ) return false;
+			
+			return $this->moveNode( $id, null, $node[ $this->__position ] - 1 );
+		}
+
+
+        /**
+         *  Move a node upper (decreasing the position on same parent).
+         *
+         *  @param  $id             The ID of the node to move
+         */
+		function moveNodeDown( $id ){
+
+			// get current node position
+			$node = $this->getNode( $id );
+
+			return $this->moveNode( $id, null, $node[ $this->__position ] + 1 );
+		}
+
+
+        /**
+         *  Move a node to a different parent node.
+         *
+         *  @param  $id             The ID of the node to move
+         *  @param  $new_parent_id  (optional) The ID of the new parent node. If not set, will be moved in same parent
+         *  @param  $new_position   (optional) The new position.
+         */
+        function moveNode( $id, $new_parent_id = null, $new_position = null ) {
+
+            // get old node details before move
+            $old_node      = $this->getNode( $id );
+            $old_parent_id = $old_node[ $this->__parent ];
+            $old_position  = $old_node[ $this->__position ];
+            $old_lineage   = $old_node[ $this->__lineage ];
+
+			// compute new parent id
+			if ( ! is_numeric( $new_parent_id ) ) $new_parent_id = $old_parent_id;
+
+			// if position not set, we will move node to the end of the new parent
+			$total_new_brothers = $this->numChildren( $new_parent_id );
+
+			// if custom position is not valid add node at end
+			if ( ! is_numeric( $new_position ) || intval( $new_position ) < 1 || intval( $new_position ) > $total_new_brothers + 1 )
+				$new_position = 1 + $total_new_brothers;
+
+			// get information of old parent
+            $old_parent_node = $this->getNode( $old_parent_id );
+
+			// get information of new parent if diferent than old parent
+			if ( $new_parent_id == $old_parent_id ) $new_parent_node = $old_parent_node;
+            else                                    $new_parent_node = $this->getNode( $new_parent_id );
+
+
+			// only update positions if new parent and old parent are not the same OR if (they are same but) positions are not changed
+			if ( $new_parent_id != $old_parent_id || $new_position != $old_position ){
+
+				// decrease positions of old brothers that have position bigger than this node position
+				$this->resetAll();
+				$this->set( $this->__position, $this->__table_position . ' - 1' );
+				$this->where( '(' . $this->__table_parent . ' = ' . $old_parent_id . ' AND ' . $this->__table_position . ' > ' . $old_position . ')' );
+				$this->update( array(), $this->__position );
+
+				// add position space for this node in new parent: increase positions of new brothers that have position bigger than this node position
+				$this->resetAll();
+				$this->set( $this->__position, $this->__table_position . ' + 1' );
+				$this->where( '(' . $this->__table_parent . ' = ' . $new_parent_id . ' AND ' . $this->__table_position . ' >= ' . $new_position . ')' );
+				$this->update( array(), $this->__position );
+			}
+
+			// compute lineage
+			if ( $new_parent_id == 1 ) $new_lineage = '//';
+			else                       $new_lineage = $new_parent_node[ $this->__lineage ] . $new_parent_id . '/';
+
+			// update node
+			$this->resetAll();
+			$this->set( $this->__id,       intval( $id ) );
+			$this->set( $this->__parent,   intval( $new_parent_id ) );
+			$this->set( $this->__lineage,  $new_lineage );
+			$this->set( $this->__level,    $this->_getLevel( $new_lineage ) );
+			$this->set( $this->__position, intval( $new_position ) );
+			$res = $this->update();
+			
+			// update lineages of node descendants ;)
+			if ( $new_parent_id != $old_parent_id ){
+				$this->resetAll();
+				$this->set( $this->__lineage, 'REPLACE(' . $this->__table_lineage . ',"' . $old_lineage . $id . '/","' . $new_lineage . $id . '/")' );
+				$this->where( $this->__table_id . ' > 1 ' );
+				$this->update( array(), $this->__lineage );
+
+				// update levels of node descendants
+				$new_level = $this->_getLevel( $new_lineage );
+				$old_level = $this->_getLevel( $old_lineage );
+
+				$diff_level = $new_level - $old_level;
+
+				$this->resetAll();
+
+				if ( $diff_level > 0 ) $this->set( $this->__level, $this->__level . '+' . abs( $diff_level ) );
+				else                   $this->set( $this->__level, $this->__level . '-' . abs( $diff_level ) );
+
+				$this->where( $this->__table_lineage . ' LIKE "%/' . intval( $id ) . '/%"' );
+				$this->update(array(), $this->__level );
+			}
+
+			return $res;
+        }
+
+
+        /**
+         *  Fetch an array of tree nodes containing a traversal of the tree. 
+         *
+         * @param $id   (optional) The ID of the node to fetch child data for.
+         *
+         * @returns An array of each node in the tree
+         */
+		function getTraversedTree( $id = 1 ) {
+		
+			$this->_tree_data = $this->getTreeElements();
+			$this->_tree_data_keys = array_keys( $this->_tree_data );
+		
+			return $this->_getTraversedTree( $id );
+		}
+
+
+        /**
+         *  Helper function to get traversal of tree. 
+         *
+         * @param $id   (optional) The ID of the node to fetch child data for.
+         *
+         * @returns An array of each node in the tree
+         */
+		function _getTraversedTree( $id = 1 ) {
+		
+			$key_match = false;
+			
+			foreach ( $this->_tree_data_keys as $key ) {
+				if ( $this->_tree_data[$key]['id'] == $id ) {
+					$key_match = true;
+					$ref = & $this->_tree_data[$key];
+					break;
+				}
+			}
+			
+			if ( $key_match ) {
+				$result = array( $ref );
+			} else {
+				$result = array();
+			}
+			
+			$children = $this->getChildren ( $id, true );
+			
+			foreach ( $children as $child ) {			
+				$child_ids = $this->getTraversedTree( $child['id'] );				
+				$result = array_merge( $result, $child_ids );
+			}
+						
+			return $result;
+		}
+		
+
+    }
 ?>
\ No newline at end of file



From ximian at mail.berlios.de  Wed May 16 21:52:39 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Wed, 16 May 2007 21:52:39 +0200
Subject: [ydf-devel] r2427 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705161952.l4GJqdbN023844@sheep.berlios.de>

Author: ximian
Date: 2007-05-16 21:52:17 +0200 (Wed, 16 May 2007)
New Revision: 2427

Added:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php
Log:
- added new class YDList that handles lists (eg: gmts, countries.. )
  ( this way we can make YDUtil smaller and include YDList when we really need a list )

Added: YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php	2007-05-16 18:52:10 UTC (rev 2426)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php	2007-05-16 19:52:17 UTC (rev 2427)
@@ -0,0 +1,358 @@
+<?php
+
+    /*
+
+        Yellow Duck Framework version 2.1
+        (c) Copyright 2002-2007 Pieter Claerhout
+
+        This library is free software; you can redistribute it and/or
+        modify it under the terms of the GNU Lesser General Public
+        License as published by the Free Software Foundation; either
+        version 2.1 of the License, or (at your option) any later version.
+
+        This library is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+        Lesser General Public License for more details.
+
+        You should have received a copy of the GNU Lesser General Public
+        License along with this library; if not, write to the Free Software
+        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+
+    */
+
+    /**
+     *  @addtogroup YDFramework Core
+     */
+
+    // Check if the framework is loaded
+    if ( ! defined( 'YD_FW_NAME' ) ) {
+        die( 'Yellow Duck Framework is not loaded.' );
+    }
+
+
+    /**
+     *  This class houses all array lists. All the methods are implemented as static methods and
+     *	do not require you to create a class instance in order to use them.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDList extends YDBase {
+
+        /**
+         *  This function will return a array with gmts.
+         *
+         *  @param $format      Format to return:     NULL  returns complete array.
+         *                                        'simple'  returns: array( -11 => '(GMT -11:00)', -10 => ...
+         *                                          'full'  returns: array( -11 => '(GMT -11:00) Nome, Midway Island, Samoa', -10 => ...
+         *
+         *  @returns	Array. If format is 
+         *  @static
+         */
+        function gmts( $format = null ){
+            $g = array(
+                '-11'   => array( '(GMT -11:00)', 'Nome, Midway Island, Samoa' ),
+                '-10'   => array( '(GMT -10:00)', 'Hawaii' ),
+                 '-9'   => array( '(GMT  -9:00)', 'Alaska' ),
+                 '-8'   => array( '(GMT  -8:00)', 'Pacific Time' ),
+                 '-7'   => array( '(GMT  -7:00)', 'Mountain Time' ),
+                 '-6'   => array( '(GMT  -6:00)', 'Central Time, Mexico City' ),
+                 '-5'   => array( '(GMT  -5:00)', 'Eastern Time, Bogota, Lima, Quito' ),
+                 '-4'   => array( '(GMT  -4:00)', 'Atlantic Time, Caracas, La Paz' ),
+                 '-3.5' => array( '(GMT  -3:30)', 'Newfoundland' ),
+                 '-3'   => array( '(GMT  -3:00)', 'Brazil, Buenos Aires, Georgetown, Falkland Is.' ),
+                 '-2'   => array( '(GMT  -2:00)', 'Mid-Atlantic, Ascention Is., St Helena' ),
+                 '-1'   => array( '(GMT  -1:00)', 'Azores, Cape Verde Islands' ),
+                  '0'   => array( '(GMT   0:00)', 'Casablanca, Dublin, Edinburgh, London, Lisbon, Monrovia' ),
+                  '1'   => array( '(GMT  +1:00)', 'Berlin, Brussels, Copenhagen, Madrid, Paris, Rome' ),
+                  '2'   => array( '(GMT  +2:00)', 'Kaliningrad, South Africa, Warsaw' ),
+                  '3'   => array( '(GMT  +3:00)', 'Baghdad, Riyadh, Moscow, Nairobi' ),
+                  '2.5' => array( '(GMT  +3:30)', 'Tehran' ),
+                  '4'   => array( '(GMT  +4:00)', 'Abu Dhabi, Baku, Muscat, Tbilisi' ),
+                  '4.5' => array( '(GMT  +4:30)', 'Kabul' ),
+                  '5'   => array( '(GMT  +5:00)', 'Islamabad, Karachi, Tashkent' ),
+                  '5.5' => array( '(GMT  +5:30)', 'Bombay, Calcutta, Madras, New Delhi' ),
+                  '6'   => array( '(GMT  +6:00)', 'Almaty, Colombo, Dhaka' ),
+                  '7'   => array( '(GMT  +7:00)', 'Bangkok, Hanoi, Jakarta' ),
+                  '8'   => array( '(GMT  +8:00)', 'Beijing, Hong Kong, Perth, Singapore, Taipei' ),
+                  '9'   => array( '(GMT  +9:00)', 'Osaka, Sapporo, Seoul, Tokyo, Yakutsk' ),
+                  '9.5' => array( '(GMT  +9:30)', 'Adelaide, Darwin' ),
+                 '10'   => array( '(GMT +10:00)', 'Melbourne, Papua New Guinea, Sydney, Vladivostok' ),
+                 '11'   => array( '(GMT +11:00)', 'Magadan, New Caledonia, Solomon Islands' ),
+                 '12'   => array( '(GMT +12:00)', 'Auckland, Wellington, Fiji, Marshall Island' )
+            );
+            if ( is_null( $format ) ) {
+                return $g;
+            }
+            foreach( $g as $t => $arr ){
+                if ( $format == 'simple' ) $g[ $t ] = $arr[ 0 ];
+                else                       $g[ $t ] = $arr[ 0 ] . ' ' . $arr[ 1 ];
+            }
+            return $g;
+        }
+
+
+        /**
+         *  This function will return a array with countries.
+         *
+         *  @param $format      Format to return.   NULL  returns complete array
+         *                                        'keys'  returns keys only
+         *
+         *  @returns	Array. If format is 
+         * 
+         *  @static
+         */
+        function countries( $format = null ){
+            $c = array(
+                  "AF" => "Afghanistan",
+                  "AL" => "Albania",
+                  "DZ" => "Algeria",
+                  "AS" => "American Samoa",
+                  "AD" => "Andorra",
+                  "AO" => "Angola",
+                  "AI" => "Anguilla",
+                  "AQ" => "Antarctica",
+                  "AG" => "Antigua and Barbuda",
+                  "AR" => "Argentina",
+                  "AM" => "Armenia",
+                  "AW" => "Aruba",
+                  "AU" => "Australia",
+                  "AT" => "Austria",
+                  "AZ" => "Azerbaijan",
+                  "BS" => "Bahamas",
+                  "BH" => "Bahrain",
+                  "BD" => "Bangladesh",
+                  "BB" => "Barbados",
+                  "BY" => "Belarus",
+                  "BE" => "Belgium",
+                  "BZ" => "Belize",
+                  "BJ" => "Benin",
+                  "BM" => "Bermuda",
+                  "BT" => "Bhutan",
+                  "BO" => "Bolivia",
+                  "BA" => "Bosnia and Herzegovina",
+                  "BW" => "Botswana",
+                  "BV" => "Bouvet Island",
+                  "BR" => "Brazil",
+                  "IO" => "British Indian Ocean Territory",
+                  "VG" => "British Virgin Islands",
+                  "BN" => "Brunei Darussalam",
+                  "BG" => "Bulgaria",
+                  "BF" => "Burkina Faso",
+                  "BI" => "Burundi",
+                  "KH" => "Cambodia",
+                  "CM" => "Cameroon",
+                  "CA" => "Canada",
+                  "CV" => "Cape Verde",
+                  "KY" => "Cayman Islands",
+                  "CF" => "Central African Republic",
+                  "TD" => "Chad",
+                  "CL" => "Chile",
+                  "CN" => "China",
+                  "CX" => "Christmas Island",
+                  "CC" => "Cocos Islands",
+                  "CO" => "Colombia",
+                  "KM" => "Comoros",
+                  "CD" => "Congo",
+                  "CG" => "Congo",
+                  "CK" => "Cook Islands",
+                  "CR" => "Costa Rica",
+                  "CI" => "Cote D'Ivoire",
+                  "CU" => "Cuba",
+                  "CY" => "Cyprus",
+                  "CZ" => "Czech Republic",
+                  "DK" => "Denmark",
+                  "DJ" => "Djibouti",
+                  "DM" => "Dominica",
+                  "DO" => "Dominican Republic",
+                  "EC" => "Ecuador",
+                  "EG" => "Egypt",
+                  "SV" => "El Salvador",
+                  "GQ" => "Equatorial Guinea",
+                  "ER" => "Eritrea",
+                  "EE" => "Estonia",
+                  "ET" => "Ethiopia",
+                  "FO" => "Faeroe Islands",
+                  "FK" => "Falkland Islands (Malvinas)",
+                  "FJ" => "Fiji",
+                  "FI" => "Finland",
+                  "FR" => "France",
+                  "GF" => "French Guiana",
+                  "PF" => "French Polynesia",
+                  "TF" => "French Southern Territories",
+                  "GA" => "Gabon",
+                  "GM" => "Gambia",
+                  "GE" => "Georgia",
+                  "DE" => "Germany",
+                  "GH" => "Ghana",
+                  "GI" => "Gibraltar",
+                  "GR" => "Greece",
+                  "GL" => "Greenland",
+                  "GD" => "Grenada",
+                  "GP" => "Guadaloupe",
+                  "GU" => "Guam",
+                  "GT" => "Guatemala",
+                  "GN" => "Guinea",
+                  "GW" => "Guinea-Bissau",
+                  "GY" => "Guyana",
+                  "HT" => "Haiti",
+                  "HM" => "Heard and McDonald Islands",
+                  "VA" => "Holy See (Vatican City State)",
+                  "HN" => "Honduras",
+                  "HK" => "Hong Kong",
+                  "HR" => "Hrvatska (Croatia)",
+                  "HU" => "Hungary",
+                  "IS" => "Iceland",
+                  "IN" => "India",
+                  "ID" => "Indonesia",
+                  "IR" => "Iran",
+                  "IQ" => "Iraq",
+                  "IE" => "Ireland",
+                  "IL" => "Israel",
+                  "IT" => "Italy",
+                  "JM" => "Jamaica",
+                  "JP" => "Japan",
+                  "JO" => "Jordan",
+                  "KZ" => "Kazakhstan",
+                  "KE" => "Kenya",
+                  "KI" => "Kiribati",
+                  "KP" => "Korea",
+                  "KR" => "Korea",
+                  "KW" => "Kuwait",
+                  "KG" => "Kyrgyz Republic",
+                  "LA" => "Lao People's Democratic Republic",
+                  "LV" => "Latvia",
+                  "LB" => "Lebanon",
+                  "LS" => "Lesotho",
+                  "LR" => "Liberia",
+                  "LY" => "Libyan Arab Jamahiriya",
+                  "LI" => "Liechtenstein",
+                  "LT" => "Lithuania",
+                  "LU" => "Luxembourg",
+                  "MO" => "Macao",
+                  "MK" => "Macedonia",
+                  "MG" => "Madagascar",
+                  "MW" => "Malawi",
+                  "MY" => "Malaysia",
+                  "MV" => "Maldives",
+                  "ML" => "Mali",
+                  "MT" => "Malta",
+                  "MH" => "Marshall Islands",
+                  "MQ" => "Martinique",
+                  "MR" => "Mauritania",
+                  "MU" => "Mauritius",
+                  "YT" => "Mayotte",
+                  "MX" => "Mexico",
+                  "FM" => "Micronesia",
+                  "MD" => "Moldova",
+                  "MC" => "Monaco",
+                  "MN" => "Mongolia",
+                  "MS" => "Montserrat",
+                  "MA" => "Morocco",
+                  "MZ" => "Mozambique",
+                  "MM" => "Myanmar",
+                  "NA" => "Namibia",
+                  "NR" => "Nauru",
+                  "NP" => "Nepal",
+                  "AN" => "Netherlands Antilles",
+                  "NL" => "Netherlands",
+                  "NC" => "New Caledonia",
+                  "NZ" => "New Zealand",
+                  "NI" => "Nicaragua",
+                  "NE" => "Niger",
+                  "NG" => "Nigeria",
+                  "NU" => "Niue",
+                  "NF" => "Norfolk Island",
+                  "MP" => "Northern Mariana Islands",
+                  "NO" => "Norway",
+                  "OM" => "Oman",
+                  "PK" => "Pakistan",
+                  "PW" => "Palau",
+                  "PS" => "Palestinian Territory",
+                  "PA" => "Panama",
+                  "PG" => "Papua New Guinea",
+                  "PY" => "Paraguay",
+                  "PE" => "Peru",
+                  "PH" => "Philippines",
+                  "PN" => "Pitcairn Island",
+                  "PL" => "Poland",
+                  "PT" => "Portugal",
+                  "PR" => "Puerto Rico",
+                  "QA" => "Qatar",
+                  "RE" => "Reunion",
+                  "RO" => "Romania",
+                  "RU" => "Russian Federation",
+                  "RW" => "Rwanda",
+                  "SH" => "St. Helena",
+                  "KN" => "St. Kitts and Nevis",
+                  "LC" => "St. Lucia",
+                  "PM" => "St. Pierre and Miquelon",
+                  "VC" => "St. Vincent and the Grenadines",
+                  "WS" => "Samoa",
+                  "SM" => "San Marino",
+                  "ST" => "Sao Tome and Principe",
+                  "SA" => "Saudi Arabia",
+                  "SN" => "Senegal",
+                  "CS" => "Serbia and Montenegro",
+                  "SC" => "Seychelles",
+                  "SL" => "Sierra Leone",
+                  "SG" => "Singapore",
+                  "SK" => "Slovakia",
+                  "SI" => "Slovenia",
+                  "SB" => "Solomon Islands",
+                  "SO" => "Somalia",
+                  "ZA" => "South Africa",
+                  "GS" => "South Georgia and the South Sandwich Islands",
+                  "ES" => "Spain",
+                  "LK" => "Sri Lanka",
+                  "SD" => "Sudan",
+                  "SR" => "Suriname",
+                  "SJ" => "Svalbard & Jan Mayen Islands",
+                  "SZ" => "Swaziland",
+                  "SE" => "Sweden",
+                  "CH" => "Switzerland",
+                  "SY" => "Syrian Arab Republic",
+                  "TW" => "Taiwan",
+                  "TJ" => "Tajikistan",
+                  "TZ" => "Tanzania",
+                  "TH" => "Thailand",
+                  "TL" => "Timor-Leste",
+                  "TG" => "Togo",
+                  "TK" => "Tokelau",
+                  "TO" => "Tonga",
+                  "TT" => "Trinidad and Tobago",
+                  "TN" => "Tunisia",
+                  "TR" => "Turkey",
+                  "TM" => "Turkmenistan",
+                  "TC" => "Turks and Caicos Islands",
+                  "TV" => "Tuvalu",
+                  "VI" => "US Virgin Islands",
+                  "UG" => "Uganda",
+                  "UA" => "Ukraine",
+                  "AE" => "United Arab Emirates",
+                  "GB" => "United Kingdom of Great Britain & N. Ireland",
+                  "UM" => "United States Minor Outlying Islands",
+                  "US" => "United States of America",
+                  "UY" => "Uruguay",
+                  "UZ" => "Uzbekistan",
+                  "VU" => "Vanuatu",
+                  "VE" => "Venezuela",
+                  "VN" => "Viet Nam",
+                  "WF" => "Wallis and Futuna Islands",
+                  "EH" => "Western Sahara",
+                  "YE" => "Yemen",
+                  "ZM" => "Zambia, Republic of",
+                  "ZW" => "Zimbabwe" );
+
+            if ( $format == 'keys' ) {
+                return array_keys( $c );
+            }
+
+            return $c;
+        }
+
+
+
+    }
+
+?>



From ximian at mail.berlios.de  Wed May 16 23:03:17 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Wed, 16 May 2007 23:03:17 +0200
Subject: [ydf-devel] r2428 - in YDFramework2.0/trunk/YDFramework2/YDClasses:
	. YDFormElements
Message-ID: <200705162103.l4GL3H1D029608@sheep.berlios.de>

Author: ximian
Date: 2007-05-16 23:02:47 +0200 (Wed, 16 May 2007)
New Revision: 2428

Added:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Countryselect.php
Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Timezone.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDUtil.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php
Log:
- added new form element "countryselect", a country select box
- added new form rule "country" that checks if a variable is a valid country code
- changed gmts to a use YDList instead of YDUtil and delete list from YDUtil.php

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -144,6 +144,7 @@
             $this->registerElement( 'fieldset', 'YDFormElement_Fieldset', 'YDFormElement_Fieldset.php' );
             $this->registerElement( 'hr', 'YDFormElement_HR', 'YDFormElement_HR.php' );
             $this->registerElement( 'selectnumeric', 'YDFormElement_SelectNumeric', 'YDFormElement_SelectNumeric.php' );
+            $this->registerElement( 'countryselect', 'YDFormElement_Countryselect', 'YDFormElement_Countryselect.php' );
 
             // Add the rules
             $this->registerRule( 'value', array( 'YDValidateRules', 'value' ), 'YDValidateRules.php' );
@@ -185,6 +186,7 @@
             $this->registerRule( 'maxhyperlinks', array( 'YDValidateRules', 'maxhyperlinks' ), 'YDValidateRules.php' );
             $this->registerRule( 'captcha', array( 'YDValidateRules', 'captcha' ), 'YDValidateRules.php' );
             $this->registerRule( 'timezone', array( 'YDValidateRules', 'timezone' ), 'YDValidateRules.php' );
+            $this->registerRule( 'country', array( 'YDValidateRules', 'country' ), 'YDValidateRules.php' );
 
             // Add the filters
             $this->registerFilter( 'trim', 'trim' );

Added: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Countryselect.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Countryselect.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Countryselect.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -0,0 +1,64 @@
+<?php
+
+    /*
+
+        Yellow Duck Framework version 2.1
+        (c) Copyright 2002-2007 Pieter Claerhout
+
+        This library is free software; you can redistribute it and/or
+        modify it under the terms of the GNU Lesser General Public
+        License as published by the Free Software Foundation; either
+        version 2.1 of the License, or (at your option) any later version.
+
+        This library is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+        Lesser General Public License for more details.
+
+        You should have received a copy of the GNU Lesser General Public
+        License along with this library; if not, write to the Free Software
+        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+
+    */
+
+    /**
+     *  @addtogroup YDForm Core - Form
+     */
+
+    // Check if the framework is loaded
+    if ( ! defined( 'YD_FW_NAME' ) ) {
+        die( 'Yellow Duck Framework is not loaded.' );
+    }
+
+    // Includes
+    include_once( YD_DIR_HOME_CLS . '/YDFormElements/YDFormElement_Select.php');
+    include_once( YD_DIR_HOME_CLS . '/YDList.php');
+
+    /**
+     *	This is the class that define a select country.
+     *
+     *  @ingroup YDForm
+     */
+    class YDFormElement_Countryselect extends YDFormElement_Select {
+
+        /**
+         *	This is the class constructor for the YDFormElement_Coutryselect class.
+         *
+         *	@param $form		The name of the form to which this element is connected.
+         *	@param $name		The name of the form element.
+         *	@param $label		(optional) The label for the form element.
+         *	@param $attributes	(optional) The attributes for the form element.
+         *	@param $options		(optional) Format string: 'simple' or 'full'
+         */
+        function YDFormElement_Countryselect( $form, $name, $label='', $attributes=array(), $options=array() ) {
+
+            // initialize parent
+            $this->YDFormElement_Select( $form, $name, $label, $attributes, YDList::countries() );
+
+            // set type
+            $this->_type = 'countryselect';
+        }
+
+    }
+
+?>
\ No newline at end of file

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Timezone.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Timezone.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Timezone.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -31,7 +31,8 @@
     }
 
     // Includes
-    include_once( dirname( __FILE__ ) . '/YDFormElement_Select.php');
+    include_once( YD_DIR_HOME_CLS . '/YDFormElements/YDFormElement_Select.php');
+    include_once( YD_DIR_HOME_CLS . '/YDList.php');
 
     /**
      *	This is the class that define a select timezone.
@@ -52,7 +53,7 @@
         function YDFormElement_Timezone( $form, $name, $label='', $attributes=array(), $options='full' ) {
 
             // initialize parent
-            $this->YDFormElement_Select( $form, $name, $label, $attributes, YDArrayUtil::getGMT( $options ) );
+            $this->YDFormElement_Select( $form, $name, $label, $attributes, YDList::gmts( $options ) );
 
             // set type
             $this->_type = 'timezone';

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDList.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -45,6 +45,7 @@
          *  @param $format      Format to return:     NULL  returns complete array.
          *                                        'simple'  returns: array( -11 => '(GMT -11:00)', -10 => ...
          *                                          'full'  returns: array( -11 => '(GMT -11:00) Nome, Midway Island, Samoa', -10 => ...
+         *                                          'keys'  returns keys only
          *
          *  @returns	Array. If format is 
          *  @static
@@ -84,6 +85,9 @@
             if ( is_null( $format ) ) {
                 return $g;
             }
+            if ( $format == 'keys' ) {
+                return array_keys( $g );
+            }
             foreach( $g as $t => $arr ){
                 if ( $format == 'simple' ) $g[ $t ] = $arr[ 0 ];
                 else                       $g[ $t ] = $arr[ 0 ] . ' ' . $arr[ 1 ];

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDUtil.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDUtil.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDUtil.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -1,1346 +1,1294 @@
-<?php
-
-    /*
-
-        Yellow Duck Framework version 2.1
-        (c) Copyright 2002-2007 Pieter Claerhout
-
-        This library is free software; you can redistribute it and/or
-        modify it under the terms of the GNU Lesser General Public
-        License as published by the Free Software Foundation; either
-        version 2.1 of the License, or (at your option) any later version.
-
-        This library is distributed in the hope that it will be useful,
-        but WITHOUT ANY WARRANTY; without even the implied warranty of
-        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
-        Lesser General Public License for more details.
-
-        You should have received a copy of the GNU Lesser General Public
-        License along with this library; if not, write to the Free Software
-        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-
-    */
-
-    /**
-     *  @addtogroup YDFramework Core
-     */
-
-    // Check if the framework is loaded
-    if ( ! defined( 'YD_FW_NAME' ) ) {
-        die( 'Yellow Duck Framework is not loaded.' );
-    }
-
-    /**
-     *	This is a general timer class that starts counting when it's instantiated, and which returns the elapsed time as
-     *	soon as the finish method is called.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDTimer extends YDBase {
-
-        /**
-         *	This is the class constructor of the YDTimer class.
-         */
-        function YDTimer() {
-
-            // Initialize YDBase
-            $this->YDBase();
-
-            // Get the start time
-            $this->startTime = $this->_getMicroTime();
-
-            // Keep a list of intermediate times
-            $this->markers = array();
-
-        }
-
-        /**
-         *	This function returns the current microtime as a double.
-         *
-         *	@returns	Double containing the current time.
-         *
-         *	@internal
-         */
-        function _getMicroTime() {
-            $time = explode ( ' ', microtime() );
-            return ( doubleval( $time[0] ) + $time[1] );
-        }
-
-        /**
-         *	This will add a named marker.
-         *
-         *	@param $name	The name to use for the marker
-         */
-        function addMarker( $name ) {
-            array_push( $this->markers, array( $name, $this->getElapsed() ) );
-        }
-
-        /**
-         *	Finish the timer.
-         */
-        function finish() {
-            $this->addMarker( '** Finish' );
-        }
-
-        /**
-         *	This function will return the number of seconds elapsed since the timer was instantiated.
-         *
-         *	@returns	The total elapsed time
-         */
-        function getElapsed() {
-            $endTime = $this->_getMicroTime();
-            return intval( ( $endTime - $this->startTime ) * 1000 );
-        }
-
-        /**
-         *	This function returns a report as an array, with each row containing the following info: elapsed time,
-         *	difference with previous marker and marker name.
-         *
-         *	@returns	Array with the elapsed times, differences and marker names.
-         */
-        function getReport() {
-            $report = array();
-            $report[] = array( 0, 0, '** Start' );
-            $previous = 0;
-            foreach ( $this->markers as $marker ) {
-                $report[] = array( $marker[1], $marker[1]-$previous, $marker[0] );
-                $previous = $marker[1];
-            }
-            return $report;
-        }
-
-    }
-
-    /**
-     *  This class houses all the array related utility functions. All the methods are implemented as static methods and
-     *	do not require you to create a class instance in order to use them.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDArrayUtil extends YDBase {
-
-        /**
-         *  This function will convert a single dimension array to a multi dimension array with the indicated number of
-         *	colums. If the number of columns is 1, it will return the original array.
-         *
-         *  If you enable the $fillLastRow option, it will fill the last row with null values to match the number of
-         *	columns.
-         *
-         *  @param $array		    The single dimension array you want to convert.
-         *  @param $columns		    The number of columns the table should have.
-         *  @param $fillLastRow	    (optional) If true, the last row will be filled with null values so that it matches
-         *						    the number of columns.
-         *  @param $horizontal  	(optional) If true, rows will be filled first, then it will create an new row
-         *
-         *  @returns	A multi-dimension array with the contents of the original array converted to a table with the
-         *				indicated number of colums.
-         *
-         *	@static
-         */
-        function convertToTable( $array, $columns, $fillLastRow=false, $horizontal=true ) {
-
-            // If the number of columns is 1, return the original array
-            if ( $columns == 1 ) {
-                return $array;
-            }
-
-            // Return original array if empty
-            if ( sizeof( $array ) == 0 ) {
-                return $array;
-            }
-
-            // Convert horizontally or vertically
-            if ( $horizontal ) {
-
-                // Use the array_chunk function to convert to a table
-                $newArray = @array_chunk( $array, $columns );
-                if ( $newArray == null ) {
-                    trigger_error( 'Failed to split the array in chunks.', YD_ERROR );
-                }
-
-                // Pad the last row
-                if ( $fillLastRow ) {
-                    $lastRow = $newArray[sizeof( $newArray )-1];
-                    $numMissing = $columns - sizeof( $lastRow );
-                    for ( $i = 0; $i < $numMissing; $i++ ) {
-                        array_push( $newArray[sizeof( $newArray )-1], null );
-                    }
-
-                }
-
-            } else {
-
-                // Get only the values of the array
-                $array = array_values( $array );
-
-                // Check how many rows we will have
-                $rows = ceil( sizeof( $array ) / $columns );
-
-                // Keep track of the current row
-                $currentItem = 0;
-                $currentCol  = 0;
-
-                // Start with a new empty array
-                $newArray = array();
-
-                // Loop over the rows
-                while ( $currentCol < $columns ) {
-                    foreach ( range( 0, $rows-1 ) as $row ) {
-                        $newArray[$row][$currentCol] = isset( $array[$currentItem] ) ? $array[$currentItem] : null;
-                        $currentItem++;
-                    }
-                    $currentCol++;
-                }
-
-            }
-
-            // Return the array
-            return $newArray;
-
-        }
-
-        /**
-         *	This function will create a new array which is a nested using the given column name.
-         *
-         *	@param $array	The array to convert.
-         *	@param $key		The column to use as the key name.
-         *	@param $append	(Optional) Boolean that defines if values are append to array (TRUE) or if are assigned (FALSE).
-         *
-         *	@returns	A new array which is a nested using the given column name.
-         *
-         *	@static
-         */
-        function convertToNested( $array, $key, $append = true ) {
-
-            // Start with the a new array
-            $new = array();
-
-            // Loop over the original array
-            foreach ( $array as $item ) {
-                if ( ! array_key_exists( $key, $item ) ) {
-                    trigger_error( 'YDArrayUtil::convertToNested: key "' . $key . '" not found', YD_ERROR );
-                }
-
-                // append values or assign them
-                if ( $append == true ){
-                    if ( ! isset( $new[ $item[ $key ] ] ) ) { $new[ $item[ $key ] ] = array(); }
-                    array_push( $new[ $item[ $key ] ], $item );
-                }else{
-                    $new[ $item[ $key ] ] = $item;
-                }
-            }
-
-            // Return the new array
-            return $new;
-
-        }
-
-        /**
-         *	This function will create a new array which is grouped by a given key and mapped according to a given array.
-         *
-         *	@param $input	The array to convert.
-         *	@param $key		The column to use as the key name.
-         *	@param $map		The array or string which indicates how values of the children arrays should be mapped in
-         *                  the parent array.
-         *
-         *	@returns		The array resulting from the mapping.
-         *
-         *	@static
-         */
-        function map( $input, $key, $map ) {
-
-            // Starting with new array
-            $output = array();
-
-            // Loop over the original array
-            foreach ( $input as $inputFragment ) {
-                if ( isset( $inputFragment[ $key ] ) ) {
-                    if ( is_array($map)) {
-                        foreach ( $map as $mapKey => $mapValue ) {
-                            if ( ! array_key_exists( $key, $inputFragment ) ) {
-                                trigger_error( 'YDArrayUtil::map: key "' . $key . '" not found', YD_ERROR );
-                            }
-                            if ( isset( $inputFragment[ $mapKey ] ) && isset( $inputFragment[ $mapValue ] ) ) {
-                                $output[ $inputFragment[ $key ] ][ $inputFragment[ $mapKey ] ] = $inputFragment[ $mapValue ];
-                            }
-                            else {
-                                $output[ $inputFragment[ $key ] ][ $inputFragment[ $mapKey ] ] = NULL;
-                            }
-                        }
-                    }
-                    else {
-                        $output[ $inputFragment[ $key ] ] = $inputFragment[ $map ];
-                    }
-                }
-            }
-
-            // Return the new array
-            return $output;
-        }
-
-        /**
-         *  This function will implode a 1-level array in a string.
-         *
-         *  @param $input      The array to implode.
-         *  @param $glue       (optional) The key/value glue. Default: =
-         *  @param $separator  (optional) The items separator. Default: ,
-         *
-         *  @returns       The imploded string.
-         *
-         *  @static
-         */
-        function implode( $input, $glue='=', $separator=',' ) {
-            $return = '';
-            foreach ( $input as $k => $v ) {
-                $return .= $separator . $k . $glue . $v;
-            }
-            return substr( $return, 1 );
-        }
-
-        /**
-         *  This function will initialize the indicated array if it doesn't exist yet.
-         *
-         *  @param  $where  Where to instantiate the array in.
-         *  @param  $name   The name of the array to create.
-         *
-         *  @static
-         */
-        function createIfNeeded( & $where, $name ) {
-            if ( ! isset( $where[$name] ) ) {
-                $where[$name] = array();
-            }
-        }
-
-
-        /**
-         *  This function will return a array with gmts.
-         *
-         *  @param $format      Format to return
-         *
-         *  @returns	Array. If format is NULL returns complete array.
-         *                                  'simple' returns: array( -11 => '(GMT -11:00)', -10 => ...
-         *                                  'full'   returns: array( -11 => '(GMT -11:00) Nome, Midway Island, Samoa', -10 => ...
-         *  @static
-         */
-        function getGMT( $format = null ){
-            $gmts = array(
-                '-11'   => array( '(GMT -11:00)', 'Nome, Midway Island, Samoa' ),
-                '-10'   => array( '(GMT -10:00)', 'Hawaii' ),
-                 '-9'   => array( '(GMT  -9:00)', 'Alaska' ),
-                 '-8'   => array( '(GMT  -8:00)', 'Pacific Time' ),
-                 '-7'   => array( '(GMT  -7:00)', 'Mountain Time' ),
-                 '-6'   => array( '(GMT  -6:00)', 'Central Time, Mexico City' ),
-                 '-5'   => array( '(GMT  -5:00)', 'Eastern Time, Bogota, Lima, Quito' ),
-                 '-4'   => array( '(GMT  -4:00)', 'Atlantic Time, Caracas, La Paz' ),
-                 '-3.5' => array( '(GMT  -3:30)', 'Newfoundland' ),
-                 '-3'   => array( '(GMT  -3:00)', 'Brazil, Buenos Aires, Georgetown, Falkland Is.' ),
-                 '-2'   => array( '(GMT  -2:00)', 'Mid-Atlantic, Ascention Is., St Helena' ),
-                 '-1'   => array( '(GMT  -1:00)', 'Azores, Cape Verde Islands' ),
-                  '0'   => array( '(GMT   0:00)', 'Casablanca, Dublin, Edinburgh, London, Lisbon, Monrovia' ),
-                  '1'   => array( '(GMT  +1:00)', 'Berlin, Brussels, Copenhagen, Madrid, Paris, Rome' ),
-                  '2'   => array( '(GMT  +2:00)', 'Kaliningrad, South Africa, Warsaw' ),
-                  '3'   => array( '(GMT  +3:00)', 'Baghdad, Riyadh, Moscow, Nairobi' ),
-                  '2.5' => array( '(GMT  +3:30)', 'Tehran' ),
-                  '4'   => array( '(GMT  +4:00)', 'Abu Dhabi, Baku, Muscat, Tbilisi' ),
-                  '4.5' => array( '(GMT  +4:30)', 'Kabul' ),
-                  '5'   => array( '(GMT  +5:00)', 'Islamabad, Karachi, Tashkent' ),
-                  '5.5' => array( '(GMT  +5:30)', 'Bombay, Calcutta, Madras, New Delhi' ),
-                  '6'   => array( '(GMT  +6:00)', 'Almaty, Colombo, Dhaka' ),
-                  '7'   => array( '(GMT  +7:00)', 'Bangkok, Hanoi, Jakarta' ),
-                  '8'   => array( '(GMT  +8:00)', 'Beijing, Hong Kong, Perth, Singapore, Taipei' ),
-                  '9'   => array( '(GMT  +9:00)', 'Osaka, Sapporo, Seoul, Tokyo, Yakutsk' ),
-                  '9.5' => array( '(GMT  +9:30)', 'Adelaide, Darwin' ),
-                 '10'   => array( '(GMT +10:00)', 'Melbourne, Papua New Guinea, Sydney, Vladivostok' ),
-                 '11'   => array( '(GMT +11:00)', 'Magadan, New Caledonia, Solomon Islands' ),
-                 '12'   => array( '(GMT +12:00)', 'Auckland, Wellington, Fiji, Marshall Island' )
-            );
-            if ( is_null( $format ) ) {
-                return $gmts;
-            }
-            foreach( $gmts as $t => $arr ){
-                if ( $format == 'simple' ) $gmts[ $t ] = $arr[ 0 ];
-                else                       $gmts[ $t ] = $arr[ 0 ] . ' ' . $arr[ 1 ];
-            }
-            return $gmts;
-        }
-
-        /**
-         *  This function will convert a database result array to XML
-         *
-         *  @param $array      The input array.
-         *
-         *  @returns       The array as an XML string.
-         *
-         *  @static
-         */
-        function toXml( $array ) {
-            $out = '';
-            foreach ( $array as $record ) {
-                $out .= sprintf( '<row>' );
-                foreach ( $record as $key=>$val ) {
-                    if ( is_numeric( $val ) ) {
-                        $out .= sprintf( '<%s>%s</%s>', $key, $val, $key );
-                    } else {
-                        $out .= sprintf( '<%s><![CDATA[%s]]></%s>', $key, $val, $key );
-                    }
-                }
-                $out .= sprintf( '</row>' );
-            }
-            $out = sprintf( '<root>%s</root>', $out );
-            return '<?xml version="1.0" encoding="utf-8"?>' . $out;
-        }
-
-    }
-
-    /**
-     *	This class houses all the debug related utility functions. All the methods are implemented as static methods and
-     *	do not require you to create a class instance in order to use them.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDDebugUtil extends YDBase {
-
-        /**
-         *  Trigger an error
-         *
-         *  @param  $msg    The error to raise.
-         *  @param  $sql    (optional) The SQL statement to log with the error.
-         *  @param  $level  (optional) The type of error to be raised. Default is YD_ERROR.
-         */
-        function error( $msg, $sql=null, $level=YD_ERROR ) {
-            echo( '<p><b><font color="red">An error occured</font></b></p>' );
-            echo( '<b>Stacktrace:</b> <pre>' . YDDebugUtil::getStackTrace() . '</pre>' );
-            if ( ! empty( $sql ) ) {
-                echo( '<b>SQL Statement:</b> <pre>' . $this->formatSql( $sql ) . '</pre>' );
-            }
-            trigger_error( $msg, $level );
-        }
-
-        /**
-         *	Function to output a debug message. These message are only shown if the constant YD_DEBUG is set to 1. You
-         *	can turn on debugging by specifying the YD_DEBUG parameter in the url and assigning it the value 1.
-         *
-         *	Example url with debugging turned on: http://localhost/index.php?YD_DEBUG=1
-         *
-         *	This function accepts a variable amount of arguments which are all concatenated using a space in between.
-         *	All debug messages will be shown as HTML comments with the prefix "[ YD_DEBUG ]".
-         *
-         *	@static
-         */
-        function debug() {
-            $args = func_get_args();
-            if ( YDConfig::get( 'YD_DEBUG' ) == 1 ) {
-                echo( YD_CRLF . '<!-- [ YD_DEBUG ] ' . implode( ' ', $args ) . '-->' . YD_CRLF );
-            }
-            if ( YDConfig::get( 'YD_DEBUG' ) == 2 ) {
-                echo( '<table border="0" cellspacing="0" cellpadding="4"><tr>' );
-                echo( '<td bgcolor="#FFCC00">' );
-                echo( '<b>' . YD_FW_NAME . ' Debug Information</b> ' );
-                echo( '<pre>' . htmlspecialchars( trim( implode( ' ', $args ) ) ) . '</pre>' );
-                echo( '</td></tr></table>' );
-            }
-        }
-
-        /**
-         *	Function to dump the contents of pretty much anything. This is the same as the var_dump function in PHP, but
-         *	has a nicer and more readable output.
-         *
-         *	@param $obj		Object you want to dump.
-         *	@param $label	The label for the dump.
-         *
-         *	@static
-         */
-        function dump( $obj, $label='' ) {
-            echo( YDDebugUtil::r_dump( $obj, true, $label ) );
-        }
-
-        /**
-         *	Function to return the contents of pretty much anything. This is the same as the var_export function in PHP.
-         *
-         *	@param $obj		Object you want to dump.
-         *	@param $html	(optional) If you want to have everything returned as HTML or text. The default is false,
-         *					returning text.
-         *	@param $label	The label for the dump.
-         *
-         *	@returns	Text representation of the object.
-         *
-         *	@static
-         */
-        function r_dump( $obj, $html=false, $label='' ) {
-            $data = var_export( $obj, true );
-            if ( $html == true ) {
-                $data = stripslashes( htmlentities( $data ) );
-                $style = ' style="text-align: left; font-size: 10pt;"';
-                if ( ! empty( $label ) ) {
-                    $data = '<pre' . $style . '><b style="color: navy">' . $label . '</b><br>' . $data . '</pre>';
-                } else {
-                    $data = '<pre' . $style . '>' . $data . '</pre>';
-                }
-            } else {
-                $data = $label . YD_CRLF . $data;
-            }
-            return $data;
-        }
-
-        /**
-         *	This function will print a stack trace.
-         *
-         *	@static
-         */
-        function stackTrace() {
-            if ( YDConfig::get( 'YD_DEBUG' ) == 1 || YDConfig::get( 'YD_DEBUG' ) == 2 ) {
-                $err = 'URI: ' . YD_SELF_URI . YD_CRLF . YDDebugUtil::getStackTrace();
-                if ( ini_get( 'display_errors' ) == 1 ) {
-                    echo( '<pre>' . YD_CRLF . htmlentities( $err ) . '</pre>' );
-                }
-                error_log( $err, 0 );
-            }
-        }
-
-        /**
-         *	Function to get a formatted stack trace.
-         *
-         *	@static
-         */
-        function getStackTrace() {
-            $err = '';
-            $err .= 'Debug backtrace:' . YD_CRLF;
-            foreach( debug_backtrace() as $t ) {
-                $err .= '    @ ';
-                if ( isset( $t['file'] ) ) {
-                    $err .= basename( $t['file'] ) . ':' . $t['line'];
-                } else {
-                    $err .= basename( YD_SELF_FILE );
-                }
-                $err .= ' -- ';
-                if ( isset( $t['class'] ) ) {
-                    $err .= $t['class'] . $t['type'];
-                }
-                $err .= $t['function'];
-                if ( isset( $t['args'] ) && sizeof( $t['args'] ) > 0 ) {
-                    $err .= '(...)';
-                } else {
-                    $err .= '()';
-                }
-                $err .= YD_CRLF;
-            }
-            return $err;
-        }
-
-    }
-
-    /**
-     *	This class houses all the object and class related utility functions. All the methods are implemented as static
-     *	methods and do not require you to create a class instance in order to use them.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDObjectUtil extends YDBase {
-
-        /**
-         *	This function checks if an object instance is of a specific class or is based on a derived class of the
-         *	given class. The class name is case insensitive.
-         *
-         *	@param $obj		The object instance to check.
-         *	@param $class	The object type you want to check against.
-         *
-         *	@returns	Boolean indicating if the object is of the specified class.
-         *
-         *	@static
-         */
-        function isSubClass( $obj, $class ) {
-            $class = strtolower( $class );
-            if ( function_exists( 'is_a' ) ) {
-                return is_a( $obj, $class );
-            } else {
-                if ( is_object( $obj ) ) {
-                    if ( strtolower( get_class( $obj ) ) == strtolower( $class ) ) return true;
-                    if ( is_subclass_of( $obj, $class ) ) return true;
-                }
-            }
-            return false;
-        }
-
-        /**
-         *	Function to get all the ancestors of a class. The list will contain the parent class first, and then it's
-         *	parent class, etc. You can pass both the name of the class or an object instance to this function
-         *
-         *	@param $classname	Name of the class or object.
-         *
-         *	@returns	Array with all the ancestors.
-         *
-         *	@static
-         */
-        function getAncestors( $classname ) {
-            if ( is_object( $classname ) ) {
-                $classname = strtolower( get_class( $classname ) );
-            }
-            $ancestors = array();
-            $father = get_parent_class( $classname );
-            if ( $father != '' ) {
-                $ancestors = YDObjectUtil::getAncestors( $father );
-                $ancestors[] = $father;
-            }
-            return array_reverse( $ancestors );
-        }
-
-        /**
-         *	This function will serialize an object.
-         *
-         *	@param $obj	Object to serialize.
-         *
-         *	@static
-         */
-        function serialize( $obj ) {
-            $obj = serialize( $obj );
-            if ( ! $obj ) {
-                trigger_error( 'Failed serializing the object', YD_ERROR );
-            }
-            return $obj;
-        }
-
-        /**
-         *	This function will unserialize an object.
-         *
-         *	@param $obj	Object to unserialize.
-         *
-         *	@static
-         */
-        function unserialize( $obj ) {
-            $obj = unserialize( $obj );
-            if ( ! $obj ) {
-                trigger_error( 'Failed unserializing the object', YD_ERROR );
-            }
-            return $obj;
-        }
-
-    }
-
-    /**
-     *	This class houses all the string related utility functions. All the methods are implemented as static methods
-     *	and do not require you to create a class instance in order to use them.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDStringUtil extends YDBase {
-
-        /**
-         *	Function to format a file size to a meaningful value.
-         *
-         *	@param $bytes		The file size to format.
-         *	@param $decimals	(optional) The number of decimals that should be returned.
-         *
-         *	@returns String containing the formatted file size.
-         *
-         *	@static
-         */
-        function formatFilesize( $bytes, $decimals=1 ) {
-
-            // Convert the bytes to a string
-            $bytes = strval( $bytes );
-
-            // The different units
-            $units = array(
-                '1152921504606846976'	=> 'EB',
-                '1125899906842624'		=> 'PB',
-                '1099511627776'			=> 'TB',
-                '1073741824'			=> 'GB',
-                '1048576'				=> 'MB',
-                '1024'					=> 'KB'
-            );
-
-            // If smaller than 1024, return it as bytes
-            if ( $bytes <= 1024 ) {
-                return $bytes . ' bytes';
-            }
-
-            // Check the right format
-            foreach ( $units as $base=>$title ) {
-                if ( floor( $bytes / $base ) != 0 ) {
-                    return number_format( $bytes / $base, $decimals, '.', "'" ) . ' ' . $title;
-                }
-            }
-
-        }
-
-        /**
-         *  This function will format a timestamp using the strftime function.
-         *
-         *  @param  $timestamp  The timestamp to format. It can also be a date/time form object.
-         *  @param  $format     The strftime format to use. You can also use the predefined options date, time and
-         *                      datetime.
-         *  @param  $locale     (optional) The locale to use to format the date.
-         *
-         *  @returns    A formatted timestamp
-         *
-         *  @static
-         */
-        function formatDate( $timestamp, $format, $locale=null ) {
-
-            // Check if the timestamp is an object and has the getTimeStamp function
-            if ( is_object( $timestamp ) && method_exists( $timestamp, 'getTimeStamp' ) ) {
-                $timestamp = $timestamp->getTimeStamp();
-            }
-
-            // Convert to an integer
-            if ( is_numeric( $timestamp ) ) {
-                $timestamp = intval( $timestamp );
-            }
-
-            // If text, convert to number
-            if ( is_string( $timestamp ) ) {
-                $timestamp = strtotime( $timestamp );
-            }
-
-            // If array, is a date YDForm element value
-            if ( is_array( $timestamp ) ) {
-
-                // check if timestamp exists. otherwise create it
-                $hours   = isset( $timestamp[ 'hours' ] ) ?   $timestamp[ 'hours' ] : 0;
-                $minutes = isset( $timestamp[ 'minutes' ] ) ? $timestamp[ 'minutes' ] : 0;
-                $seconds = isset( $timestamp[ 'seconds' ] ) ? $timestamp[ 'seconds' ] : 0;
-                $month   = isset( $timestamp[ 'month' ] ) ?   $timestamp[ 'month' ] : 1;
-                $day     = isset( $timestamp[ 'day' ] ) ?     $timestamp[ 'day' ] : 1;
-                $year    = isset( $timestamp[ 'year' ] ) ?    $timestamp[ 'year' ] : 1970;
-                $timestamp = mktime( $hours, $minutes, $seconds, $month, $day, $year );
-            }
-
-            // Check the standard formats
-            if ( strtolower( $format ) == 'date' ) {
-                $format = '%d %B %Y';
-            }
-            if ( strtolower( $format ) == 'datetime' ) {
-                $format = '%d %B %Y %H:%M';
-            }
-            if ( strtolower( $format ) == 'datetimesql' ) {
-                $format = '%Y-%m-%d %H:%M:%S';
-            }
-            if ( strtolower( $format ) == 'time' ) {
-                $format = '%H:%M';
-            }
-            if ( strtolower( $format ) == 'file' ) {
-                $format = '%d-%m-%Y %H:%M';
-            }
-
-            // Set the new locale
-            if ( ! is_null( $locale ) ) {
-                $currentLocale = YDLocale::get();
-                YDLocale::set( $locale );
-            }
-
-            // Return the formatted date
-            $timestamp = strftime( $format, $timestamp );
-
-            // Reset the old locale
-            if ( ! is_null( $locale ) ) {
-                YDLocale::set( $currentLocale );
-            }
-
-            // Return the timestamp
-            return $timestamp;
-
-        }
-
-        /**
-         *	This function will encode all characters which have an ordinal bigger than 128 to numeric HTML entities,
-         *	which can be safely included in e.g. XML output.
-         *
-         *	@param $string	The original string to encode.
-         *	@param $htmlent	Boolean indicating if the result should be HTML encoded or not.
-         *
-         *	@returns	String with all the characters with an ordinal bigger than 128 converted to numeric entities.
-         *
-         *	@static
-         */
-        function encodeString( $string, $htmlent=false ) {
-            $trans = array_flip( get_html_translation_table( HTML_ENTITIES ) );
-            $string = strtr( $string, $trans );
-            $trans = get_html_translation_table( HTML_ENTITIES, ENT_NOQUOTES );
-            foreach ( $trans as $key => $value ) {
-                if ( ord( $key ) == 60 || ord( $key ) == 62 || ord( $key ) == 38 ) {
-                    unset( $trans[$key] );
-                } else {
-                    $trans[$key] = '&#' . ord( $key ) . ';';
-                }
-            }
-            $string = strtr( $string, $trans );
-            if ( $htmlent == true ) {
-                $string = htmlentities( $string );
-            }
-            return $string;
-        }
-
-        /**
-         *   This function will encode all characters in a string to it's ASCII value.
-         *
-         *   @param $string   The original string to encode.
-         *
-         *   @returns   The encoded string.
-         *
-         *   @static
-         */
-        function encodeToAscii( $string ) {
-            $result = '';
-            for ( $i=0; $i < strlen( $string ); $i++ ) {
-                $result .= "&#" . ord( substr( $string, $i, 1) ) . ';';
-            }
-            return $result;
-        }
-
-        /**
-         *	This function will truncate a string.
-         *
-         *	@param $string		String to truncate.
-         *	@param $length		(optional) The length to truncate to. Default length is 80 characters.
-         *	@param $etc			(optional) The string to append if the item gets trunctated. Default is '...'.
-         *	@param $break_words	(optional) Break in the middle of words or not. Default is false.
-         *
-         *	@static
-         */
-        function truncate( $string, $length=80, $etc='...', $break_words=false ) {
-            if ( $length == 0 ) { return ''; }
-            if ( strlen( $string ) > $length ) {
-                $string = html_entity_decode( strip_tags( $string ) );
-                $length -= strlen( $etc );
-                if ( ! $break_words ) {
-                    $string = preg_replace( '/\s+?(\S+)?$/', '', substr( $string, 0, $length+1 ) );
-                }
-                return htmlentities( substr( $string, 0, $length ) . $etc );
-            } else {
-                return $string;
-            }
-        }
-
-        /**
-         *	This function normalizes all the newlines to the correct newline character for the current platform.
-         *
-         *	@param $string		String to normalize the newlines from.
-         *
-         *	@returns	The original string with normalized newlines.
-         *
-         *	@static
-         */
-        function normalizeNewlines( $string ) {
-
-            // First, change all to \n
-            $string = str_replace( "\r\n", "\n",    $string );
-            $string = str_replace( "\r",   "\n",    $string );
-
-            // Now, change everything to the correct one
-            $string = str_replace( "\n",   YD_CRLF, $string );
-
-            // Return the changed string
-            return $string;
-
-        }
-
-        /**
-         *	This function will remove all newlines and all spaces at the beginning and end of each line.
-         *
-         *	@param $string		String to remove the whitespace from.
-         *
-         *	@returns	The original string without the newlines and spaces at the beginning and end of each line.
-         *
-         *	@static
-         */
-        function removeWhiteSpace( $string ) {
-
-            // First, normalize the newlines
-            $string = YDStringUtil::normalizeNewLines( $string );
-
-            // Now, remove the whitespace
-            $string = implode( ' ', array_map( 'trim', explode( YD_CRLF, $string ) ) );
-
-            // Return the changed string
-            return $string;
-
-        }
-
-        /**
-         *   This function will compare two network ip addresses
-         *
-         *   @param $ip1      First ip
-         *
-         *   @param $ip2      Second ip
-         *
-         *   @returns    Returns < 0 if ip1 is less than ip2; > 0 if str1 is greater than ip2, and 0 if they are equal.
-         *
-         *   @static
-         */
-        function ipcmp( $ip1, $ip2 ){
-
-            // get 4 elements from the network address
-            $ip1 = explode(".", $ip1);
-            $ip2 = explode(".", $ip2);
-
-            // get an integer that represents the numeric value of the address
-            $ip1 = $ip1[0]*256^3 + $ip1[1]*256^2 + $ip1[2]*256 + $ip1[3];
-            $ip2 = $ip2[0]*256^3 + $ip2[1]*256^2 + $ip2[2]*256 + $ip2[3];
-
-            // return diference
-            return $ip1 - $ip2;
-
-        }
-
-        /**
-         *  This function will replace all special characters to normal ASCII characters. This is very useful when you
-         *  want to rename uploaded files and strip out the special characters.
-         *
-         *  @param  $data   The data to strip the special characters from.
-         *
-         *  @returns    The data with the special characters replaced.
-         *
-         *  @static
-         */
-        function stripSpecialCharacters( $data ) {
-
-            // Trim the data
-            $data = trim( $data );
-
-            // Decode the HTML entities
-            $trans = array_flip( get_html_translation_table( HTML_ENTITIES, ENT_NOQUOTES ) );
-            $data = strtr( $data, $trans );
-
-            // The characters to replace
-            $chars = array(
-                '?' => 'A', '?' => 'A', '?' => 'A', '?' => 'AE', '?' => 'E', '?' => 'E', '?' => 'I', '?' => 'I',
-                '?' => 'D', '?' => 'O', '?' => 'O', '?' => 'O', '?' => 'O', '?' => 'U', '?' => 'U', '?' => 'a',
-                '?' => 'a', '?' => 'a', '?' => 'ae', '?' => 'e', '?' => 'e', '?' => 'i', '?' => 'i', '?' => 'o',
-                '?' => 'o', '?' => 'o', '?' => 'o', '?' => 'o', '?' => 'u', '?' => 'u', '?' => 'A', '?' => 'A',
-                '?' => 'A', '?' => 'C', '?' => 'E', '?' => 'E', '?' => 'I', '?' => 'I', '?' => 'N', '?' => 'O',
-                '?' => 'O', '?' => 'U', '?' => 'U',  '?' => 'Y', '?' => 'B', '?' => 'a', '?' => 'a', '?' => 'a',
-                '?' => 'c', '?' => 'e', '?' => 'e', '?' => 'i', '?' => 'i', '?' => 'n', '?' => 'o', '?' => 'o',
-                '?' => 'u', '?' => 'u', '?' => 'y', '?' => 'y', '@' => '_', ' ' => '_', '[' => '_', ']' => '_',
-                '(' => '_', ')' => '_', '&' => '_', '+' => '_', '=' => '_'
-            );
-
-            // Strip the special characters
-            $data = str_replace( array_keys( $chars ), $chars, $data );
-
-            // Return the data
-            return $data;
-
-        }
-
-        /**
-         *  This function will check if the specified string starts with the indicated text or not. You can specify if
-         *  this needs to happen case-sensitively or not.
-         *
-         *  @param  $string         The string to check.
-         *  @param  $substring      The string with which it needs to start.
-         *  @param  $case_sensitive (optional) Whether the comparison needs to be case-sensitive or not. Default is true.
-         *
-         *  @returns    Boolean indicating if the string starts with the specified text or not.
-         */
-        function startsWith( $string, $substring, $case_sensitive=true ) {
-            if ( ! $case_sensitive ) {
-                $string = strtolower( $string );
-                $substring = strtolower( $substring );
-            }
-            return ( substr( $string, 0, strlen( $substring ) ) == $substring );
-        }
-
-        /**
-         *  This function will check if the specified string ends with the indicated text or not. You can specify if
-         *  this needs to happen case-sensitively or not.
-         *
-         *  @param  $string         The string to check.
-         *  @param  $substring      The string with which it needs to ends.
-         *  @param  $case_sensitive (optional) Whether the comparison needs to be case-sensitive or not. Default is true.
-         *
-         *  @returns    Boolean indicating if the string ends with the specified text or not.
-         */
-        function endsWith( $string, $substring, $case_sensitive=true ) {
-            if ( ! $case_sensitive ) {
-                $string = strtolower( $string );
-                $substring = strtolower( $substring );
-            }
-            return ( substr( $string, -strlen( $substring ) ) == $substring );
-        }
-
-        /**
-         *  This function is an fnmatch replacement.
-         *
-         *  $param $string      The string to test
-         *  $param $pattern     The pattern to match
-         *
-         *  @returns    Boolean indicating if the string matches the pattern or not.
-         */
-        function match( $string, $pattern ) {
-            for ( $op = 0, $npattern = '', $n = 0, $l = strlen( $pattern ); $n < $l; $n++ ) {
-            switch ($c = $pattern[$n]) {
-                case '\\':
-                    $npattern .= '\\' . @$pattern[++$n];
-                    break;
-                case '.':
-                case '+':
-                case '^':
-                case '$':
-                case '(':
-                case ')':
-                case '{':
-                case '}':
-                case '=':
-                case '!':
-                case '<':
-                case '>':
-                case '|':
-                    $npattern .= '\\' . $c;
-                    break;
-                case '?': case '*':
-                    $npattern .= '.' . $c;
-                    break;
-                case '[':
-                case ']':
-                default:
-                    $npattern .= $c;
-                    if ($c == '[') {
-                        $op++;
-                    } else if ($c == ']') {
-                        if ($op == 0) return false;
-                            $op--;
-                        }
-                        break;
-                    }
-            }
-            if ( $op != 0 ) {
-                return false;
-            } else {
-                return preg_match( '/' . $npattern . '/i', $string );
-            }
-        }
-
-        /**
-         *  Show the time that has elapsed since a given time.
-         *
-         *  @param  $time   The time in seconds
-         *
-         *  @returns    The elapsed time
-         */
-        function timesince( $time ) {
-
-            // Convert to integer
-            if ( is_string( $time ) && is_numeric( $time ) ) {
-                $time = intval( $time );
-            }
-
-            // Array of time period chunks
-            $chunks = array(
-                array( 60 * 60 * 24 * 365 , t('years') ),
-                array( 60 * 60 * 24 * 30 , t('months') ),
-                array( 60 * 60 * 24 * 7, t('weeks') ),
-                array( 60 * 60 * 24 , t('days') ),
-                array( 60 * 60 , t('hours') ),
-                array( 60 , t('minutes') ),
-            );
-
-            // Difference in seconds
-            $since = time() - $time;
-
-            // The first chunk
-            for ( $i = 0, $j = sizeof( $chunks ); $i < $j; $i++ ) {
-                $seconds = $chunks[$i][0];
-                $name = $chunks[$i][1];
-                if ( ( $count = floor( $since / $seconds ) ) != 0 ) {
-                    break;
-                }
-            }
-
-            // Set output var
-            $output = ( $count == 1 ) ? '1 '.$name : $count . ' ' . $name;
-
-            // step two: the second chunk
-            if ( $i + 1 < $j ) {
-                $seconds2 = $chunks[$i + 1][0];
-                $name2 = $chunks[$i + 1][1];
-                if ( ( $count2 = floor( ( $since - ( $seconds * $count ) ) / $seconds2 ) ) != 0 ) {
-                    $output .= ($count2 == 1) ? ', 1 '.$name2 : ", $count2 {$name2}s";
-                }
-            }
-
-            // Return the output
-            return $output . ' ' . t('ago');
-
-        }
-
-    }
-
-    /**
-     *	This class uses the HTTP_USER_AGENT varaible to get information about the browser the visitor used to perform
-     *	the request. We determine the browser name, the version and the platform it's running on.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDBrowserInfo extends YDBase {
-
-        /**
-         *	The class constructor analyzes for the YDBrowserInfo class. The constructor takes no arguments and uses the
-         *	$_SERVER['HTTP_USER_AGENT'] variable to parse the browser info.
-         */
-        function YDBrowserInfo() {
-
-            // Initialize YDBase
-            $this->YDBase();
-
-            // The matching list for browsers
-            $browsers = array(
-                'bot'       => array( 'bot', 'Yahoo! Slurp', 'crawler', 'scooter', 'mercator', 'altavista', 'Gulliver', 'spider', 'Ask Jeeves' ),
-                'opera'     => array( 'opera' ),
-                'ie'        => array( 'msie' ),
-                'safari'    => array( 'safari' ),
-                'konqueror' => array( 'Konqueror' ),
-                'feed'      => array( 'feed', 'rss', 'synd', 'bloglines', 'newsgator' ),
-                'mozilla'   => array( 'mozilla', 'firefox' ),
-            );
-
-            // The matching list for platforms
-            $platforms = array(
-                'win'       => array( 'win' ),
-                'mac'       => array( 'mac', 'apple' ),
-                'linux'     => array( 'linux', 'bsd' ),
-                'unix'      => array( 'unix', 'sun', 'risc', 'aix' ),
-                'bot'       => array( 'bot', 'Yahoo! Slurp', 'crawler' ),
-                'feed'      => array( 'feed', 'rss', 'synd', 'bloglines', 'newsgator' ),
-            );
-
-            // Mark everything as unknown
-            $this->agent = 'unknown';
-            $this->browser = 'unknown';
-            $this->platform = 'unknown';
-            $this->dotnet = 'unknown';
-
-            // Check if the user agent was specified
-            if ( isset( $_SERVER['HTTP_USER_AGENT'] ) ) {
-
-                // Get the user agent
-                $this->agent = $_SERVER['HTTP_USER_AGENT'];
-
-                // Get the browser name
-                foreach ( $browsers as $browser => $browserpatterns ) {
-                    foreach ( $browserpatterns as $browserpattern ) {
-                        if ( stristr( $this->agent, $browserpattern ) ) {
-                            $this->browser = $browser;
-                            continue;
-                        }
-                    }
-                    if ( $this->browser != 'unknown' ) {
-                        break;
-                    }
-                }
-
-                // Get the browser name
-                foreach ( $platforms as $platform => $platformpatterns ) {
-                    foreach ( $platformpatterns as $platformpattern ) {
-                        if ( stristr( $this->agent, $platformpattern ) ) {
-                            $this->platform = $platform;
-                            continue;
-                        }
-                    }
-                    if ( $this->platform != 'unknown' ) {
-                        break;
-                    }
-                }
-
-                // Get the .NET runtime version
-                preg_match_all( '/.NET CLR ([0-9][.][0-9])/i', $this->agent, $ver );
-                $this->dotnet = $ver[1];
-
-            }
-
-        }
-
-        /**
-         *  Get the hostname of the client computer.
-         *
-         *  @returns The hostname of the client computer in lowercase.
-         *
-         *  @static
-         */
-        function getComputerName() {
-            return strtolower( gethostbyaddr( $_SERVER['REMOTE_ADDR'] ) );
-        }
-
-        /**
-         *	This function returns an array with the languages that are supported by the browser. This is done by using
-         *	the HTTP_ACCEPT_LANGUAGE server variable that gets send with the HTTP headers.
-         *
-         *	@return Array containing the list of supported languages
-         */
-        function getBrowserLanguages() {
-
-            // We parse the language headers sent by the browser
-            if ( ! isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
-                return array();
-            }
-            $browserLanguages = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );
-
-            // Normalize the browser language headers
-            for ( $i = 0; $i < sizeof( $browserLanguages ); $i++ ) {
-                $browserLanguage = explode( ';', $browserLanguages[$i] );
-                $browserLanguages[$i] = substr( $browserLanguage[0], 0, 2 );
-            }
-
-            // Remove the duplicates
-            $browserLanguages = array_unique( $browserLanguages );
-
-            // Return the browser languages
-            return array_map( 'strtolower', array_values( $browserLanguages ) );
-
-        }
-
-        /**
-         *  This function returns an array with the languages that are supported by the browser and also interprets the
-         *  country information that the browser sends over.. This is done by using the HTTP_ACCEPT_LANGUAGE server
-         *  variable that gets send with the HTTP headers.
-         *
-         *  @return Array containing the list of supported languages
-         */
-        function getBrowserLanguagesAndCountries() {
-
-            // We parse the language headers sent by the browser
-            if ( !isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
-                return array();
-            }
-            $browserCountries = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );
-            $languagesAndCountries = array();
-
-            // Loop over the languages and normalize them
-            foreach( $browserCountries as $value ) {
-                $lang = explode( ';', $value );
-                $lang = explode( '-', $lang[0] );
-                $lang[1] = ( isset( $lang[1] ) && $lang[1] != '' ? $lang[1] : $lang[0] );
-                $languagesAndCountries[][ $lang[1] ] = $lang[0];
-            }
-
-            // Return the normalized list
-            return $languagesAndCountries;
-
-        }
-
-        /**
-         *	This function will get the most appropriate language for the browser, considering the list of supported
-         *	languages by both the browser and the web application.
-         *
-         *	@param $supported	(optional) An array with the list of supported languages. By default, only english is
-         *						supported.
-         */
-        function getLanguage( $supported=array( 'en' ) ) {
-
-            // Start with the default language
-            $language = $supported[0];
-
-            // Get the list of languages supported by the browser
-            $browserLanguages = $this->getBrowserLanguages();
-
-            // Now, we look if the browser specified one
-            if ( isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
-                foreach ( $browserLanguages as $browserLanguage ) {
-                    if ( in_array( $browserLanguage, $supported ) ) {
-                        $language = $browserLanguage;
-                        break;
-                    }
-                }
-            }
-
-            // Return the language
-            return $language;
-
-        }
-
-    }
-
-    /**
-     *  This class allows you to generate GUIDs (global unique identifier).
-     *
-     *  More info: http://www.ietf.org/rfc/rfc4122.txt
-     *
-     *  @ingroup YDFramework
-     */
-    class YDGuidUtil extends YDBase {
-
-        /**
-         *  Generate a new GUID.
-         *
-         *  @returns    A new GUID as a string.
-         */
-        function create() {
-            return md5( uniqid( rand(), true ) . $_SERVER['SERVER_NAME'] . $_SERVER['SERVER_ADDR'] );
-        }
-
-        /**
-         *  Generate a new formatted GUID.
-         *
-         *  @returns    A formatted GUID as a string.
-         */
-        function createFormatted() {
-            return YDGuidUtil::format( YDGuidUtil::create() );
-        }
-
-        /**
-         *  Formats a GUID.
-         *
-         *  @param $g    GUID to format.
-         *
-         *  @returns    A formatted GUID as a string.
-         */
-         function format( $g ) {
-            $g = str_replace( '-', '', $g );
-            return sprintf(
-                '%s-%s-%s-%s-%s',
-                substr( $g, 0, 8 ), substr( $g, 8, 4 ), substr( $g, 12, 4 ), substr( $g, 16, 4 ), substr( $g, 20 )
-            );
-         }
-
-    }
-
-    /**
-     *  This class allows you to perform LDAP releated tasks.
-     *
-     *  @ingroup YDFramework
-     */
-    class YDLdapUtil extends YDBase {
-
-        /**
-         *  Authenticate against a domain.
-         *
-         *  @param  $server     The name of the domain controller.
-         *  @param  $domain     The name of the domain.
-         *  @param  $user       The username.
-         *  @param  $password   The password.
-         *
-         *  @returns    A boolean indicating if the user was authenticated or not.
-         */
-        function authenticate( $server, $domain, $user, $password ) {
-
-            // Connect to the LDAP server
-            $conn = ldap_connect( $server );
-
-            // Setup the options
-            ldap_set_option( $conn, LDAP_OPT_PROTOCOL_VERSION, 3 );
-            ldap_set_option( $conn, LDAP_OPT_REFERRALS, 0 );
-
-            // Require a username
-            if ( empty( $user ) || empty( $pass ) ) {
-                return false;
-            }
-
-            // Fix the username
-            $user = strtolower( trim( $user ) );
-            if ( strpos( $user, '\\' ) ) {
-                $user = substr( $user, strpos( $user, '\\' ) + 1 );
-            }
-
-            // Authenticate
-            $result = @ldap_bind( $conn, $user . '@' . $server, $password );
-
-            // Close the connection
-            ldap_close( $conn );
-
-            // Return the result
-            return ( $result ) ? true : false;
-
-        }
-
-    }
-
-?>
+<?php
+
+    /*
+
+        Yellow Duck Framework version 2.1
+        (c) Copyright 2002-2007 Pieter Claerhout
+
+        This library is free software; you can redistribute it and/or
+        modify it under the terms of the GNU Lesser General Public
+        License as published by the Free Software Foundation; either
+        version 2.1 of the License, or (at your option) any later version.
+
+        This library is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+        Lesser General Public License for more details.
+
+        You should have received a copy of the GNU Lesser General Public
+        License along with this library; if not, write to the Free Software
+        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+
+    */
+
+    /**
+     *  @addtogroup YDFramework Core
+     */
+
+    // Check if the framework is loaded
+    if ( ! defined( 'YD_FW_NAME' ) ) {
+        die( 'Yellow Duck Framework is not loaded.' );
+    }
+
+    /**
+     *	This is a general timer class that starts counting when it's instantiated, and which returns the elapsed time as
+     *	soon as the finish method is called.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDTimer extends YDBase {
+
+        /**
+         *	This is the class constructor of the YDTimer class.
+         */
+        function YDTimer() {
+
+            // Initialize YDBase
+            $this->YDBase();
+
+            // Get the start time
+            $this->startTime = $this->_getMicroTime();
+
+            // Keep a list of intermediate times
+            $this->markers = array();
+
+        }
+
+        /**
+         *	This function returns the current microtime as a double.
+         *
+         *	@returns	Double containing the current time.
+         *
+         *	@internal
+         */
+        function _getMicroTime() {
+            $time = explode ( ' ', microtime() );
+            return ( doubleval( $time[0] ) + $time[1] );
+        }
+
+        /**
+         *	This will add a named marker.
+         *
+         *	@param $name	The name to use for the marker
+         */
+        function addMarker( $name ) {
+            array_push( $this->markers, array( $name, $this->getElapsed() ) );
+        }
+
+        /**
+         *	Finish the timer.
+         */
+        function finish() {
+            $this->addMarker( '** Finish' );
+        }
+
+        /**
+         *	This function will return the number of seconds elapsed since the timer was instantiated.
+         *
+         *	@returns	The total elapsed time
+         */
+        function getElapsed() {
+            $endTime = $this->_getMicroTime();
+            return intval( ( $endTime - $this->startTime ) * 1000 );
+        }
+
+        /**
+         *	This function returns a report as an array, with each row containing the following info: elapsed time,
+         *	difference with previous marker and marker name.
+         *
+         *	@returns	Array with the elapsed times, differences and marker names.
+         */
+        function getReport() {
+            $report = array();
+            $report[] = array( 0, 0, '** Start' );
+            $previous = 0;
+            foreach ( $this->markers as $marker ) {
+                $report[] = array( $marker[1], $marker[1]-$previous, $marker[0] );
+                $previous = $marker[1];
+            }
+            return $report;
+        }
+
+    }
+
+    /**
+     *  This class houses all the array related utility functions. All the methods are implemented as static methods and
+     *	do not require you to create a class instance in order to use them.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDArrayUtil extends YDBase {
+
+        /**
+         *  This function will convert a single dimension array to a multi dimension array with the indicated number of
+         *	colums. If the number of columns is 1, it will return the original array.
+         *
+         *  If you enable the $fillLastRow option, it will fill the last row with null values to match the number of
+         *	columns.
+         *
+         *  @param $array		    The single dimension array you want to convert.
+         *  @param $columns		    The number of columns the table should have.
+         *  @param $fillLastRow	    (optional) If true, the last row will be filled with null values so that it matches
+         *						    the number of columns.
+         *  @param $horizontal  	(optional) If true, rows will be filled first, then it will create an new row
+         *
+         *  @returns	A multi-dimension array with the contents of the original array converted to a table with the
+         *				indicated number of colums.
+         *
+         *	@static
+         */
+        function convertToTable( $array, $columns, $fillLastRow=false, $horizontal=true ) {
+
+            // If the number of columns is 1, return the original array
+            if ( $columns == 1 ) {
+                return $array;
+            }
+
+            // Return original array if empty
+            if ( sizeof( $array ) == 0 ) {
+                return $array;
+            }
+
+            // Convert horizontally or vertically
+            if ( $horizontal ) {
+
+                // Use the array_chunk function to convert to a table
+                $newArray = @array_chunk( $array, $columns );
+                if ( $newArray == null ) {
+                    trigger_error( 'Failed to split the array in chunks.', YD_ERROR );
+                }
+
+                // Pad the last row
+                if ( $fillLastRow ) {
+                    $lastRow = $newArray[sizeof( $newArray )-1];
+                    $numMissing = $columns - sizeof( $lastRow );
+                    for ( $i = 0; $i < $numMissing; $i++ ) {
+                        array_push( $newArray[sizeof( $newArray )-1], null );
+                    }
+
+                }
+
+            } else {
+
+                // Get only the values of the array
+                $array = array_values( $array );
+
+                // Check how many rows we will have
+                $rows = ceil( sizeof( $array ) / $columns );
+
+                // Keep track of the current row
+                $currentItem = 0;
+                $currentCol  = 0;
+
+                // Start with a new empty array
+                $newArray = array();
+
+                // Loop over the rows
+                while ( $currentCol < $columns ) {
+                    foreach ( range( 0, $rows-1 ) as $row ) {
+                        $newArray[$row][$currentCol] = isset( $array[$currentItem] ) ? $array[$currentItem] : null;
+                        $currentItem++;
+                    }
+                    $currentCol++;
+                }
+
+            }
+
+            // Return the array
+            return $newArray;
+
+        }
+
+        /**
+         *	This function will create a new array which is a nested using the given column name.
+         *
+         *	@param $array	The array to convert.
+         *	@param $key		The column to use as the key name.
+         *	@param $append	(Optional) Boolean that defines if values are append to array (TRUE) or if are assigned (FALSE).
+         *
+         *	@returns	A new array which is a nested using the given column name.
+         *
+         *	@static
+         */
+        function convertToNested( $array, $key, $append = true ) {
+
+            // Start with the a new array
+            $new = array();
+
+            // Loop over the original array
+            foreach ( $array as $item ) {
+                if ( ! array_key_exists( $key, $item ) ) {
+                    trigger_error( 'YDArrayUtil::convertToNested: key "' . $key . '" not found', YD_ERROR );
+                }
+
+                // append values or assign them
+                if ( $append == true ){
+                    if ( ! isset( $new[ $item[ $key ] ] ) ) { $new[ $item[ $key ] ] = array(); }
+                    array_push( $new[ $item[ $key ] ], $item );
+                }else{
+                    $new[ $item[ $key ] ] = $item;
+                }
+            }
+
+            // Return the new array
+            return $new;
+
+        }
+
+        /**
+         *	This function will create a new array which is grouped by a given key and mapped according to a given array.
+         *
+         *	@param $input	The array to convert.
+         *	@param $key		The column to use as the key name.
+         *	@param $map		The array or string which indicates how values of the children arrays should be mapped in
+         *                  the parent array.
+         *
+         *	@returns		The array resulting from the mapping.
+         *
+         *	@static
+         */
+        function map( $input, $key, $map ) {
+
+            // Starting with new array
+            $output = array();
+
+            // Loop over the original array
+            foreach ( $input as $inputFragment ) {
+                if ( isset( $inputFragment[ $key ] ) ) {
+                    if ( is_array($map)) {
+                        foreach ( $map as $mapKey => $mapValue ) {
+                            if ( ! array_key_exists( $key, $inputFragment ) ) {
+                                trigger_error( 'YDArrayUtil::map: key "' . $key . '" not found', YD_ERROR );
+                            }
+                            if ( isset( $inputFragment[ $mapKey ] ) && isset( $inputFragment[ $mapValue ] ) ) {
+                                $output[ $inputFragment[ $key ] ][ $inputFragment[ $mapKey ] ] = $inputFragment[ $mapValue ];
+                            }
+                            else {
+                                $output[ $inputFragment[ $key ] ][ $inputFragment[ $mapKey ] ] = NULL;
+                            }
+                        }
+                    }
+                    else {
+                        $output[ $inputFragment[ $key ] ] = $inputFragment[ $map ];
+                    }
+                }
+            }
+
+            // Return the new array
+            return $output;
+        }
+
+        /**
+         *  This function will implode a 1-level array in a string.
+         *
+         *  @param $input      The array to implode.
+         *  @param $glue       (optional) The key/value glue. Default: =
+         *  @param $separator  (optional) The items separator. Default: ,
+         *
+         *  @returns       The imploded string.
+         *
+         *  @static
+         */
+        function implode( $input, $glue='=', $separator=',' ) {
+            $return = '';
+            foreach ( $input as $k => $v ) {
+                $return .= $separator . $k . $glue . $v;
+            }
+            return substr( $return, 1 );
+        }
+
+        /**
+         *  This function will initialize the indicated array if it doesn't exist yet.
+         *
+         *  @param  $where  Where to instantiate the array in.
+         *  @param  $name   The name of the array to create.
+         *
+         *  @static
+         */
+        function createIfNeeded( & $where, $name ) {
+            if ( ! isset( $where[$name] ) ) {
+                $where[$name] = array();
+            }
+        }
+
+
+        /**
+         *  This function will convert a database result array to XML
+         *
+         *  @param $array      The input array.
+         *
+         *  @returns       The array as an XML string.
+         *
+         *  @static
+         */
+        function toXml( $array ) {
+            $out = '';
+            foreach ( $array as $record ) {
+                $out .= sprintf( '<row>' );
+                foreach ( $record as $key=>$val ) {
+                    if ( is_numeric( $val ) ) {
+                        $out .= sprintf( '<%s>%s</%s>', $key, $val, $key );
+                    } else {
+                        $out .= sprintf( '<%s><![CDATA[%s]]></%s>', $key, $val, $key );
+                    }
+                }
+                $out .= sprintf( '</row>' );
+            }
+            $out = sprintf( '<root>%s</root>', $out );
+            return '<?xml version="1.0" encoding="utf-8"?>' . $out;
+        }
+
+    }
+
+    /**
+     *	This class houses all the debug related utility functions. All the methods are implemented as static methods and
+     *	do not require you to create a class instance in order to use them.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDDebugUtil extends YDBase {
+
+        /**
+         *  Trigger an error
+         *
+         *  @param  $msg    The error to raise.
+         *  @param  $sql    (optional) The SQL statement to log with the error.
+         *  @param  $level  (optional) The type of error to be raised. Default is YD_ERROR.
+         */
+        function error( $msg, $sql=null, $level=YD_ERROR ) {
+            echo( '<p><b><font color="red">An error occured</font></b></p>' );
+            echo( '<b>Stacktrace:</b> <pre>' . YDDebugUtil::getStackTrace() . '</pre>' );
+            if ( ! empty( $sql ) ) {
+                echo( '<b>SQL Statement:</b> <pre>' . $this->formatSql( $sql ) . '</pre>' );
+            }
+            trigger_error( $msg, $level );
+        }
+
+        /**
+         *	Function to output a debug message. These message are only shown if the constant YD_DEBUG is set to 1. You
+         *	can turn on debugging by specifying the YD_DEBUG parameter in the url and assigning it the value 1.
+         *
+         *	Example url with debugging turned on: http://localhost/index.php?YD_DEBUG=1
+         *
+         *	This function accepts a variable amount of arguments which are all concatenated using a space in between.
+         *	All debug messages will be shown as HTML comments with the prefix "[ YD_DEBUG ]".
+         *
+         *	@static
+         */
+        function debug() {
+            $args = func_get_args();
+            if ( YDConfig::get( 'YD_DEBUG' ) == 1 ) {
+                echo( YD_CRLF . '<!-- [ YD_DEBUG ] ' . implode( ' ', $args ) . '-->' . YD_CRLF );
+            }
+            if ( YDConfig::get( 'YD_DEBUG' ) == 2 ) {
+                echo( '<table border="0" cellspacing="0" cellpadding="4"><tr>' );
+                echo( '<td bgcolor="#FFCC00">' );
+                echo( '<b>' . YD_FW_NAME . ' Debug Information</b> ' );
+                echo( '<pre>' . htmlspecialchars( trim( implode( ' ', $args ) ) ) . '</pre>' );
+                echo( '</td></tr></table>' );
+            }
+        }
+
+        /**
+         *	Function to dump the contents of pretty much anything. This is the same as the var_dump function in PHP, but
+         *	has a nicer and more readable output.
+         *
+         *	@param $obj		Object you want to dump.
+         *	@param $label	The label for the dump.
+         *
+         *	@static
+         */
+        function dump( $obj, $label='' ) {
+            echo( YDDebugUtil::r_dump( $obj, true, $label ) );
+        }
+
+        /**
+         *	Function to return the contents of pretty much anything. This is the same as the var_export function in PHP.
+         *
+         *	@param $obj		Object you want to dump.
+         *	@param $html	(optional) If you want to have everything returned as HTML or text. The default is false,
+         *					returning text.
+         *	@param $label	The label for the dump.
+         *
+         *	@returns	Text representation of the object.
+         *
+         *	@static
+         */
+        function r_dump( $obj, $html=false, $label='' ) {
+            $data = var_export( $obj, true );
+            if ( $html == true ) {
+                $data = stripslashes( htmlentities( $data ) );
+                $style = ' style="text-align: left; font-size: 10pt;"';
+                if ( ! empty( $label ) ) {
+                    $data = '<pre' . $style . '><b style="color: navy">' . $label . '</b><br>' . $data . '</pre>';
+                } else {
+                    $data = '<pre' . $style . '>' . $data . '</pre>';
+                }
+            } else {
+                $data = $label . YD_CRLF . $data;
+            }
+            return $data;
+        }
+
+        /**
+         *	This function will print a stack trace.
+         *
+         *	@static
+         */
+        function stackTrace() {
+            if ( YDConfig::get( 'YD_DEBUG' ) == 1 || YDConfig::get( 'YD_DEBUG' ) == 2 ) {
+                $err = 'URI: ' . YD_SELF_URI . YD_CRLF . YDDebugUtil::getStackTrace();
+                if ( ini_get( 'display_errors' ) == 1 ) {
+                    echo( '<pre>' . YD_CRLF . htmlentities( $err ) . '</pre>' );
+                }
+                error_log( $err, 0 );
+            }
+        }
+
+        /**
+         *	Function to get a formatted stack trace.
+         *
+         *	@static
+         */
+        function getStackTrace() {
+            $err = '';
+            $err .= 'Debug backtrace:' . YD_CRLF;
+            foreach( debug_backtrace() as $t ) {
+                $err .= '    @ ';
+                if ( isset( $t['file'] ) ) {
+                    $err .= basename( $t['file'] ) . ':' . $t['line'];
+                } else {
+                    $err .= basename( YD_SELF_FILE );
+                }
+                $err .= ' -- ';
+                if ( isset( $t['class'] ) ) {
+                    $err .= $t['class'] . $t['type'];
+                }
+                $err .= $t['function'];
+                if ( isset( $t['args'] ) && sizeof( $t['args'] ) > 0 ) {
+                    $err .= '(...)';
+                } else {
+                    $err .= '()';
+                }
+                $err .= YD_CRLF;
+            }
+            return $err;
+        }
+
+    }
+
+    /**
+     *	This class houses all the object and class related utility functions. All the methods are implemented as static
+     *	methods and do not require you to create a class instance in order to use them.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDObjectUtil extends YDBase {
+
+        /**
+         *	This function checks if an object instance is of a specific class or is based on a derived class of the
+         *	given class. The class name is case insensitive.
+         *
+         *	@param $obj		The object instance to check.
+         *	@param $class	The object type you want to check against.
+         *
+         *	@returns	Boolean indicating if the object is of the specified class.
+         *
+         *	@static
+         */
+        function isSubClass( $obj, $class ) {
+            $class = strtolower( $class );
+            if ( function_exists( 'is_a' ) ) {
+                return is_a( $obj, $class );
+            } else {
+                if ( is_object( $obj ) ) {
+                    if ( strtolower( get_class( $obj ) ) == strtolower( $class ) ) return true;
+                    if ( is_subclass_of( $obj, $class ) ) return true;
+                }
+            }
+            return false;
+        }
+
+        /**
+         *	Function to get all the ancestors of a class. The list will contain the parent class first, and then it's
+         *	parent class, etc. You can pass both the name of the class or an object instance to this function
+         *
+         *	@param $classname	Name of the class or object.
+         *
+         *	@returns	Array with all the ancestors.
+         *
+         *	@static
+         */
+        function getAncestors( $classname ) {
+            if ( is_object( $classname ) ) {
+                $classname = strtolower( get_class( $classname ) );
+            }
+            $ancestors = array();
+            $father = get_parent_class( $classname );
+            if ( $father != '' ) {
+                $ancestors = YDObjectUtil::getAncestors( $father );
+                $ancestors[] = $father;
+            }
+            return array_reverse( $ancestors );
+        }
+
+        /**
+         *	This function will serialize an object.
+         *
+         *	@param $obj	Object to serialize.
+         *
+         *	@static
+         */
+        function serialize( $obj ) {
+            $obj = serialize( $obj );
+            if ( ! $obj ) {
+                trigger_error( 'Failed serializing the object', YD_ERROR );
+            }
+            return $obj;
+        }
+
+        /**
+         *	This function will unserialize an object.
+         *
+         *	@param $obj	Object to unserialize.
+         *
+         *	@static
+         */
+        function unserialize( $obj ) {
+            $obj = unserialize( $obj );
+            if ( ! $obj ) {
+                trigger_error( 'Failed unserializing the object', YD_ERROR );
+            }
+            return $obj;
+        }
+
+    }
+
+    /**
+     *	This class houses all the string related utility functions. All the methods are implemented as static methods
+     *	and do not require you to create a class instance in order to use them.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDStringUtil extends YDBase {
+
+        /**
+         *	Function to format a file size to a meaningful value.
+         *
+         *	@param $bytes		The file size to format.
+         *	@param $decimals	(optional) The number of decimals that should be returned.
+         *
+         *	@returns String containing the formatted file size.
+         *
+         *	@static
+         */
+        function formatFilesize( $bytes, $decimals=1 ) {
+
+            // Convert the bytes to a string
+            $bytes = strval( $bytes );
+
+            // The different units
+            $units = array(
+                '1152921504606846976'	=> 'EB',
+                '1125899906842624'		=> 'PB',
+                '1099511627776'			=> 'TB',
+                '1073741824'			=> 'GB',
+                '1048576'				=> 'MB',
+                '1024'					=> 'KB'
+            );
+
+            // If smaller than 1024, return it as bytes
+            if ( $bytes <= 1024 ) {
+                return $bytes . ' bytes';
+            }
+
+            // Check the right format
+            foreach ( $units as $base=>$title ) {
+                if ( floor( $bytes / $base ) != 0 ) {
+                    return number_format( $bytes / $base, $decimals, '.', "'" ) . ' ' . $title;
+                }
+            }
+
+        }
+
+        /**
+         *  This function will format a timestamp using the strftime function.
+         *
+         *  @param  $timestamp  The timestamp to format. It can also be a date/time form object.
+         *  @param  $format     The strftime format to use. You can also use the predefined options date, time and
+         *                      datetime.
+         *  @param  $locale     (optional) The locale to use to format the date.
+         *
+         *  @returns    A formatted timestamp
+         *
+         *  @static
+         */
+        function formatDate( $timestamp, $format, $locale=null ) {
+
+            // Check if the timestamp is an object and has the getTimeStamp function
+            if ( is_object( $timestamp ) && method_exists( $timestamp, 'getTimeStamp' ) ) {
+                $timestamp = $timestamp->getTimeStamp();
+            }
+
+            // Convert to an integer
+            if ( is_numeric( $timestamp ) ) {
+                $timestamp = intval( $timestamp );
+            }
+
+            // If text, convert to number
+            if ( is_string( $timestamp ) ) {
+                $timestamp = strtotime( $timestamp );
+            }
+
+            // If array, is a date YDForm element value
+            if ( is_array( $timestamp ) ) {
+
+                // check if timestamp exists. otherwise create it
+                $hours   = isset( $timestamp[ 'hours' ] ) ?   $timestamp[ 'hours' ] : 0;
+                $minutes = isset( $timestamp[ 'minutes' ] ) ? $timestamp[ 'minutes' ] : 0;
+                $seconds = isset( $timestamp[ 'seconds' ] ) ? $timestamp[ 'seconds' ] : 0;
+                $month   = isset( $timestamp[ 'month' ] ) ?   $timestamp[ 'month' ] : 1;
+                $day     = isset( $timestamp[ 'day' ] ) ?     $timestamp[ 'day' ] : 1;
+                $year    = isset( $timestamp[ 'year' ] ) ?    $timestamp[ 'year' ] : 1970;
+                $timestamp = mktime( $hours, $minutes, $seconds, $month, $day, $year );
+            }
+
+            // Check the standard formats
+            if ( strtolower( $format ) == 'date' ) {
+                $format = '%d %B %Y';
+            }
+            if ( strtolower( $format ) == 'datetime' ) {
+                $format = '%d %B %Y %H:%M';
+            }
+            if ( strtolower( $format ) == 'datetimesql' ) {
+                $format = '%Y-%m-%d %H:%M:%S';
+            }
+            if ( strtolower( $format ) == 'time' ) {
+                $format = '%H:%M';
+            }
+            if ( strtolower( $format ) == 'file' ) {
+                $format = '%d-%m-%Y %H:%M';
+            }
+
+            // Set the new locale
+            if ( ! is_null( $locale ) ) {
+                $currentLocale = YDLocale::get();
+                YDLocale::set( $locale );
+            }
+
+            // Return the formatted date
+            $timestamp = strftime( $format, $timestamp );
+
+            // Reset the old locale
+            if ( ! is_null( $locale ) ) {
+                YDLocale::set( $currentLocale );
+            }
+
+            // Return the timestamp
+            return $timestamp;
+
+        }
+
+        /**
+         *	This function will encode all characters which have an ordinal bigger than 128 to numeric HTML entities,
+         *	which can be safely included in e.g. XML output.
+         *
+         *	@param $string	The original string to encode.
+         *	@param $htmlent	Boolean indicating if the result should be HTML encoded or not.
+         *
+         *	@returns	String with all the characters with an ordinal bigger than 128 converted to numeric entities.
+         *
+         *	@static
+         */
+        function encodeString( $string, $htmlent=false ) {
+            $trans = array_flip( get_html_translation_table( HTML_ENTITIES ) );
+            $string = strtr( $string, $trans );
+            $trans = get_html_translation_table( HTML_ENTITIES, ENT_NOQUOTES );
+            foreach ( $trans as $key => $value ) {
+                if ( ord( $key ) == 60 || ord( $key ) == 62 || ord( $key ) == 38 ) {
+                    unset( $trans[$key] );
+                } else {
+                    $trans[$key] = '&#' . ord( $key ) . ';';
+                }
+            }
+            $string = strtr( $string, $trans );
+            if ( $htmlent == true ) {
+                $string = htmlentities( $string );
+            }
+            return $string;
+        }
+
+        /**
+         *   This function will encode all characters in a string to it's ASCII value.
+         *
+         *   @param $string   The original string to encode.
+         *
+         *   @returns   The encoded string.
+         *
+         *   @static
+         */
+        function encodeToAscii( $string ) {
+            $result = '';
+            for ( $i=0; $i < strlen( $string ); $i++ ) {
+                $result .= "&#" . ord( substr( $string, $i, 1) ) . ';';
+            }
+            return $result;
+        }
+
+        /**
+         *	This function will truncate a string.
+         *
+         *	@param $string		String to truncate.
+         *	@param $length		(optional) The length to truncate to. Default length is 80 characters.
+         *	@param $etc			(optional) The string to append if the item gets trunctated. Default is '...'.
+         *	@param $break_words	(optional) Break in the middle of words or not. Default is false.
+         *
+         *	@static
+         */
+        function truncate( $string, $length=80, $etc='...', $break_words=false ) {
+            if ( $length == 0 ) { return ''; }
+            if ( strlen( $string ) > $length ) {
+                $string = html_entity_decode( strip_tags( $string ) );
+                $length -= strlen( $etc );
+                if ( ! $break_words ) {
+                    $string = preg_replace( '/\s+?(\S+)?$/', '', substr( $string, 0, $length+1 ) );
+                }
+                return htmlentities( substr( $string, 0, $length ) . $etc );
+            } else {
+                return $string;
+            }
+        }
+
+        /**
+         *	This function normalizes all the newlines to the correct newline character for the current platform.
+         *
+         *	@param $string		String to normalize the newlines from.
+         *
+         *	@returns	The original string with normalized newlines.
+         *
+         *	@static
+         */
+        function normalizeNewlines( $string ) {
+
+            // First, change all to \n
+            $string = str_replace( "\r\n", "\n",    $string );
+            $string = str_replace( "\r",   "\n",    $string );
+
+            // Now, change everything to the correct one
+            $string = str_replace( "\n",   YD_CRLF, $string );
+
+            // Return the changed string
+            return $string;
+
+        }
+
+        /**
+         *	This function will remove all newlines and all spaces at the beginning and end of each line.
+         *
+         *	@param $string		String to remove the whitespace from.
+         *
+         *	@returns	The original string without the newlines and spaces at the beginning and end of each line.
+         *
+         *	@static
+         */
+        function removeWhiteSpace( $string ) {
+
+            // First, normalize the newlines
+            $string = YDStringUtil::normalizeNewLines( $string );
+
+            // Now, remove the whitespace
+            $string = implode( ' ', array_map( 'trim', explode( YD_CRLF, $string ) ) );
+
+            // Return the changed string
+            return $string;
+
+        }
+
+        /**
+         *   This function will compare two network ip addresses
+         *
+         *   @param $ip1      First ip
+         *
+         *   @param $ip2      Second ip
+         *
+         *   @returns    Returns < 0 if ip1 is less than ip2; > 0 if str1 is greater than ip2, and 0 if they are equal.
+         *
+         *   @static
+         */
+        function ipcmp( $ip1, $ip2 ){
+
+            // get 4 elements from the network address
+            $ip1 = explode(".", $ip1);
+            $ip2 = explode(".", $ip2);
+
+            // get an integer that represents the numeric value of the address
+            $ip1 = $ip1[0]*256^3 + $ip1[1]*256^2 + $ip1[2]*256 + $ip1[3];
+            $ip2 = $ip2[0]*256^3 + $ip2[1]*256^2 + $ip2[2]*256 + $ip2[3];
+
+            // return diference
+            return $ip1 - $ip2;
+
+        }
+
+        /**
+         *  This function will replace all special characters to normal ASCII characters. This is very useful when you
+         *  want to rename uploaded files and strip out the special characters.
+         *
+         *  @param  $data   The data to strip the special characters from.
+         *
+         *  @returns    The data with the special characters replaced.
+         *
+         *  @static
+         */
+        function stripSpecialCharacters( $data ) {
+
+            // Trim the data
+            $data = trim( $data );
+
+            // Decode the HTML entities
+            $trans = array_flip( get_html_translation_table( HTML_ENTITIES, ENT_NOQUOTES ) );
+            $data = strtr( $data, $trans );
+
+            // The characters to replace
+            $chars = array(
+                '?' => 'A', '?' => 'A', '?' => 'A', '?' => 'AE', '?' => 'E', '?' => 'E', '?' => 'I', '?' => 'I',
+                '?' => 'D', '?' => 'O', '?' => 'O', '?' => 'O', '?' => 'O', '?' => 'U', '?' => 'U', '?' => 'a',
+                '?' => 'a', '?' => 'a', '?' => 'ae', '?' => 'e', '?' => 'e', '?' => 'i', '?' => 'i', '?' => 'o',
+                '?' => 'o', '?' => 'o', '?' => 'o', '?' => 'o', '?' => 'u', '?' => 'u', '?' => 'A', '?' => 'A',
+                '?' => 'A', '?' => 'C', '?' => 'E', '?' => 'E', '?' => 'I', '?' => 'I', '?' => 'N', '?' => 'O',
+                '?' => 'O', '?' => 'U', '?' => 'U',  '?' => 'Y', '?' => 'B', '?' => 'a', '?' => 'a', '?' => 'a',
+                '?' => 'c', '?' => 'e', '?' => 'e', '?' => 'i', '?' => 'i', '?' => 'n', '?' => 'o', '?' => 'o',
+                '?' => 'u', '?' => 'u', '?' => 'y', '?' => 'y', '@' => '_', ' ' => '_', '[' => '_', ']' => '_',
+                '(' => '_', ')' => '_', '&' => '_', '+' => '_', '=' => '_'
+            );
+
+            // Strip the special characters
+            $data = str_replace( array_keys( $chars ), $chars, $data );
+
+            // Return the data
+            return $data;
+
+        }
+
+        /**
+         *  This function will check if the specified string starts with the indicated text or not. You can specify if
+         *  this needs to happen case-sensitively or not.
+         *
+         *  @param  $string         The string to check.
+         *  @param  $substring      The string with which it needs to start.
+         *  @param  $case_sensitive (optional) Whether the comparison needs to be case-sensitive or not. Default is true.
+         *
+         *  @returns    Boolean indicating if the string starts with the specified text or not.
+         */
+        function startsWith( $string, $substring, $case_sensitive=true ) {
+            if ( ! $case_sensitive ) {
+                $string = strtolower( $string );
+                $substring = strtolower( $substring );
+            }
+            return ( substr( $string, 0, strlen( $substring ) ) == $substring );
+        }
+
+        /**
+         *  This function will check if the specified string ends with the indicated text or not. You can specify if
+         *  this needs to happen case-sensitively or not.
+         *
+         *  @param  $string         The string to check.
+         *  @param  $substring      The string with which it needs to ends.
+         *  @param  $case_sensitive (optional) Whether the comparison needs to be case-sensitive or not. Default is true.
+         *
+         *  @returns    Boolean indicating if the string ends with the specified text or not.
+         */
+        function endsWith( $string, $substring, $case_sensitive=true ) {
+            if ( ! $case_sensitive ) {
+                $string = strtolower( $string );
+                $substring = strtolower( $substring );
+            }
+            return ( substr( $string, -strlen( $substring ) ) == $substring );
+        }
+
+        /**
+         *  This function is an fnmatch replacement.
+         *
+         *  $param $string      The string to test
+         *  $param $pattern     The pattern to match
+         *
+         *  @returns    Boolean indicating if the string matches the pattern or not.
+         */
+        function match( $string, $pattern ) {
+            for ( $op = 0, $npattern = '', $n = 0, $l = strlen( $pattern ); $n < $l; $n++ ) {
+            switch ($c = $pattern[$n]) {
+                case '\\':
+                    $npattern .= '\\' . @$pattern[++$n];
+                    break;
+                case '.':
+                case '+':
+                case '^':
+                case '$':
+                case '(':
+                case ')':
+                case '{':
+                case '}':
+                case '=':
+                case '!':
+                case '<':
+                case '>':
+                case '|':
+                    $npattern .= '\\' . $c;
+                    break;
+                case '?': case '*':
+                    $npattern .= '.' . $c;
+                    break;
+                case '[':
+                case ']':
+                default:
+                    $npattern .= $c;
+                    if ($c == '[') {
+                        $op++;
+                    } else if ($c == ']') {
+                        if ($op == 0) return false;
+                            $op--;
+                        }
+                        break;
+                    }
+            }
+            if ( $op != 0 ) {
+                return false;
+            } else {
+                return preg_match( '/' . $npattern . '/i', $string );
+            }
+        }
+
+        /**
+         *  Show the time that has elapsed since a given time.
+         *
+         *  @param  $time   The time in seconds
+         *
+         *  @returns    The elapsed time
+         */
+        function timesince( $time ) {
+
+            // Convert to integer
+            if ( is_string( $time ) && is_numeric( $time ) ) {
+                $time = intval( $time );
+            }
+
+            // Array of time period chunks
+            $chunks = array(
+                array( 60 * 60 * 24 * 365 , t('years') ),
+                array( 60 * 60 * 24 * 30 , t('months') ),
+                array( 60 * 60 * 24 * 7, t('weeks') ),
+                array( 60 * 60 * 24 , t('days') ),
+                array( 60 * 60 , t('hours') ),
+                array( 60 , t('minutes') ),
+            );
+
+            // Difference in seconds
+            $since = time() - $time;
+
+            // The first chunk
+            for ( $i = 0, $j = sizeof( $chunks ); $i < $j; $i++ ) {
+                $seconds = $chunks[$i][0];
+                $name = $chunks[$i][1];
+                if ( ( $count = floor( $since / $seconds ) ) != 0 ) {
+                    break;
+                }
+            }
+
+            // Set output var
+            $output = ( $count == 1 ) ? '1 '.$name : $count . ' ' . $name;
+
+            // step two: the second chunk
+            if ( $i + 1 < $j ) {
+                $seconds2 = $chunks[$i + 1][0];
+                $name2 = $chunks[$i + 1][1];
+                if ( ( $count2 = floor( ( $since - ( $seconds * $count ) ) / $seconds2 ) ) != 0 ) {
+                    $output .= ($count2 == 1) ? ', 1 '.$name2 : ", $count2 {$name2}s";
+                }
+            }
+
+            // Return the output
+            return $output . ' ' . t('ago');
+
+        }
+
+    }
+
+    /**
+     *	This class uses the HTTP_USER_AGENT varaible to get information about the browser the visitor used to perform
+     *	the request. We determine the browser name, the version and the platform it's running on.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDBrowserInfo extends YDBase {
+
+        /**
+         *	The class constructor analyzes for the YDBrowserInfo class. The constructor takes no arguments and uses the
+         *	$_SERVER['HTTP_USER_AGENT'] variable to parse the browser info.
+         */
+        function YDBrowserInfo() {
+
+            // Initialize YDBase
+            $this->YDBase();
+
+            // The matching list for browsers
+            $browsers = array(
+                'bot'       => array( 'bot', 'Yahoo! Slurp', 'crawler', 'scooter', 'mercator', 'altavista', 'Gulliver', 'spider', 'Ask Jeeves' ),
+                'opera'     => array( 'opera' ),
+                'ie'        => array( 'msie' ),
+                'safari'    => array( 'safari' ),
+                'konqueror' => array( 'Konqueror' ),
+                'feed'      => array( 'feed', 'rss', 'synd', 'bloglines', 'newsgator' ),
+                'mozilla'   => array( 'mozilla', 'firefox' ),
+            );
+
+            // The matching list for platforms
+            $platforms = array(
+                'win'       => array( 'win' ),
+                'mac'       => array( 'mac', 'apple' ),
+                'linux'     => array( 'linux', 'bsd' ),
+                'unix'      => array( 'unix', 'sun', 'risc', 'aix' ),
+                'bot'       => array( 'bot', 'Yahoo! Slurp', 'crawler' ),
+                'feed'      => array( 'feed', 'rss', 'synd', 'bloglines', 'newsgator' ),
+            );
+
+            // Mark everything as unknown
+            $this->agent = 'unknown';
+            $this->browser = 'unknown';
+            $this->platform = 'unknown';
+            $this->dotnet = 'unknown';
+
+            // Check if the user agent was specified
+            if ( isset( $_SERVER['HTTP_USER_AGENT'] ) ) {
+
+                // Get the user agent
+                $this->agent = $_SERVER['HTTP_USER_AGENT'];
+
+                // Get the browser name
+                foreach ( $browsers as $browser => $browserpatterns ) {
+                    foreach ( $browserpatterns as $browserpattern ) {
+                        if ( stristr( $this->agent, $browserpattern ) ) {
+                            $this->browser = $browser;
+                            continue;
+                        }
+                    }
+                    if ( $this->browser != 'unknown' ) {
+                        break;
+                    }
+                }
+
+                // Get the browser name
+                foreach ( $platforms as $platform => $platformpatterns ) {
+                    foreach ( $platformpatterns as $platformpattern ) {
+                        if ( stristr( $this->agent, $platformpattern ) ) {
+                            $this->platform = $platform;
+                            continue;
+                        }
+                    }
+                    if ( $this->platform != 'unknown' ) {
+                        break;
+                    }
+                }
+
+                // Get the .NET runtime version
+                preg_match_all( '/.NET CLR ([0-9][.][0-9])/i', $this->agent, $ver );
+                $this->dotnet = $ver[1];
+
+            }
+
+        }
+
+        /**
+         *  Get the hostname of the client computer.
+         *
+         *  @returns The hostname of the client computer in lowercase.
+         *
+         *  @static
+         */
+        function getComputerName() {
+            return strtolower( gethostbyaddr( $_SERVER['REMOTE_ADDR'] ) );
+        }
+
+        /**
+         *	This function returns an array with the languages that are supported by the browser. This is done by using
+         *	the HTTP_ACCEPT_LANGUAGE server variable that gets send with the HTTP headers.
+         *
+         *	@return Array containing the list of supported languages
+         */
+        function getBrowserLanguages() {
+
+            // We parse the language headers sent by the browser
+            if ( ! isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
+                return array();
+            }
+            $browserLanguages = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );
+
+            // Normalize the browser language headers
+            for ( $i = 0; $i < sizeof( $browserLanguages ); $i++ ) {
+                $browserLanguage = explode( ';', $browserLanguages[$i] );
+                $browserLanguages[$i] = substr( $browserLanguage[0], 0, 2 );
+            }
+
+            // Remove the duplicates
+            $browserLanguages = array_unique( $browserLanguages );
+
+            // Return the browser languages
+            return array_map( 'strtolower', array_values( $browserLanguages ) );
+
+        }
+
+        /**
+         *  This function returns an array with the languages that are supported by the browser and also interprets the
+         *  country information that the browser sends over.. This is done by using the HTTP_ACCEPT_LANGUAGE server
+         *  variable that gets send with the HTTP headers.
+         *
+         *  @return Array containing the list of supported languages
+         */
+        function getBrowserLanguagesAndCountries() {
+
+            // We parse the language headers sent by the browser
+            if ( !isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
+                return array();
+            }
+            $browserCountries = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );
+            $languagesAndCountries = array();
+
+            // Loop over the languages and normalize them
+            foreach( $browserCountries as $value ) {
+                $lang = explode( ';', $value );
+                $lang = explode( '-', $lang[0] );
+                $lang[1] = ( isset( $lang[1] ) && $lang[1] != '' ? $lang[1] : $lang[0] );
+                $languagesAndCountries[][ $lang[1] ] = $lang[0];
+            }
+
+            // Return the normalized list
+            return $languagesAndCountries;
+
+        }
+
+        /**
+         *	This function will get the most appropriate language for the browser, considering the list of supported
+         *	languages by both the browser and the web application.
+         *
+         *	@param $supported	(optional) An array with the list of supported languages. By default, only english is
+         *						supported.
+         */
+        function getLanguage( $supported=array( 'en' ) ) {
+
+            // Start with the default language
+            $language = $supported[0];
+
+            // Get the list of languages supported by the browser
+            $browserLanguages = $this->getBrowserLanguages();
+
+            // Now, we look if the browser specified one
+            if ( isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) {
+                foreach ( $browserLanguages as $browserLanguage ) {
+                    if ( in_array( $browserLanguage, $supported ) ) {
+                        $language = $browserLanguage;
+                        break;
+                    }
+                }
+            }
+
+            // Return the language
+            return $language;
+
+        }
+
+    }
+
+    /**
+     *  This class allows you to generate GUIDs (global unique identifier).
+     *
+     *  More info: http://www.ietf.org/rfc/rfc4122.txt
+     *
+     *  @ingroup YDFramework
+     */
+    class YDGuidUtil extends YDBase {
+
+        /**
+         *  Generate a new GUID.
+         *
+         *  @returns    A new GUID as a string.
+         */
+        function create() {
+            return md5( uniqid( rand(), true ) . $_SERVER['SERVER_NAME'] . $_SERVER['SERVER_ADDR'] );
+        }
+
+        /**
+         *  Generate a new formatted GUID.
+         *
+         *  @returns    A formatted GUID as a string.
+         */
+        function createFormatted() {
+            return YDGuidUtil::format( YDGuidUtil::create() );
+        }
+
+        /**
+         *  Formats a GUID.
+         *
+         *  @param $g    GUID to format.
+         *
+         *  @returns    A formatted GUID as a string.
+         */
+         function format( $g ) {
+            $g = str_replace( '-', '', $g );
+            return sprintf(
+                '%s-%s-%s-%s-%s',
+                substr( $g, 0, 8 ), substr( $g, 8, 4 ), substr( $g, 12, 4 ), substr( $g, 16, 4 ), substr( $g, 20 )
+            );
+         }
+
+    }
+
+    /**
+     *  This class allows you to perform LDAP releated tasks.
+     *
+     *  @ingroup YDFramework
+     */
+    class YDLdapUtil extends YDBase {
+
+        /**
+         *  Authenticate against a domain.
+         *
+         *  @param  $server     The name of the domain controller.
+         *  @param  $domain     The name of the domain.
+         *  @param  $user       The username.
+         *  @param  $password   The password.
+         *
+         *  @returns    A boolean indicating if the user was authenticated or not.
+         */
+        function authenticate( $server, $domain, $user, $password ) {
+
+            // Connect to the LDAP server
+            $conn = ldap_connect( $server );
+
+            // Setup the options
+            ldap_set_option( $conn, LDAP_OPT_PROTOCOL_VERSION, 3 );
+            ldap_set_option( $conn, LDAP_OPT_REFERRALS, 0 );
+
+            // Require a username
+            if ( empty( $user ) || empty( $pass ) ) {
+                return false;
+            }
+
+            // Fix the username
+            $user = strtolower( trim( $user ) );
+            if ( strpos( $user, '\\' ) ) {
+                $user = substr( $user, strpos( $user, '\\' ) + 1 );
+            }
+
+            // Authenticate
+            $result = @ldap_bind( $conn, $user . '@' . $server, $password );
+
+            // Close the connection
+            ldap_close( $conn );
+
+            // Return the result
+            return ( $result ) ? true : false;
+
+        }
+
+    }
+
+?>

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php	2007-05-16 19:52:17 UTC (rev 2427)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php	2007-05-16 21:02:47 UTC (rev 2428)
@@ -764,11 +764,23 @@
          */
         function timezone( $val, $opts='' ) {
 
-			YDInclude( 'YDUtil.php' );
+			YDInclude( 'YDList.php' );
 
-			$arr = YDArrayUtil::getGMT();
+            return in_array( $val, YDList::gmts( 'keys' ) );
+        }
 
-            return isset( $arr[ $val ] );
+
+        /**
+         *	This function returns true if the variable matches a valid country code
+         *
+         *	@param $val		The value to test.
+         *	@param $opts	(not required)
+         */
+        function country( $val, $opts='' ) {
+
+			YDInclude( 'YDList.php' );
+
+            return in_array( $val, YDList::countries( 'keys' ) );
         }
 
 



From ximian at mail.berlios.de  Fri May 18 13:05:42 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 18 May 2007 13:05:42 +0200
Subject: [ydf-devel] r2429 - in YDFramework2.0/trunk/YDFramework2:
	YDClasses/YDFormElements addons/YDCaptcha
Message-ID: <200705181105.l4IB5gWk001423@sheep.berlios.de>

Author: ximian
Date: 2007-05-18 13:05:06 +0200 (Fri, 18 May 2007)
New Revision: 2429

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php
   YDFramework2.0/trunk/YDFramework2/addons/YDCaptcha/YDCaptcha.php
Log:
captcha now renders the correct text form field size:
 - changed captcha definition from methods to global YDConfigs. Be carefull.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php	2007-05-16 21:02:47 UTC (rev 2428)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php	2007-05-18 11:05:06 UTC (rev 2429)
@@ -103,9 +103,11 @@
          */
         function toHtml() {
 
+            $size = YDConfig::get( 'YD_CAPTCHA_NUMCHARS', 5 );
+
             // Create the list of attributes
             $attribs = array(
-                'type' => 'text', 'name' => $this->_form . '_' . $this->_name, 'value' => $this->_value, 'size' => 7
+                'type' => 'text', 'name' => $this->_form . '_' . $this->_name, 'value' => $this->_value, 'size' => $size, 'maxlength' => $size 
             );
             $attribs = array_merge( $this->_attributes, $attribs );
 

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDCaptcha/YDCaptcha.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDCaptcha/YDCaptcha.php	2007-05-16 21:02:47 UTC (rev 2428)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDCaptcha/YDCaptcha.php	2007-05-18 11:05:06 UTC (rev 2429)
@@ -30,9 +30,33 @@
         die( 'Yellow Duck Framework is not loaded.' );
     }
 
+
+    /**
+     *  This config defines the total characters to use
+     *  Default: 5.
+     */
+    YDConfig::set( 'YD_CAPTCHA_NUMCHARS', 5, false );
+
+
+    /**
+     *  This config defines if image should have color
+     *  Default: false.
+     */
+    YDConfig::set( 'YD_CAPTCHA_COLOR', false, false );
+
+
+    /**
+     *  This config defines if image should have shadow
+     *  Default: false.
+     */
+    YDConfig::set( 'YD_CAPTCHA_SHADOW', false, false );
+
+
+
     // include antispam lib
     include_once( YD_DIR_HOME . '/3rdparty/captcha/php-captcha.inc.php' );
 
+
     /**
      *  This class handles a captcha image
      *
@@ -63,56 +87,21 @@
             // create image object
             $this->_img = new PhpCaptcha( $fonts, 200, 40 );
             
-            $this->_img->DisplayShadow( false );
-            $this->_img->UseColour( false );
-            $this->_img->SetNumChars( 5 );
-
             // add simbols ;) 
             // don't add possible character problems for user, eg, l <--> 1 (lower L or number ONE?), 0 <--> O (ZERO OR upper O?)
             $this->_img->SetCharSet( "a-h,!,j-k,#,&,%,$,m-n,@,p-r,2-4,6,?,?,8-9,t-w,y-z,#,&,%,$,A-H,!,J-K,#,&,%,$,M-N,@,P-R,T-W,Y-Z,2-4,6,?,?,8-9" );
-
         }
 
-        /**
-         *	This function set the number of characters to display
-         *
-         *	@param $num		Number of characters
-         */
-        function setNumChars( $num ){
-            $this->_img->setNumChars( $num );
-        }
 
         /**
-         *	This function set the number of interference lines
-         *
-         *	@param $num		Number of lines
-         */
-        function setNumLines( $num ){
-            $this->_img->setNumLines( $num );
-        }
-
-        /**
-         *	This function defines use of shadows
-         *
-         *	@param $flag		True or false boolean
-         */
-        function displayShadow( $flag ){
-            $this->_img->displayShadow( $flag );
-        }
-
-        /**
-         *	This function defines use of colours
-         *
-         *	@param $flag		True or false boolean
-         */
-        function useColour( $flag ){
-            $this->_img->useColour( $flag );
-        }
-
-        /**
          *  This function exports the image
          */
         function create() {
+
+            $this->_img->DisplayShadow( YDConfig::get( 'YD_CAPTCHA_SHADOW' ) );
+            $this->_img->useColour( YDConfig::get( 'YD_CAPTCHA_COLOR' ) );
+            $this->_img->SetNumChars( YDConfig::get( 'YD_CAPTCHA_NUMCHARS' ) );
+
             return $this->_img->Create();
         }
 



From ximian at mail.berlios.de  Sat May 19 20:24:48 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sat, 19 May 2007 20:24:48 +0200
Subject: [ydf-devel] r2430 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705191824.l4JIOmZc007121@sheep.berlios.de>

Author: ximian
Date: 2007-05-19 20:24:38 +0200 (Sat, 19 May 2007)
New Revision: 2430

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php
Log:
fix on span form element. On submit we got duplicated content, now it's fixed using static content.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php	2007-05-18 11:05:06 UTC (rev 2429)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php	2007-05-19 18:24:38 UTC (rev 2430)
@@ -45,7 +45,7 @@
          *
          *        @param $form                The name of the form to which this element is connected.
          *        @param $name                The name of the form element.
-         *        @param $label                (optional) The label for the form element.
+         *        @param $label               HTML content.
          *        @param $attributes        (optional) The attributes for the form element.
          *        @param $options                (optional) The options for the elment.
          */
@@ -58,11 +58,14 @@
             $this->_type = 'span';
 
             // Set the value correctly
-            $this->setValue( $label );
+            $this->_customValue = $label;
 
             // Indicate if filters need to be applied
             $this->_applyFilters = false;
 
+            // Span don't have label
+            $this->_placeLabel = 'none';
+
             // Indicate we are a button type
             $this->_isButton = false;
 
@@ -92,7 +95,7 @@
             $attribs = array_merge( $this->_attributes, $attribs );
 
             // Get the HTML
-            return '<span' . YDForm::_convertToHtmlAttrib( $attribs ) . '>' . $this->_value . '</span>';
+            return '<span' . YDForm::_convertToHtmlAttrib( $attribs ) . '>' . $this->_customValue . '</span>';
 
         }
 



From ximian at mail.berlios.de  Sat May 19 20:26:14 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sat, 19 May 2007 20:26:14 +0200
Subject: [ydf-devel] r2431 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705191826.l4JIQE23007253@sheep.berlios.de>

Author: ximian
Date: 2007-05-19 20:26:05 +0200 (Sat, 19 May 2007)
New Revision: 2431

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php
Log:
fix: textareacounter is now compatible with latest span fix

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php	2007-05-19 18:24:38 UTC (rev 2430)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php	2007-05-19 18:26:05 UTC (rev 2431)
@@ -74,8 +74,7 @@
             $attributes['onkeyup'] = $attributes['onkeydown'];
             
             // Span counter
-            $span = new YDFormElement_Span( $form, $name . '_counter', '', $options['attributes'], $options['options'] );
-            $span->setValue( $options['maxlength'] );
+            $span = new YDFormElement_Span( $form, $name . '_counter', $options['maxlength'], $options['attributes'], $options['options'] );
             
             // Add counter span to the label
             $label .= $options['before'] . $span->toHtml() . $options['after'];



From ximian at mail.berlios.de  Sat May 19 20:54:29 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sat, 19 May 2007 20:54:29 +0200
Subject: [ydf-devel] r2432 - in YDFramework2.0/trunk/YDFramework2: .
	YDClasses
Message-ID: <200705191854.l4JIsTRE008838@sheep.berlios.de>

Author: ximian
Date: 2007-05-19 20:54:20 +0200 (Sat, 19 May 2007)
New Revision: 2432

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php
   YDFramework2.0/trunk/YDFramework2/YDF2_init.php
Log:
new feature: on setRequiresAuthentication it's now possible to define exceptions 
             ( actions that don't require authentication even when authentication check is set to true )

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php	2007-05-19 18:26:05 UTC (rev 2431)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php	2007-05-19 18:54:20 UTC (rev 2432)
@@ -56,6 +56,7 @@
             // Set up the request class
             $this->__isInitialized = true;
             $this->__requiresAuthentication = false;
+            $this->__requiresAuthenticationExceptions = array();
 
             // setup the callbacks object
             $this->_callbacks = new YDBase();
@@ -395,19 +396,23 @@
          *	This function indicates that this request needs authentication. If you change this to true, it will cause
          *	the Yellow Duck Framework to check the isAuthenticated function to see if you are authenticated or not.
          *
-         *	@param $bool	Boolean indicating if this request requires authentication or not.
+         *	@param $bool		Boolean indicating if this request requires authentication or not.
+         *	@param $exceptions	(Optional) Array of actions to be ignored even if authentication check is true.
          */
-        function setRequiresAuthentication( $bool ) {
+        function setRequiresAuthentication( $bool, $exceptions = array() ) {
             $this->__requiresAuthentication = ( $bool == true ) ? true : false;
+            $this->__requiresAuthenticationExceptions = array_map( 'strtolower', $exceptions );
         }
 
         /**
          *	This function will return true or false to indicate whether this class needs authentication or not.
          *
+         *  @param  $action  (Optional) Check authentication for a specific action name.
+         *
          *	@returns	This function returns true or false to indicate if this requires authentication or not.
          */
-        function getRequiresAuthentication() {
-            return ( $this->__requiresAuthentication == false ) ? false : true;
+        function getRequiresAuthentication( $action = '' ) {
+            return ( $this->__requiresAuthentication == true && ! in_array( $action, $this->__requiresAuthenticationExceptions ) );
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/YDF2_init.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2007-05-19 18:26:05 UTC (rev 2431)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2007-05-19 18:54:20 UTC (rev 2432)
@@ -669,8 +669,11 @@
                 );
             }
 
+            // Get the action name
+            $action = 'action' . $this->clsInst->getActionName();
+
             // Only if authentication is required
-            if ( $this->clsInst->getRequiresAuthentication() ) {
+            if ( $this->clsInst->getRequiresAuthentication( $action ) ) {
                 $result = $this->clsInst->isAuthenticated();
                 if ( $result ) {
                     $this->clsInst->authenticationSucceeded();
@@ -680,9 +683,6 @@
                 }
             }
 
-            // Get the action name
-            $action = 'action' . $this->clsInst->getActionName();
-
             // Check if the action exists
             if ( ! $this->clsInst->hasMethod( $action ) ) {
                 $this->clsInst->errorMissingAction( $action );



From ximian at mail.berlios.de  Fri May 25 00:17:06 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 25 May 2007 00:17:06 +0200
Subject: [ydf-devel] r2433 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705242217.l4OMH6SV014572@sheep.berlios.de>

Author: ximian
Date: 2007-05-25 00:16:58 +0200 (Fri, 25 May 2007)
New Revision: 2433

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php
Log:
an even better (i hope) url validation rule

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php	2007-05-19 18:54:20 UTC (rev 2432)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDValidateRules.php	2007-05-24 22:16:58 UTC (rev 2433)
@@ -713,35 +713,32 @@
             // Convert to lowercase and trim
             $val = strtolower( trim( $val ) );
 
+            // Check lenght
+            if ( strlen( $val ) > 255 ) return false;
+
             // Add http:// if needed
-            if ( substr( $val, 0, 7 ) != 'http://' ) {
+            if ( substr( $val, 0, 7 ) != 'http://' && substr( $val, 0, 8 ) != 'https://' ) {
                 $val = 'http://' . $val;
             }
 
-            // Check if it starts with http://
-            if ( ! YDStringUtil::startsWith( $val, 'http://' ) ) {
-                return false;
-            }
+            // Compute expression
+            $expression = '/^(https?:\/\/)' . 
+                          '?(([0-9a-z_!~*\'().&=+$%-]+:)?[0-9a-z_!~*\'().&=+$%-]+@)?' . // user@
+                          '(([0-9]{1,3}\.){3}[0-9]{1,3}' . // IP
+                          '|' . // or domain
+                          '([0-9a-z_!~*\'()-]+\.)*' . // tertiary domain(s), eg www.
+                          '([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\.' . // second level domain
+                          '[a-z]{2,6}' /*)'*/ . // first level domain, eg com
+                          '|' . // or localhost
+                          'localhost)' .
+                          '(:[0-9]{1,5})?' . // port
+                          '((\/?)|' . // a slash isn't required if there is no file name
+                          '(\/[0-9a-z_!~*\'().;?:@&=+$,%#-]+)+\/?)$/'; 
 
-            // Check the hostname
-            $host = substr( $val, 7 );
-            if ( strpos( $host, '/' ) !== false ) {
-                $host = trim( substr( $host, 0, strpos( $host, '/' ) ) );
-            }
-            if ( strpos( $host, ':' ) !== false ) {
-                $host = trim( substr( $host, 0, strpos( $host, ':' ) ) );
-            }
-
-            // Localhost is allowed
-            if ( $host == 'localhost' ) {
-                return true;
-            }
-
-            // Check that we have at least a dot
-            return ( strpos( $host, '.' ) === false ) ? false : true;
-
+             return YDValidateRules::regex( $val, $expression );
         }
 
+
         /**
          *	This function returns true if the variable matches captcha image
          *



From ximian at mail.berlios.de  Fri May 25 00:24:25 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 25 May 2007 00:24:25 +0200
Subject: [ydf-devel] r2434 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705242224.l4OMOPVh015162@sheep.berlios.de>

Author: ximian
Date: 2007-05-25 00:24:18 +0200 (Fri, 25 May 2007)
New Revision: 2434

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
Log:
new feature: added support for multiple paths in YDTemplate. 
             This way, YDTemplate is smart to fetch or display a template (searching directories for a valid path)

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2007-05-24 22:16:58 UTC (rev 2433)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2007-05-24 22:24:18 UTC (rev 2434)
@@ -157,6 +157,21 @@
                 // Add custom javascript
                 $this->register_outputfilter( array( &$this, "__assignHeadCode") );
 
+                // check for multiple directories to choose the one that has the file
+                if ( is_array( $this->template_dir ) ){
+
+                    if ( strpos( $file, '.' ) === false ){
+                        $file = $file . '.tpl';
+                    }
+
+                    foreach( $this->template_dir as $dir ){
+                        if ( is_file ( $dir . '/' . $file ) ){
+                            $this->template_dir = realpath( $dir );
+                            break;
+                        }
+                    }
+                }
+
                 // Get the template name
                 $tplName = $this->_getTemplateName( $file );
 
@@ -715,4 +730,4 @@
         return sprintf( '<a href="%s">%s</a>', $url, $title );
     }
 
-?>
\ No newline at end of file
+?>



From ximian at mail.berlios.de  Fri May 25 00:29:56 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 25 May 2007 00:29:56 +0200
Subject: [ydf-devel] r2435 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705242229.l4OMTuNE015410@sheep.berlios.de>

Author: ximian
Date: 2007-05-25 00:29:49 +0200 (Fri, 25 May 2007)
New Revision: 2435

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php
Log:
new feature: captcha form element can be better integrated in ajax.
             Now it's possible to reset the image ( old code is deleted from session var and users can see another code to fill )

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php	2007-05-24 22:24:18 UTC (rev 2434)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Captcha.php	2007-05-24 22:29:49 UTC (rev 2435)
@@ -154,7 +154,7 @@
          *	@param $attribute	(optional) Element attribute
          *	@param $options		(optional) The options for the elment.
          */
-        function setJS( $result, $attribute = null, $options = null ){ 
+        function setJS( $result = '', $attribute = null, $options = null ){ 
 
              // if atribute is not defined we must create the default one
              if ( is_null( $attribute ) ) $attribute = 'value';
@@ -163,7 +163,17 @@
              $result = htmlspecialchars( $result );
 
              // assign result
-             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+             $js = '';
+
+             // add text result, if exists
+             if ( is_string( $result ) && $result != '' ){
+                 $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+             }
+
+             // set a new captcha image
+             $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) . '_captcha").src = "' . $this->_url . '";';
+
+             return $js;
         }
 
     }



From ximian at mail.berlios.de  Fri May 25 00:32:55 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 25 May 2007 00:32:55 +0200
Subject: [ydf-devel] r2436 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200705242232.l4OMWtU8021186@sheep.berlios.de>

Author: ximian
Date: 2007-05-25 00:32:41 +0200 (Fri, 25 May 2007)
New Revision: 2436

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
Log:
optimization: on file form element we only need to include Filesystem lib when needed ( on validation )
              (and not when just rendering this element)

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2007-05-24 22:29:49 UTC (rev 2435)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2007-05-24 22:32:41 UTC (rev 2436)
@@ -32,7 +32,6 @@
 
     // Includes
     include_once( YD_DIR_HOME_CLS . '/YDForm.php');
-    include_once( YD_DIR_HOME_CLS . '/YDFileSystem.php');
 
     /**
      *	This is the class that define a file upload form element.
@@ -119,6 +118,8 @@
             //@chmod( realpath( $dir ), 0700 );
             //@chmod( $path, 0700 );
 
+            include_once( YD_DIR_HOME_CLS . '/YDFileSystem.php');
+
             // Provide an interface to some more useful information on the file
             $this->fileo = new YDFSFile( $path );
 



From ximian at mail.berlios.de  Fri May 25 12:45:44 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Fri, 25 May 2007 12:45:44 +0200
Subject: [ydf-devel] r2437 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705251045.l4PAjiEd014061@sheep.berlios.de>

Author: ximian
Date: 2007-05-25 12:45:34 +0200 (Fri, 25 May 2007)
New Revision: 2437

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
new method: YDForm::getElementsByType that returns all elements of a given type

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-24 22:32:41 UTC (rev 2436)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-25 10:45:34 UTC (rev 2437)
@@ -502,6 +502,26 @@
 
 
         /**
+         *  This function returns all elements of a given type.
+         *
+         *  @param $type    Form element type.
+         *
+         *  @returns    Array of form elements
+         */
+        function & getElementsByType( $type ){
+
+            $elements = array();
+            foreach( $this->_elements as $name => $el ){
+                if ( $el->getType() == $type ){
+                    array_push( $elements, & $this->_elements[ $name ] );
+                }
+            }
+
+            return $elements;
+        }
+
+
+        /**
          *  This function returns all form elements
          *
          *  @returns    An array with form elements



From ximian at mail.berlios.de  Sat May 26 19:32:14 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sat, 26 May 2007 19:32:14 +0200
Subject: [ydf-devel] r2438 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705261732.l4QHWE4I000140@sheep.berlios.de>

Author: ximian
Date: 2007-05-26 19:32:01 +0200 (Sat, 26 May 2007)
New Revision: 2438

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
make YDForm::setHtmlRequired end optional.
     This makes the required reset $form->setHtmlRequired( '' ) more intuitive ( instead of $form->setHtmlRequired( '', '' ) )

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-25 10:45:34 UTC (rev 2437)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2007-05-26 17:32:01 UTC (rev 2438)
@@ -223,9 +223,9 @@
          *  you use the default toHtml function.
          *
          *  @param $start   The HTML that should be added before the label.
-         *  @param $end     The HTML that should be added after the label.
+         *  @param $end     (Optional) The HTML that should be added after the label.
          */
-        function setHtmlRequired( $start, $end ) {
+        function setHtmlRequired( $start, $end = '' ) {
             $this->_htmlRequiredStart = $start;
             $this->_htmlRequiredEnd = $end;
         }



From ximian at mail.berlios.de  Sun May 27 20:56:53 2007
From: ximian at mail.berlios.de (ximian at mail.berlios.de)
Date: Sun, 27 May 2007 20:56:53 +0200
Subject: [ydf-devel] r2439 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200705271856.l4RIurSv025259@sheep.berlios.de>

Author: ximian
Date: 2007-05-27 20:56:43 +0200 (Sun, 27 May 2007)
New Revision: 2439

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDUrl.php
Log:
new method: YDUrl::deleteQueryVars() to deletes all vars

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDUrl.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDUrl.php	2007-05-26 17:32:01 UTC (rev 2438)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDUrl.php	2007-05-27 18:56:43 UTC (rev 2439)
@@ -423,7 +423,16 @@
             unset( $this->_url_parsed['query'][$name] );
         }
 
+
         /**
+         *	This function will delete the indicated query variable if it exists.
+         */
+        function deleteQueryVars() {
+            $this->_url_parsed['query'] = array();
+        }
+
+
+        /**
          *	Function to get the contents of the URL. It will get the contents using Gzip compression if possible in
          *	order to save bandwidth. It uses the HTTP Client class from Simon Willison to do the dirty work.
          *



