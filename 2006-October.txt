From pclaerhout at mail.berlios.de  Mon Oct  2 10:35:47 2006
From: pclaerhout at mail.berlios.de (pclaerhout at BerliOS)
Date: Mon, 2 Oct 2006 10:35:47 +0200
Subject: [ydf-devel] r2171 - in YDFramework2.0/trunk/YDFramework2: .
	YDClasses YDClasses/YDFormElements addons/YDBBCode javascript
Message-ID: <200610020835.k928ZlPo016050@sheep.berlios.de>

Author: pclaerhout
Date: 2006-10-02 10:35:47 +0200 (Mon, 02 Oct 2006)
New Revision: 2171

Added:
   YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser.class.php
   YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser_bbcode.class.php
   YDFramework2.0/trunk/YDFramework2/javascript/
   YDFramework2.0/trunk/YDFramework2/javascript/bbtextarea.js
Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php
   YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/YDBBCode.php
Log:
Rewrote the BBCode addon and rewrote the javascript that inserts bbcodes in a bbtextarea form element.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php	2006-10-02 08:35:47 UTC (rev 2171)
@@ -149,27 +149,7 @@
             $out = '';
             if ( sizeof( $this->_buttons ) > 0 ) {
                 if ( ! defined( 'YD_BBTA_MAINSCRIPT' ) ) {
-                    $out .= '<script type="text/javascript">';
-                    $out .= '	function AddText( element, startTag, defaultText, endTag ) {';
-                    $out .= '		objElement = document.getElementById( element );';
-                    $out .= '		if ( objElement.createTextRange ) {';
-                    $out .= '			var text;';
-                    $out .= '			objElement.focus( objElement.caretPos);';
-                    $out .= '			objElement.caretPos = document.selection.createRange().duplicate();';
-                    $out .= '			if ( objElement.caretPos.text.length > 0 ) {' . "\n";
-                    $out .= '				objElement.caretPos.text = startTag + objElement.caretPos.text + endTag;';
-                    $out .= '			} else {';
-                    $out .= '				objElement.caretPos.text = startTag + defaultText + endTag;';
-                    $out .= '			}';
-                    $out .= '		} else {';
-                    $out .= '			objElement.value += startTag + defaultText + endTag;';
-                    $out .= '		}';
-                    $out .= '	}';
-                    $out .= '	function openWin( url, name, opts ) {';
-                    $out .= '		win = window.open( url, name, opts );';
-                    $out .= '		win.focus();';
-                    $out .= '	}';
-                    $out .= '</script>';
+                    $out .= '<script src="' . YD_SELF_SCRIPT . '?do=JsBBTextArea" type="text/javascript"></script>';
                     define( 'YD_BBTA_MAINSCRIPT', 1 );
                 }
                 $out .= '<script type="text/javascript">';

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDRequest.php	2006-10-02 08:35:47 UTC (rev 2171)
@@ -614,6 +614,15 @@
             unset( $_COOKIE[$name] );
         }
 
+        /**
+         *  Action to include the JavaScript for the bbtextarea field.
+         *
+         *  @internal
+         */
+        function actionJsBBTextArea() {
+            header( 'Content-Type: application/x-javascript' );
+            die( readfile( dirname( __FILE__ ) . '/../javascript/bbtextarea.js' ) );
+        }
 
     }
 

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/YDBBCode.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/YDBBCode.php	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/YDBBCode.php	2006-10-02 08:35:47 UTC (rev 2171)
@@ -26,6 +26,13 @@
         die( 'Yellow Duck Framework is not loaded.' );
     }
 
+    // Includes
+    YDInclude( dirname( __FILE__ ) . '/stringparser_bbcode.class.php' );
+
+    // Configure the default for this class
+    YDConfig::set( 'YD_BBCODE_SMILIES_DIR', null, false );
+    YDConfig::set( 'YD_BBCODE_SMILIES_URL', null, false );
+
     /**
      *	This class implements a BBCode parser. By default, it supports a number of standard codes that can be
      *	implemented. The following codes are supported by default: img, url, mail, email, color, b, i, u, code, quote, p
@@ -46,31 +53,42 @@
             $this->_copyright = '(c) Copyright 2002-2005 Pieter Claerhout';
             $this->_description = 'This class implements a BBCode parser. By default, it supports a number of standard '
                                . 'codes that can be implemented. The following codes are supported by default: img, '
-                               . 'url, mail, email, color, b, i, u, code, quote, p';
+                               . 'url, mail, email, color, b, i, u, code, quote, p, size';
 
-            // Conversions
-            $this->_conversions = array();
+            // Create a new parser class
+            $this->parser = new StringParser_BBCode();
 
-            // Add the initial conversions
-            $this->addRule( "/\[[bB]\](.+?)\[\/[bB]\]/s", '<b>\\1</b>' );
-            $this->addRule( "/\[[iI]\](.+?)\[\/[iI]\]/s", '<i>\\1</i>' );
-            $this->addRule( "/\[[uU]\](.+?)\[\/[uU]\]/s", '<u>\\1</u>' );
-            $this->addRule( "/\[[pP]\](.+?)\[\/[pP]\]/s", '<p>\\1</p>' );
-            $this->addRule( "/\[code\](.+?)\[\/code\]/s", '<code>\\1</code>' );
-            $this->addRule( "/\[quote\](.+?)\[\/quote\]/s", '<blockquote>\\1</blockquote>' );
-            $this->addRule( "/\[url=([^<> \n]+?)\](.+?)\[\/url\]/i", '<a href="\\1">\\2</a>' );
-            $this->addRule( "/\[url\]([^<> \n]+?)\[\/url\]/i", '<a href="\\1">\\1</a>' );
-            $this->addRule( "/\[mail=([^<> \n]+?)\](.+?)\[\/mail\]/i", '<a href="mailto:\\1">\\2</a>' );
-            $this->addRule( "/\[mail\]([^<> \n]+?)\[\/mail\]/i", '<a href="mailto:\\1">\\1</a>' );
-            $this->addRule( "/\[email=([^<> \n]+?)\](.+?)\[\/email\]/i", '<a href="mailto:\\1">\\2</a>' );
-            $this->addRule( "/\[email\]([^<> \n]+?)\[\/email\]/i", '<a href="mailto:\\1">\\1</a>' );
-            $this->addRule( "/\[img=([^<> \n]+?)\](.+?)\[\/img\]/i", '<a href="\\1"><img border="0" src="\\2" alt="\\2" /></a>' );
-            $this->addRule( "/\[img\]([^<> \n]+?)\[\/img\]/i", '<img border="0" src="\\1" alt="\\1" />' );
-            $this->addRule( "/\[color=([^<> \n]+?)\](.+?)\[\/color\]/i", '<font color="\\1">\\2</font>' );
-            $this->addRule( "/\[quote](.+?)\[\/quote\]/msi", '<blockquote>\\1</blockquote>' );
-            $this->addRule( "/\[quote=\"([^<> \n]+?)\"\](.+?)\[\/quote\]/msi", '<blockquote><b>\\1</b><br/>\\2</blockquote>' );
-            $this->addRule( "/\[quote=([^<> \n]+?)\](.+?)\[\/quote\]/msi", '<blockquote><b>\\1</b><br/>\\2</blockquote>' );
+            // Make tags not case sensitive and allow mixed attributes
+            $this->parser->setGlobalCaseSensitive( false );
+            $this->parser->setMixedAttributeTypes( true );
 
+            // Register the codes
+            $this->addCode( 'b', 'simple_replace', 'inline', null, array('start_tag'=>'<b>', 'end_tag'=>'</b>') );
+            $this->addCode( 'i', 'simple_replace', 'inline', null, array('start_tag'=>'<i>', 'end_tag'=>'</i>') );
+            $this->addCode( 'u', 'simple_replace', 'inline', null, array('start_tag'=>'<u>', 'end_tag'=>'</u>') );
+            $this->addCode( 'p', 'simple_replace', 'inline', null, array('start_tag'=>'<p>', 'end_tag'=>'</p>') );
+            $this->addCode( 'code', 'usecontent', 'block', array( &$this, 'doTagCode' ) );
+            $this->addCode( 'color', 'callback_replace', 'inline', array( &$this, 'doTagColor' ) );
+            $this->addCode( 'size', 'callback_replace', 'inline', array( &$this, 'doTagSize' ) );
+            $this->addCode( 'quote', 'callback_replace', 'block', array( &$this, 'doTagQuote' ) );
+            $this->addCode( 'url', 'usecontent?', 'link', array( &$this, 'doTagUrl' ), array('usecontent_param'=>'default') );
+            $this->addCode( 'link', 'usecontent?', 'link', array( &$this, 'doTagUrl' ), array('usecontent_param'=>'default') );
+            $this->addCode( 'mail', 'usecontent?', 'link', array( &$this, 'doTagEmail' ), array('usecontent_param'=>'default') );
+            $this->addCode( 'email', 'usecontent?', 'link', array( &$this, 'doTagEmail' ), array('usecontent_param'=>'default') );
+            $this->addCode( 'img', 'usecontent?', 'image', array( &$this, 'doTagImg' ), array('usecontent_param'=>'default') );
+            $this->addCode( 'hr', 'simple_replace', 'inline', null, array('start_tag'=>'<hr />','end_tag'=>'') );
+
+            // Add list handling
+            $this->addCode( 'list', 'simple_replace', 'list', null, array('start_tag'=>'<ul>', 'end_tag'=>'</ul>') );
+            $this->addCode( '*', 'simple_replace', 'listitem', null, array('start_tag'=>'<li>', 'end_tag'=>'</li>') );
+
+            // Add some parser flags
+            $this->parser->setCodeFlag( '*', 'closetag', BBCODE_CLOSETAG_OPTIONAL );
+            $this->parser->setCodeFlag( 'hr', 'closetag', BBCODE_CLOSETAG_FORBIDDEN );
+            $this->parser->setCodeFlag( 'list', 'opentag.before.newline', BBCODE_NEWLINE_DROP );
+            $this->parser->setCodeFlag( 'list', 'closetag.before.newline', BBCODE_NEWLINE_DROP );
+            $this->parser->setCodeFlag( 'hr', 'opentag.before.newline', BBCODE_NEWLINE_DROP );
+
             // Attributes to convert links
             $this->_convertLinks = array(
                 "#([\t\r\n ])([a-z0-9]+?){1}://([\w\-]+\.([\w\-]+\.)*[\w]+(:[0-9]+)?(/[^ \"\n\r\t<]*)?)#i" => '\1[url]\2://\3[/url]',
@@ -78,19 +96,232 @@
                 "#([\n ])([a-z0-9\-_.]+?)@([\w\-]+\.([\w\-\.]+\.)*[\w]+)#i" => "\\1[email]\\2@\\3[/email]"
             );
 
+            // The list of smilies that this class supports
+            $this->smilies = array(
+                ':D' => 'icon_biggrin.gif',
+                ':-D' => 'icon_biggrin.gif',
+                ':grin:' => 'icon_biggrin.gif',
+                ':)' => 'icon_smile.gif',
+                ':-)' => 'icon_smile.gif',
+                ':smile:' => 'icon_smile.gif',
+                ':(' => 'icon_sad.gif',
+                ':-(' => 'icon_sad.gif',
+                ':sad:' => 'icon_sad.gif',
+                ':o' => 'icon_surprised.gif',
+                ':-o' => 'icon_surprised.gif',
+                ':eek:' => 'icon_surprised.gif',
+                ':shock:' => 'icon_eek.gif',
+                ':?' => 'icon_confused.gif',
+                ':-?' => 'icon_confused.gif',
+                ':???:' => 'icon_confused.gif',
+                '8)' => 'icon_cool.gif',
+                '8-)' => 'icon_cool.gif',
+                ':cool:' => 'icon_cool.gif',
+                ':lol:' => 'icon_lol.gif',
+                ':x' => 'icon_mad.gif',
+                ':-x' => 'icon_mad.gif',
+                ':mad:' => 'icon_mad.gif',
+                ':P' => 'icon_razz.gif',
+                ':-P' => 'icon_razz.gif',
+                ':razz:' => 'icon_razz.gif',
+                ':oops:' => 'icon_redface.gif',
+                ':cry:' => 'icon_cry.gif',
+                ':evil:' => 'icon_evil.gif',
+                ':twisted:' => 'icon_twisted.gif',
+                ':roll:' => 'icon_rolleyes.gif',
+                ':wink:' => 'icon_wink.gif',
+                ';)' => 'icon_wink.gif',
+                ';-)' => 'icon_wink.gif',
+                ':!:' => 'icon_exclaim.gif',
+                ':?:' => 'icon_question.gif',
+                ':idea:' => 'icon_idea.gif',
+                ':arrow:' => 'icon_arrow.gif',
+                ':|' => 'icon_neutral.gif',
+                ':-|' => 'icon_neutral.gif',
+                ':neutral:' => 'icon_neutral.gif',
+                ':mrgreen:' => 'icon_mrgreen.gif',
+                ':--' => 'icon_mrgreen.gif',
+            );
+
         }
 
         /**
-         *	You can use this function to add a conversion rule to the parser.
+         *  Function to add a new code to the parser.
          *
-         *	@param $regex	Regular expression matching the tags.
-         *	@param $replace	The replacement for the tag regex.
+         *  @param  $code           The code to register
+         *  @param  $type           The type of the code to register
+         *  @param  $content_type   The content type of the code to register
+         *  @param  $callback       The callback function to handle the code
+         *  @param  $params         (optional) The parameters for the callback function.
          */
-        function addRule( $regex, $replace ) {
-            $this->_conversions[ $regex ] = $replace;
+        function addCode( $code, $type, $content_type, $callback=null, $params=array() ) {
+            $this->parser->addCode(
+                $code, $type, $callback, $params, $content_type, array( 'block', 'inline', 'listitem', 'list', 'link' ), array( 'image' )
+            );
         }
 
         /**
+         *  Function to handle the code tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagCode( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && strtolower( $attributes['default'] == 'bbcode' ) ) {
+                    $content = str_replace( '[', '<font color="blue">[', $content );
+                    $content = str_replace( ']', ']</font>', $content );
+                }
+                return '<code>' . $content . '</code>';
+            }
+        }
+
+        /**
+         *  Function to handle the color tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagColor( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && ! empty( $attributes['default'] ) ) {
+                    return '<font color="' . $attributes['default'] . '">' . $content . '</font>';
+                } else {
+                    return $content;
+                }
+            }
+        }
+
+        /**
+         *  Function to handle the size tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagSize( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && is_numeric( $attributes['default'] ) ) {
+                    return '<font size="' . $attributes['default'] . '">' . $content . '</font>';
+                } else {
+                    return $content;
+                }
+            }
+        }
+
+        /**
+         *  Function to handle the quote tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagQuote( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && ! empty( $attributes['default'] ) ) {
+                    $content = '<b>' . $attributes['default'] . ' ' . t('wrote') . "</b>\n" . $content;
+                }
+                return '<blockquote>' . $content . '</blockquote>';
+            }
+        }
+
+        /**
+         *  Function to handle the url tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagUrl( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && ! empty( $attributes['default'] ) ) {
+                    return '<a href="' . $attributes['default'] . '">' . $content . "</a>";
+                } else {
+                    return '<a href="' . $content . '">' . $content . "</a>";
+                }
+            }
+        }
+
+        /**
+         *  Function to handle the email tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagEmail( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && ! empty( $attributes['default'] ) ) {
+                    return '<a href="mailto:' . $attributes['default'] . '">' . $content . "</a>";
+                } else {
+                    return '<a href="mailto:' . $content . '">' . $content . "</a>";
+                }
+            }
+        }
+
+        /**
+         *  Function to handle the img tag.
+         *
+         *  @params $action         The action that is executed.
+         *  @params $attributes     The attributes specified in the tag
+         *  @params $content        The content value of the tag.
+         *  @params $params         The parameters for the tag
+         *  @params $node_object    A reference to the node object.
+         *
+         *  @returns    The html version of the tag.
+         */
+        function doTagImg( $action, $attributes, $content, $params, $node_object ) {
+            if ( $action == 'validate' ) {
+                return true;
+            } else {
+                if ( isset( $attributes['default'] ) && ! empty( $attributes['default'] ) ) {
+                    $url = $attributes['default'];
+                } else {
+                    $url = $content;
+                }
+                return '<img src="' . preg_replace( '/\[[A-Za-z]+\]/i', '', $url ) . '" alt="' . $content . '" />';
+            }
+        }
+
+        /**
          *	This function will highlight links in the given text.
          *
          *	@remarks
@@ -139,9 +370,17 @@
                 $data = str_replace( '>', '&gt;', $data );
             }
 
+            // Fix common problems
+            $data = str_replace( "\r\n", "\n", $data );
+            $data = str_replace( "\r", "\n", $data );
+            $data = str_replace( "[/quote]\n\n", "[/quote]\n", $data );
+
             // Convert the tags
-            $data = preg_replace( array_keys( $this->_conversions ), array_values( $this->_conversions ), $data  );
+            $data = $this->parser->parse( $data );
 
+            // Strip the leftover tags
+            $data = trim( preg_replace( '/\[\/[a-z]+\]/i', '', $data ) );
+
             // Open http links in a new window
             $data = str_replace( ' href="http://', ' target="_blank" href="http://', $data );
 
@@ -150,6 +389,15 @@
                 $data = nl2br( trim( $data ) );
             }
 
+            // Convert smilies if needed
+            $smilies_path = YDConfig::get( 'YD_BBCODE_SMILIES_DIR', '' );
+            $smilies_url = YDConfig::get( 'YD_BBCODE_SMILIES_URL', '' );
+            if ( is_dir( $smilies_path ) ) {
+                foreach ( $this->smilies as $smilie=>$file ) {
+                    $data = str_replace( $smilie, '<img src="' . $smilies_url . '/' . $file . '" width="15" height="15" />', $data );
+                }
+            }
+
             // Make links absolute if needed
             if ( ! is_null( $baseUrl ) ) {
                 include_once( dirname( __FILE__ ) . '/../../YDClasses/YDUrl.php' );

Added: YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser.class.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser.class.php	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser.class.php	2006-10-02 08:35:47 UTC (rev 2171)
@@ -0,0 +1,1546 @@
+<?php
+/**
+ * Generic string parsing infrastructure
+ *
+ * These classes provide the means to parse any kind of string into a tree-like
+ * memory structure. It would e.g. be possible to create an HTML parser based
+ * upon this class.
+ * 
+ * Version: 0.3.1
+ *
+ * @author Christian Seiler <spam at christian-seiler.de>
+ * @copyright Christian Seiler 2006
+ * @package stringparser
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of either:
+ *
+ *  a) the GNU General Public License as published by the Free
+ *  Software Foundation; either version 1, or (at your option) any
+ *  later version, or
+ *
+ *  b) the Artistic License as published by Larry Wall, either version 2.0,
+ *     or (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
+ *  the GNU General Public License or the Artistic License for more details.
+ *
+ *  You should have received a copy of the Artistic License with this Kit,
+ *  in the file named "Artistic.clarified".  If not, I'll be glad to provide
+ *  one.
+ *
+ *  You should also have received a copy of the GNU General Public License
+ *  along with this program in the file named "COPYING"; if not, write to
+ *  the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA 02111-1307, USA.
+ */
+
+/**
+ * String parser mode: Search for the next character
+ * @see StringParser::_parserMode
+ */
+define ('STRINGPARSER_MODE_SEARCH', 1);
+/**
+ * String parser mode: Look at each character of the string
+ * @see StringParser::_parserMode
+ */
+define ('STRINGPARSER_MODE_LOOP', 2);
+/**
+ * Filter type: Prefilter
+ * @see StringParser::addFilter, StringParser::_prefilters
+ */
+define ('STRINGPARSER_FILTER_PRE', 1);
+/**
+ * Filter type: Postfilter
+ * @see StringParser::addFilter, StringParser::_postfilters
+ */
+define ('STRINGPARSER_FILTER_POST', 2);
+
+/**
+ * Generic string parser class
+ *
+ * This is an abstract class for any type of string parser.
+ *
+ * @package stringparser
+ */
+class StringParser {
+	/**
+	 * String parser mode
+	 *
+	 * There are two possible modes: searchmode and loop mode. In loop mode
+	 * every single character is looked at in a loop and it is then decided
+	 * what action to take. This is the most straight-forward approach to
+	 * string parsing but due to the nature of PHP as a scripting language,
+	 * it can also cost performance. In search mode the class posseses a
+	 * list of relevant characters for parsing and uses the
+	 * {@link PHP_MANUAL#strpos strpos} function to search for the next
+	 * relevant character. The search mode will be faster than the loop mode
+	 * in most circumstances but it is also more difficult to implement.
+	 * The subclass that does the string parsing itself will define which
+	 * mode it will implement.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_MODE_SEARCH, STRINGPARSER_MODE_LOOP
+	 */
+	var $_parserMode = STRINGPARSER_MODE_SEARCH;
+	
+	/**
+	 * Raw text
+	 * @access protected
+	 * @var string
+	 */
+	var $_text = '';
+	
+	/**
+	 * Parse stack
+	 * @access protected
+	 * @var array
+	 */
+	var $_stack = array ();
+	
+	/**
+	 * Current position in raw text
+	 * @access protected
+	 * @var integer
+	 */
+	var $_cpos = -1;
+	
+	/**
+	 * Root node
+	 * @access protected
+	 * @var mixed
+	 */
+	var $_root = null;
+	
+	/**
+	 * Length of the text
+	 * @access protected
+	 * @var integer
+	 */
+	var $_length = -1;
+	
+	/**
+	 * Flag if this object is already parsing a text
+	 *
+	 * This flag is to prevent recursive calls to the parse() function that
+	 * would cause very nasty things.
+	 *
+	 * @access protected
+	 * @var boolean
+	 */
+	var $_parsing = false;
+	
+	/**
+	 * Strict mode
+	 *
+	 * Whether to stop parsing if a parse error occurs.
+	 *
+	 * @access public
+	 * @var boolean
+	 */
+	var $strict = false;
+	
+	/**
+	 * Characters or strings to look for
+	 * @access protected
+	 * @var array
+	 */
+	var $_charactersSearch = array ();
+	
+	/**
+	 * Characters currently allowed
+	 *
+	 * Note that this will only be evaluated in loop mode; in search mode
+	 * this would ruin every performance increase. Note that only single
+	 * characters are permitted here, no strings. Please also note that in
+	 * loop mode, {@link StringParser::_charactersSearch _charactersSearch}
+	 * is evaluated before this variable.
+	 *
+	 * If in strict mode, parsing is stopped if a character that is not
+	 * allowed is encountered. If not in strict mode, the character is
+	 * simply ignored.
+	 *
+	 * @access protected
+	 * @var array
+	 */
+	var $_charactersAllowed = array ();
+	
+	/**
+	 * Current parser status
+	 * @access protected
+	 * @var int
+	 */
+	var $_status = 0;
+	
+	/**
+	 * Prefilters
+	 * @access protected
+	 * @var array
+	 */
+	var $_prefilters = array ();
+	
+	/**
+	 * Postfilters
+	 * @access protected
+	 * @var array
+	 */
+	var $_postfilters = array ();
+	
+	/**
+	 * Recently reparsed?
+	 * @access protected
+	 * @var bool
+	 */
+	var $_recentlyReparsed = false;
+	 
+	/**
+	 * Constructor
+	 *
+	 * @access public
+	 */
+	function StringParser () {
+	}
+	
+	/**
+	 * Add a filter
+	 *
+	 * @access public
+	 * @param int $type The type of the filter
+	 * @param mixed $callback The callback to call
+	 * @return bool
+	 * @see STRINGPARSER_FILTER_PRE, STRINGPARSER_FILTER_POST
+	 */
+	function addFilter ($type, $callback) {
+		// make sure the function is callable
+		if (!is_callable ($callback)) {
+			return false;
+		}
+		
+		switch ($type) {
+			case STRINGPARSER_FILTER_PRE:
+				$this->_prefilters[] = $callback;
+				break;
+			case STRINGPARSER_FILTER_POST:
+				$this->_postfilters[] = $callback;
+				break;
+			default:
+				return false;
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Remove all filters
+	 *
+	 * @access public
+	 * @param int $type The type of the filter or 0 for all
+	 * @return bool
+	 * @see STRINGPARSER_FILTER_PRE, STRINGPARSER_FILTER_POST
+	 */
+	function clearFilters ($type = 0) {
+		switch ($type) {
+			case 0:
+				$this->_prefilters = array ();
+				$this->_postfilters = array ();
+				break;
+			case STRINGPARSER_FILTER_PRE:
+				$this->_prefilters = array ();
+				break;
+			case STRINGPARSER_FILTER_POST:
+				$this->_postfilters = array ();
+				break;
+			default:
+				return false;
+		}
+		return true;
+	}
+	
+	/**
+	 * This function parses the text
+	 *
+	 * @access public
+	 * @param string $text The text to parse
+	 * @return mixed Either the root object of the tree if no output method
+	 *               is defined, the tree reoutput to e.g. a string or false
+	 *               if an internal error occured, such as a parse error if
+	 *               in strict mode or the object is already parsing a text.
+	 */
+	function parse ($text) {
+		if ($this->_parsing) {
+			return false;
+		}
+		$this->_parsing = true;
+		$this->_text = $this->_applyPrefilters ($text);
+		$this->_output = null;
+		$this->_length = strlen ($this->_text);
+		$this->_cpos = 0;
+		unset ($this->_stack);
+		$this->_stack = array ();
+		if (is_object ($this->_root)) {
+			StringParser_Node::destroyNode ($this->_root);
+		}
+		unset ($this->_root);
+		$this->_root =& new StringParser_Node_Root ();
+		$this->_stack[0] =& $this->_root;
+		
+		$this->_parserInit ();
+		
+		$finished = false;
+		
+		while (!$finished) {
+			switch ($this->_parserMode) {
+				case STRINGPARSER_MODE_SEARCH:
+					$res = $this->_searchLoop ();
+					if (!$res) {
+						$this->_parsing = false;
+						return false;
+					}
+					break;
+				case STRINGPARSER_MODE_LOOP:
+					$res = $this->_loop ();
+					if (!$res) {
+						$this->_parsing = false;
+						return false;
+					}
+					break;
+				default:
+					$this->_parsing = false;
+					return false;
+			}
+			
+			$res = $this->_closeRemainingBlocks ();
+			if (!$res) {
+				if ($this->strict) {
+					$this->_parsing = false;
+					return false;
+				} else {
+					$res = $this->_reparseAfterCurrentBlock ();
+					if (!$res) {
+						$this->_parsing = false;
+						return false;
+					}
+					continue;
+				}
+			}
+			$finished = true;
+		}
+		
+		$res = $this->_modifyTree ();
+		
+		if (!$res) {
+			$this->_parsing = false;
+			return false;
+		}
+		
+		$res = $this->_outputTree ();
+		
+		if (!$res) {
+			$this->_parsing = false;
+			return false;
+		}
+		
+		if (is_null ($this->_output)) {
+			$root =& $this->_root;
+			unset ($this->_root);
+			$this->_root = null;
+			while (count ($this->_stack)) {
+				unset ($this->_stack[count($this->_stack)-1]);
+			}
+			$this->_stack = array ();
+			$this->_parsing = false;
+			return $root;
+		}
+		
+		$res = StringParser_Node::destroyNode ($this->_root);
+		if (!$res) {
+			$this->_parsing = false;
+			return false;
+		}
+		unset ($this->_root);
+		$this->_root = null;
+		while (count ($this->_stack)) {
+			unset ($this->_stack[count($this->_stack)-1]);
+		}
+		$this->_stack = array ();
+		
+		$this->_parsing = false;
+		return $this->_output;
+	}
+	
+	/**
+	 * Apply prefilters
+	 *
+	 * It is possible to specify prefilters for the parser to do some
+	 * manipulating of the string beforehand.
+	 */
+	function _applyPrefilters ($text) {
+		foreach ($this->_prefilters as $filter) {
+			if (is_callable ($filter)) {
+				$ntext = call_user_func ($filter, $text);
+				if (is_string ($ntext)) {
+					$text = $ntext;
+				}
+			}
+		}
+		return $text;
+	}
+	
+	/**
+	 * Apply postfilters
+	 *
+	 * It is possible to specify postfilters for the parser to do some
+	 * manipulating of the string afterwards.
+	 */
+	function _applyPostfilters ($text) {
+		foreach ($this->_postfilters as $filter) {
+			if (is_callable ($filter)) {
+				$ntext = call_user_func ($filter, $text);
+				if (is_string ($ntext)) {
+					$text = $ntext;
+				}
+			}
+		}
+		return $text;
+	}
+	
+	/**
+	 * Abstract method: Manipulate the tree
+	 * @access protected
+	 * @return bool
+	 */
+	function _modifyTree () {
+		return true;
+	}
+	
+	/**
+	 * Abstract method: Output tree
+	 * @access protected
+	 * @return bool
+	 */
+	function _outputTree () {
+		// this could e.g. call _applyPostfilters
+		return true;
+	}
+	
+	/**
+	 * Restart parsing after current block
+	 *
+	 * To achieve this the current top stack object is removed from the
+	 * tree. Then the current item
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _reparseAfterCurrentBlock () {
+		// this should definitely not happen!
+		if (($stack_count = count ($this->_stack)) < 2) {
+			return false;
+		}
+		$topelem =& $this->_stack[$stack_count-1];
+		
+		$node_parent =& $topelem->_parent;
+		// remove the child from the tree
+		$res = $node_parent->removeChild ($topelem, false);
+		if (!$res) {
+			return false;
+		}
+		$res = $this->_popNode ();
+		if (!$res) {
+			return false;
+		}
+		
+		// now try to get the position of the object
+		if ($topelem->occurredAt < 0) {
+			return false;
+		}
+		// HACK: could it be necessary to set a different status
+		// if yes, how should this be achieved? Another member of
+		// StringParser_Node?
+		$this->_setStatus (0);
+		$res = $this->_appendText ($this->_text{$topelem->occurredAt});
+		if (!$res) {
+			return false;
+		}
+		
+		$this->_cpos = $topelem->occurredAt + 1;
+		$this->_recentlyReparsed = true;
+		
+		return true;
+	}
+	
+	/**
+	 * Abstract method: Close remaining blocks
+	 * @access protected
+	 */
+	function _closeRemainingBlocks () {
+		// everything closed
+		if (count ($this->_stack) == 1) {
+			return true;
+		}
+		// not everything closed
+		if ($this->strict) {
+			return false;
+		}
+		while (count ($this->_stack) > 1) {
+			$res = $this->_popNode ();
+			if (!$res) {
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	/**
+	 * Abstract method: Initialize the parser
+	 * @access protected
+	 */
+	function _parserInit () {
+		$this->_setStatus (0);
+	}
+	
+	/**
+	 * Abstract method: Set a specific status
+	 * @access protected
+	 */
+	function _setStatus ($status) {
+		if ($status != 0) {
+			return false;
+		}
+		$this->_charactersSearch = array ();
+		$this->_charactersAllowed = array ();
+		$this->_status = $status;
+		return true;
+	}
+	
+	/**
+	 * Abstract method: Handle status
+	 * @access protected
+	 * @param int $status The current status
+	 * @param string $needle The needle that was found
+	 * @return bool
+	 */
+	function _handleStatus ($status, $needle) {
+		$this->_appendText ($needle);
+		$this->_cpos += strlen ($needle);
+		return true;
+	}
+	
+	/**
+	 * Search mode loop
+	 * @access protected
+	 * @return bool
+	 */
+	function _searchLoop () {
+		$i = 0;
+		while (1) {
+			// make sure this is false!
+			$this->_recentlyReparsed = false;
+			
+			list ($needle, $offset) = $this->_strpos ($this->_charactersSearch, $this->_cpos);
+			// parser ends here
+			if ($needle === false) {
+				// original status 0 => no problem
+				if (!$this->_status) {
+					break;
+				}
+				// not in original status? strict mode?
+				if ($this->strict) {
+					return false;
+				}
+				// break up parsing operation of current node
+				$res = $this->_reparseAfterCurrentBlock ();
+				if (!$res) {
+					return false;
+				}
+				continue;
+			}
+			// get subtext
+			$subtext = substr ($this->_text, $this->_cpos, $offset - $this->_cpos);
+			$res = $this->_appendText ($subtext);
+			if (!$res) {
+				return false;
+			}
+			$this->_cpos = $offset;
+			$res = $this->_handleStatus ($this->_status, $needle);
+			if (!$res && $this->strict) {
+				return false;
+			}
+			if (!$res) {
+				$res = $this->_appendText ($this->_text{$this->_cpos});
+				if (!$res) {
+					return false;
+				}
+				$this->_cpos++;
+				continue;
+			}
+			if ($this->_recentlyReparsed) {
+				$this->_recentlyReparsed = false;
+				continue;
+			}
+			$this->_cpos += strlen ($needle);
+		}
+		
+		// get subtext
+		if ($this->_cpos < strlen ($this->_text)) {
+			$subtext = substr ($this->_text, $this->_cpos);
+			$res = $this->_appendText ($subtext);
+			if (!$res) {
+				return false;
+			}
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Loop mode loop
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _loop () {
+		// HACK: This method ist not yet implemented correctly, the code below
+		// DOES NOT WORK! Do not use!
+		
+		return false;
+		/*
+		while ($this->_cpos < $this->_length) {
+			$needle = $this->_strDetect ($this->_charactersSearch, $this->_cpos);
+			
+			if ($needle === false) {
+				// not found => see if character is allowed
+				if (!in_array ($this->_text{$this->_cpos}, $this->_charactersAllowed)) {
+					if ($strict) {
+						return false;
+					}
+					// ignore
+					continue;
+				}
+				// lot's of FIXMES
+				$res = $this->_appendText ($this->_text{$this->_cpos});
+				if (!$res) {
+					return false;
+				}
+			}
+			
+			// get subtext
+			$subtext = substr ($this->_text, $offset, $offset - $this->_cpos);
+			$res = $this->_appendText ($subtext);
+			if (!$res) {
+				return false;
+			}
+			$this->_cpos = $subtext;
+			$res = $this->_handleStatus ($this->_status, $needle);
+			if (!$res && $strict) {
+				return false;
+			}
+		}
+		// original status 0 => no problem
+		if (!$this->_status) {
+			return true;
+		}
+		// not in original status? strict mode?
+		if ($this->strict) {
+			return false;
+		}
+		// break up parsing operation of current node
+		$res = $this->_reparseAfterCurrentBlock ();
+		if (!$res) {
+			return false;
+		}
+		// this will not cause an infinite loop because
+		// _reparseAfterCurrentBlock will increase _cpos by one!
+		return $this->_loop ();
+		*/
+	}
+	
+	/**
+	 * Abstract method Append text depending on current status
+	 * @access protected
+	 * @param string $text The text to append
+	 * @return bool On success, the function returns true, else false
+	 */
+	function _appendText ($text) {
+		if (!strlen ($text)) {
+			return true;
+		}
+		// default: call _appendToLastTextChild
+		return $this->_appendToLastTextChild ($text);
+	}
+	
+	/**
+	 * Append text to last text child of current top parser stack node
+	 * @access protected
+	 * @param string $text The text to append
+	 * @return bool On success, the function returns true, else false
+	 */
+	function _appendToLastTextChild ($text) {
+		$scount = count ($this->_stack);
+		if ($scount == 0) {
+			return false;
+		}
+		return $this->_stack[$scount-1]->appendToLastTextChild ($text);
+	}
+	
+	/**
+	 * Searches {@link StringParser::_text _text} for every needle that is
+	 * specified by using the {@link PHP_MANUAL#strpos strpos} function. It
+	 * returns an associative array with the key <code>'needle'</code>
+	 * pointing at the string that was found first and the key
+	 * <code>'offset'</code> pointing at the offset at which the string was
+	 * found first. If no needle was found, the <code>'needle'</code>
+	 * element is <code>false</code> and the <code>'offset'</code> element
+	 * is <code>-1</code>.
+	 *
+	 * @access protected
+	 * @param array $needles
+	 * @param int $offset
+	 * @return array
+	 * @see StringParser::_text
+	 */
+	function _strpos ($needles, $offset) {
+		$cur_needle = false;
+		$cur_offset = -1;
+		
+		if ($offset < strlen ($this->_text)) {
+			foreach ($needles as $needle) {
+				$n_offset = strpos ($this->_text, $needle, $offset);
+				if ($n_offset !== false && ($n_offset < $cur_offset || $cur_offset < 0)) {
+					$cur_needle = $needle;
+					$cur_offset = $n_offset;
+				}
+			}
+		}
+		
+		return array ($cur_needle, $cur_offset, 'needle' => $cur_needle, 'offset' => $cur_offset);
+	}
+	
+	/**
+	 * Detects a string at the current position
+	 *
+	 * @access protected
+	 * @param array $needles The strings that are to be detected
+	 * @param int $offset The current offset
+	 * @return mixed The string that was detected or the needle
+	 */
+	function _strDetect ($needles, $offset) {
+		foreach ($needles as $needle) {
+			$l = strlen ($needle);
+			if (substr ($this->_text, $offset, $l) == $needle) {
+				return $needle;
+			}
+		}
+		return false;
+	}
+	
+	
+	/**
+	 * Adds a node to the current parse stack
+	 *
+	 * @access protected
+	 * @param object $node The node that is to be added
+	 * @return bool True on success, else false.
+	 * @see StringParser_Node, StringParser::_stack
+	 */
+	function _pushNode (&$node) {
+		$stack_count = count ($this->_stack);
+		$max_node =& $this->_stack[$stack_count-1];
+		if (!$max_node->appendChild ($node)) {
+			return false;
+		}
+		$this->_stack[$stack_count] =& $node;
+		return true;
+	}
+	
+	/**
+	 * Removes a node from the current parse stack
+	 *
+	 * @access protected
+	 * @return bool True on success, else false.
+	 * @see StringParser_Node, StringParser::_stack
+	 */
+	function _popNode () {
+		$stack_count = count ($this->_stack);
+		unset ($this->_stack[$stack_count-1]);
+		return true;
+	}
+	
+	/**
+	 * Execute a method on the top element
+	 *
+	 * @access protected
+	 * @return mixed
+	 */
+	function _topNode () {
+		$args = func_get_args ();
+		if (!count ($args)) {
+			return; // oops?
+		}
+		$method = array_shift ($args);
+		$stack_count = count ($this->_stack);
+		$method = array (&$this->_stack[$stack_count-1], $method);
+		if (!is_callable ($method)) {
+			return; // oops?
+		}
+		return call_user_func_array ($method, $args);
+	}
+	
+	/**
+	 * Get a variable of the top element
+	 *
+	 * @access protected
+	 * @return mixed
+	 */
+	function _topNodeVar ($var) {
+		$stack_count = count ($this->_stack);
+		return $this->_stack[$stack_count-1]->$var;
+	}
+}
+
+/**
+ * Node type: Unknown node
+ * @see StringParser_Node::_type
+ */
+define ('STRINGPARSER_NODE_UNKNOWN', 0);
+
+/**
+ * Node type: Root node
+ * @see StringParser_Node::_type
+ */
+define ('STRINGPARSER_NODE_ROOT', 1);
+
+/**
+ * Node type: Text node
+ * @see StringParser_Node::_type
+ */
+define ('STRINGPARSER_NODE_TEXT', 2);
+
+/**
+ * Global value that is a counter of string parser node ids. Compare it to a
+ * sequence in databases.
+ * @var int
+ */
+$GLOBALS['__STRINGPARSER_NODE_ID'] = 0;
+
+/**
+ * Generic string parser node class
+ *
+ * This is an abstract class for any type of node that is used within the
+ * string parser. General warning: This class contains code regarding references
+ * that is very tricky. Please do not touch this code unless you exactly know
+ * what you are doing. Incorrect handling of references may cause PHP to crash
+ * with a segmentation fault! You have been warned.
+ *
+ * @package stringparser
+ */
+class StringParser_Node {
+	/**
+	 * The type of this node.
+	 * 
+	 * There are three standard node types: root node, text node and unknown
+	 * node. All node types are integer constants. Any node type of a
+	 * subclass must be at least 32 to allow future developements.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_NODE_ROOT, STRINGPARSER_NODE_TEXT
+	 * @see STRINGPARSER_NODE_UNKNOWN
+	 */
+	var $_type = STRINGPARSER_NODE_UNKNOWN;
+	
+	/**
+	 * The node ID
+	 *
+	 * This ID uniquely identifies this node. This is needed when searching
+	 * for a specific node in the children array. Please note that this is
+	 * only an internal variable and should never be used - not even in
+	 * subclasses and especially not in external data structures. This ID
+	 * has nothing to do with any type of ID in HTML oder XML.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see StringParser_Node::_children
+	 */
+	var $_id = -1;
+	
+	/**
+	 * The parent of this node.
+	 *
+	 * It is either null (root node) or a reference to the parent object.
+	 *
+	 * @access protected
+	 * @var mixed
+	 * @see StringParser_Node::_children
+	 */
+	var $_parent = null;
+	
+	/**
+	 * The children of this node.
+	 *
+	 * It contains an array of references to all the children nodes of this
+	 * node.
+	 *
+	 * @access protected
+	 * @var array
+	 * @see StringParser_Node::_parent
+	 */
+	var $_children = array ();
+	
+	/**
+	 * Occured at
+	 *
+	 * This defines the position in the parsed text where this node occurred
+	 * at. If -1, this value was not possible to be determined.
+	 *
+	 * @access public
+	 * @var int
+	 */
+	var $occurredAt = -1;
+	
+	/**
+	 * Constructor
+	 *
+	 * Currently, the constructor only allocates a new ID for the node and
+	 * assigns it.
+	 *
+	 * @access public
+	 * @param int $occurredAt The position in the text where this node
+	 *                        occurred at. If not determinable, it is -1.
+	 * @global __STRINGPARSER_NODE_ID
+	 */
+	function StringParser_Node ($occurredAt = -1) {
+		$this->_id = $GLOBALS['__STRINGPARSER_NODE_ID']++;
+		$this->occurredAt = $occurredAt;
+	}
+	
+	/**
+	 * Type of the node
+	 *
+	 * This function returns the type of the node
+	 *
+	 * @access public
+	 * @return int
+	 */
+	function type () {
+		return $this->_type;
+	}
+	
+	/**
+	 * Prepend a node
+	 *
+	 * @access public
+	 * @param object $node The node to be prepended.
+	 * @return bool On success, the function returns true, else false.
+	 */
+	function prependChild (&$node) {
+		if (!is_object ($node)) {
+			return false;
+		}
+		
+		// root nodes may not be children of other nodes!
+		if ($node->_type == STRINGPARSER_NODE_ROOT) {
+			return false;
+		}
+		
+		// if node already has a parent
+		if ($node->_parent !== false) {
+			// remove node from there
+			$parent =& $node->_parent;
+			if (!$parent->removeChild ($node, false)) {
+				return false;
+			}
+			unset ($parent);
+		}
+		
+		$index = count ($this->_children) - 1;
+		// move all nodes to a new index
+		while ($index >= 0) {
+			// save object
+			$object =& $this->_children[$index];
+			// we have to unset it because else it will be
+			// overridden in in the loop
+			unset ($this->_children[$index]);
+			// put object to new position
+			$this->_children[$index+1] =& $object;
+			$index--;
+		}
+		$this->_children[0] =& $node;
+		return true;
+	}
+	
+	/**
+	 * Append text to last text child
+	 * @access public
+	 * @param string $text The text to append
+	 * @return bool On success, the function returns true, else false
+	 */
+	function appendToLastTextChild ($text) {
+		$ccount = count ($this->_children);
+		if ($ccount == 0 || $this->_children[$ccount-1]->_type != STRINGPARSER_NODE_TEXT) {
+			$ntextnode =& new StringParser_Node_Text ($text);
+			return $this->appendChild ($ntextnode);
+		} else {
+			$this->_children[$ccount-1]->appendText ($text);
+			return true;
+		}
+	}
+	
+	/**
+	 * Append a node to the children
+	 *
+	 * This function appends a node to the children array(). It
+	 * automatically sets the {@link StrinParser_Node::_parent _parent}
+	 * property of the node that is to be appended.
+	 *
+	 * @access public
+	 * @param object $node The node that is to be appended.
+	 * @return bool On success, the function returns true, else false.
+	 */
+	function appendChild (&$node) {
+		if (!is_object ($node)) {
+			return false;
+		}
+		
+		// root nodes may not be children of other nodes!
+		if ($node->_type == STRINGPARSER_NODE_ROOT) {
+			return false;
+		}
+		
+		// if node already has a parent
+		if ($node->_parent !== null) {
+			// remove node from there
+			$parent =& $node->_parent;
+			if (!$parent->removeChild ($node, false)) {
+				return false;
+			}
+			unset ($parent);
+		}
+		
+		// append it to current node
+		$new_index = count ($this->_children);
+		$this->_children[$new_index] =& $node;
+		$node->_parent =& $this;
+		return true;
+	}
+	
+	/**
+	 * Insert a node before another node
+	 *
+	 * @access public
+	 * @param object $node The node to be inserted.
+	 * @param object $reference The reference node where the new node is
+	 *                          to be inserted before.
+	 * @return bool On success, the function returns true, else false.
+	 */
+	function insertChildBefore (&$node, &$reference) {
+		if (!is_object ($node)) {
+			return false;
+		}
+		
+		// root nodes may not be children of other nodes!
+		if ($node->_type == STRINGPARSER_NODE_ROOT) {
+			return false;
+		}
+		
+		// is the reference node a child?
+		$child = $this->_findChild ($reference);
+		
+		if ($child === false) {
+			return false;
+		}
+		
+		// if node already has a parent
+		if ($node->_parent !== null) {
+			// remove node from there
+			$parent =& $node->_parent;
+			if (!$parent->removeChild ($node, false)) {
+				return false;
+			}
+			unset ($parent);
+		}
+		
+		$index = count ($this->_children) - 1;
+		// move all nodes to a new index
+		while ($index >= $child) {
+			// save object
+			$object =& $this->_children[$index];
+			// we have to unset it because else it will be
+			// overridden in in the loop
+			unset ($this->_children[$index]);
+			// put object to new position
+			$this->_children[$index+1] =& $object;
+			$index--;
+		}
+		$this->_children[$child] =& $node;
+		return true;
+	}
+	
+	/**
+	 * Insert a node after another node
+	 *
+	 * @access public
+	 * @param object $node The node to be inserted.
+	 * @param object $reference The reference node where the new node is
+	 *                          to be inserted after.
+	 * @return bool On success, the function returns true, else false.
+	 */
+	function insertChildAfter (&$node, &$reference) {
+		if (!is_object ($node)) {
+			return false;
+		}
+		
+		// root nodes may not be children of other nodes!
+		if ($node->_type == STRINGPARSER_NODE_ROOT) {
+			return false;
+		}
+		
+		// is the reference node a child?
+		$child = $this->_findChild ($reference);
+		
+		if ($child === false) {
+			return false;
+		}
+		
+		// if node already has a parent
+		if ($node->_parent !== false) {
+			// remove node from there
+			$parent =& $node->_parent;
+			if (!$parent->removeChild ($node, false)) {
+				return false;
+			}
+			unset ($parent);
+		}
+		
+		$index = count ($this->_children) - 1;
+		// move all nodes to a new index
+		while ($index >= $child + 1) {
+			// save object
+			$object =& $this->_children[$index];
+			// we have to unset it because else it will be
+			// overridden in in the loop
+			unset ($this->_children[$index]);
+			// put object to new position
+			$this->_children[$index+1] =& $object;
+			$index--;
+		}
+		$this->_children[$child + 1] =& $node;
+		return true;
+	}
+	
+	/**
+	 * Remove a child node
+	 *
+	 * This function removes a child from the children array. A parameter
+	 * tells the function whether to destroy the child afterwards or not.
+	 * If the specified node is not a child of this node, the function will
+	 * return false.
+	 *
+	 * @access public
+	 * @param mixed $child The child to destroy; either an integer
+	 *                     specifying the index of the child or a reference
+	 *                     to the child itself.
+	 * @param bool $destroy Destroy the child afterwards.
+	 * @return bool On success, the function returns true, else false.
+	 */
+	function removeChild (&$child, $destroy = false) {
+		if (is_object ($child)) {
+			// if object: get index
+			$object =& $child;
+			unset ($child);
+			$child = $this->_findChild ($object);
+			if ($child === false) {
+				return false;
+			}
+		} else {
+			// remove reference on $child
+			$save = $child;
+			unset($child);
+			$child = $save;
+			
+			// else: get object
+			if (!isset($this->_children[$child])) {
+				return false;
+			}
+			$object =& $this->_children[$child];
+		}
+		
+		// store count for later use
+		$ccount = count ($this->_children);
+		
+		// index out of bounds
+		if (!is_int ($child) || $child < 0 || $child >= $ccount) {
+			return false;
+		}
+		
+		// inkonsistency
+		if ($this->_children[$child]->_parent === null ||
+		    $this->_children[$child]->_parent->_id != $this->_id) {
+			return false;
+		}
+		
+		// $object->_parent = null would equal to $this = null
+		// as $object->_parent is a reference to $this!
+		// because of this, we have to unset the variable to remove
+		// the reference and then redeclare the variable
+		unset ($object->_parent); $object->_parent = null;
+		
+		// we have to unset it because else it will be overridden in
+		// in the loop
+		unset ($this->_children[$child]);
+		
+		// move all remaining objects one index higher
+		while ($child < $ccount - 1) {
+			// save object
+			$obj =& $this->_children[$child+1];
+			// we have to unset it because else it will be
+			// overridden in in the loop
+			unset ($this->_children[$child+1]);
+			// put object to new position
+			$this->_children[$child] =& $obj;
+			// UNSET THE OBJECT!
+			unset ($obj);
+			$child++;
+		}
+		
+		if ($destroy) {
+			return StringParser_Node::destroyNode ($object);
+			unset ($object);
+		}
+		return true;
+	}
+	
+	/**
+	 * Get the first child of this node
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &firstChild () {
+		$ret = null;
+		if (!count ($this->_children)) {
+			return $ret;
+		}
+		return $this->_children[0];
+	}
+	
+	/**
+	 * Get the last child of this node
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &lastChild () {
+		$ret = null;
+		$c = count ($this->_children);
+		if (!$c) {
+			return $ret;
+		}
+		return $this->_children[$c-1];
+	}
+	
+	/**
+	 * Destroy a node
+	 *
+	 * @access public
+	 * @static
+	 * @param object $node The node to destroy
+	 * @return bool True on success, else false.
+	 */
+	function destroyNode (&$node) {
+		if ($node === null) {
+			return false;
+		}
+		// if parent exists: remove node from tree!
+		if ($node->_parent !== null) {
+			$parent =& $node->_parent;
+			// directly return that result because the removeChild
+			// method will call destroyNode again
+			return $parent->removeChild ($node, true);
+		}
+		
+		// node has children
+		while (count ($node->_children)) {
+			$child = 0;
+			// remove first child until no more children remain
+			if (!$node->removeChild ($child, true)) {
+				return false;
+			}
+			unset($child);
+		}
+		
+		// now call the nodes destructor
+		if (!$node->_destroy ()) {
+			return false;
+		}
+		
+		// now just unset it and prey that there are no more references
+		// to this node
+		unset ($node);
+		
+		return true;
+	}
+	
+	/**
+	 * Destroy this node
+	 *
+	 *
+	 * @access protected
+	 * @return bool True on success, else false.
+	 */
+	function _destroy () {
+		return true;
+	}
+	
+	/** 
+	 * Find a child node
+	 *
+	 * This function searches for a node in the own children and returns
+	 * the index of the node or false if the node is not a child of this
+	 * node.
+	 *
+	 * @access protected
+	 * @param mixed $child The node to look for.
+	 * @return mixed The index of the child node on success, else false.
+	 */
+	function _findChild (&$child) {
+		if (!is_object ($child)) {
+			return false;
+		}
+		
+		$ccount = count ($this->_children);
+		for ($i = 0; $i < $ccount; $i++) {
+			if ($this->_children[$i]->_id == $child->_id) {
+				return $i;
+			}
+		}
+		
+		return false;
+	}
+	
+	/** 
+	 * Checks equality of this node and another node
+	 *
+	 * @access public
+	 * @param mixed $node The node to be compared with
+	 * @return bool True if the other node equals to this node, else false.
+	 */
+	function equals (&$node) {
+		return ($this->_id == $node->_id);
+	}
+	
+	/**
+	 * Determines whether a criterium matches this node
+	 *
+	 * @access public
+	 * @param string $criterium The criterium that is to be checked
+	 * @param mixed $value The value that is to be compared
+	 * @return bool True if this node matches that criterium
+	 */
+	function matchesCriterium ($criterium, $value) {
+		return false;
+	}
+	
+	/**
+	 * Search for nodes with a certain criterium
+	 *
+	 * This may be used to implement getElementsByTagName etc.
+	 *
+	 * @access public
+	 * @param string $criterium The criterium that is to be checked
+	 * @param mixed $value The value that is to be compared
+	 * @return array All subnodes that match this criterium
+	 */
+	function &getNodesByCriterium ($criterium, $value) {
+		$nodes = array ();
+		$node_ctr = 0;
+		for ($i = 0; $i < count ($this->_children); $i++) {
+			if ($this->_children[$i]->matchesCriterium ($criterium, $value)) {
+				$nodes[$node_ctr++] =& $this->_children[$i];
+			}
+			$subnodes = $this->_children[$i]->getNodesByCriterium ($criterium, $value);
+			if (count ($subnodes)) {
+				$subnodes_count = count ($subnodes);
+				for ($j = 0; $j < $subnodes_count; $j++) {
+					$nodes[$node_ctr++] =& $subnodes[$j];
+					unset ($subnodes[$j]);
+				}
+			}
+			unset ($subnodes);
+		}
+		return $nodes;
+	}
+	
+	/**
+	 * Search for nodes with a certain criterium and return the count
+	 *
+	 * Similar to getNodesByCriterium
+	 *
+	 * @access public
+	 * @param string $criterium The criterium that is to be checked
+	 * @param mixed $value The value that is to be compared
+	 * @return int The number of subnodes that match this criterium
+	 */
+	function getNodeCountByCriterium ($criterium, $value) {
+		$node_ctr = 0;
+		for ($i = 0; $i < count ($this->_children); $i++) {
+			if ($this->_children[$i]->matchesCriterium ($criterium, $value)) {
+				$node_ctr++;
+			}
+			$subnodes = $this->_children[$i]->getNodeCountByCriterium ($criterium, $value);
+			$node_ctr += $subnodes;
+		}
+		return $node_ctr;
+	}
+	
+	/**
+	 * Dump nodes
+	 *
+	 * This dumps a tree of nodes
+	 *
+	 * @access public
+	 * @param string $prefix The prefix that is to be used for indentation
+	 * @param string $linesep The line separator
+	 * @param int $level The initial level of indentation
+	 * @return string
+	 */
+	function dump ($prefix = " ", $linesep = "\n", $level = 0) {
+		$str = str_repeat ($prefix, $level) . $this->_id . ": " . $this->_dumpToString () . $linesep;
+		for ($i = 0; $i < count ($this->_children); $i++) {
+			$str .= $this->_children[$i]->dump ($prefix, $linesep, $level + 1);
+		}
+		return $str;
+	}
+	
+	/**
+	 * Dump this node to a string
+	 *
+	 * @access protected
+	 * @return string
+	 */
+	function _dumpToString () {
+		if ($this->_type == STRINGPARSER_NODE_ROOT) {
+			return "root";
+		}
+		return (string)$this->_type;
+	}
+}
+
+/**
+ * String parser root node class
+ *
+ * @package stringparser
+ */
+class StringParser_Node_Root extends StringParser_Node {
+	/**
+	 * The type of this node.
+	 * 
+	 * This node is a root node.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_NODE_ROOT
+	 */
+	var $_type = STRINGPARSER_NODE_ROOT;
+}
+
+/**
+ * String parser text node class
+ *
+ * @package stringparser
+ */
+class StringParser_Node_Text extends StringParser_Node {
+	/**
+	 * The type of this node.
+	 * 
+	 * This node is a text node.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_NODE_TEXT
+	 */
+	var $_type = STRINGPARSER_NODE_TEXT;
+	
+	/**
+	 * Node flags
+	 * 
+	 * @access protected
+	 * @var array
+	 */
+	var $_flags = array ();
+	
+	/**
+	 * The content of this node
+	 * @access public
+	 * @var string
+	 */
+	var $content = '';
+	
+	/**
+	 * Constructor
+	 *
+	 * @access public
+	 * @param string $content The initial content of this element
+	 * @param int $occurredAt The position in the text where this node
+	 *                        occurred at. If not determinable, it is -1.
+	 * @see StringParser_Node_Text::content
+	 */
+	function StringParser_Node_Text ($content, $occurredAt = -1) {
+		parent::StringParser_Node ($occurredAt);
+		$this->content = $content;
+	}
+	
+	/**
+	 * Append text to content
+	 *
+	 * @access public
+	 * @param string $text The text to append
+	 * @see StringParser_Node_Text::content
+	 */
+	function appendText ($text) {
+		$this->content .= $text;
+	}
+	
+	/**
+	 * Set a flag
+	 *
+	 * @access public
+	 * @param string $name The name of the flag
+	 * @param mixed $value The value of the flag
+	 */
+	function setFlag ($name, $value) {
+		$this->_flags[$name] = $value;
+		return true;
+	}
+	
+	/**
+	 * Get Flag
+	 *
+	 * @access public
+	 * @param string $flag The requested flag
+	 * @param string $type The requested type of the return value
+	 * @param mixed $default The default return value
+	 */
+	function getFlag ($flag, $type = 'mixed', $default = null) {
+		if (!isset ($this->_flags[$flag])) {
+			return $default;
+		}
+		$return = $this->_flags[$flag];
+		if ($type != 'mixed') {
+			settype ($return, $type);
+		}
+		return $return;
+	}
+	
+	/**
+	 * Dump this node to a string
+	 */
+	function _dumpToString () {
+		return "text \"".substr (preg_replace ('/\s+/', ' ', $this->content), 0, 40)."\" [f:".preg_replace ('/\s+/', ' ', join(':', array_keys ($this->_flags)))."]";
+	}
+}
+
+?>
\ No newline at end of file

Added: YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser_bbcode.class.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser_bbcode.class.php	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDBBCode/stringparser_bbcode.class.php	2006-10-02 08:35:47 UTC (rev 2171)
@@ -0,0 +1,1960 @@
+<?php
+/**
+ * BB code string parsing class
+ *
+ * Version: 0.3.1
+ *
+ * @author Christian Seiler <spam at christian-seiler.de>
+ * @copyright Christian Seiler 2006
+ * @package stringparser
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of either:
+ *
+ *  a) the GNU General Public License as published by the Free
+ *  Software Foundation; either version 1, or (at your option) any
+ *  later version, or
+ *
+ *  b) the Artistic License as published by Larry Wall, either version 2.0,
+ *     or (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
+ *  the GNU General Public License or the Artistic License for more details.
+ *
+ *  You should have received a copy of the Artistic License with this Kit,
+ *  in the file named "Artistic.clarified".  If not, I'll be glad to provide
+ *  one.
+ *
+ *  You should also have received a copy of the GNU General Public License
+ *  along with this program in the file named "COPYING"; if not, write to
+ *  the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA 02111-1307, USA.
+ */
+ 
+require_once dirname(__FILE__).'/stringparser.class.php';
+
+define ('BBCODE_CLOSETAG_FORBIDDEN', -1);
+define ('BBCODE_CLOSETAG_OPTIONAL', 0);
+define ('BBCODE_CLOSETAG_IMPLICIT', 1);
+define ('BBCODE_CLOSETAG_IMPLICIT_ON_CLOSE_ONLY', 2);
+define ('BBCODE_CLOSETAG_MUSTEXIST', 3);
+
+define ('BBCODE_NEWLINE_PARSE', 0);
+define ('BBCODE_NEWLINE_IGNORE', 1);
+define ('BBCODE_NEWLINE_DROP', 2);
+
+define ('BBCODE_PARAGRAPH_ALLOW_BREAKUP', 0);
+define ('BBCODE_PARAGRAPH_ALLOW_INSIDE', 1);
+define ('BBCODE_PARAGRAPH_BLOCK_ELEMENT', 2);
+
+/**
+ * BB code string parser class
+ *
+ * @package stringparser
+ */
+class StringParser_BBCode extends StringParser {
+	/**
+	 * String parser mode
+	 *
+	 * The BBCode string parser works in search mode
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_MODE_SEARCH, STRINGPARSER_MODE_LOOP
+	 */
+	var $_parserMode = STRINGPARSER_MODE_SEARCH;
+	
+	/**
+	 * Defined BB Codes
+	 *
+	 * The registered BB codes
+	 *
+	 * @access protected
+	 * @var array
+	 */
+	var $_codes = array ();
+	
+	/**
+	 * Registered parsers
+	 *
+	 * @access protected
+	 * @var array
+	 */
+	var $_parsers = array ();
+	
+	/**
+	 * Defined maximum occurrences
+	 *
+	 * @access protected
+	 * @var array
+	 */
+	var $_maxOccurrences = array ();
+	
+	/**
+	 * Root content type
+	 *
+	 * @access protected
+	 * @var string
+	 */
+	var $_rootContentType = 'block';
+	
+	/**
+	 * Do not output but return the tree
+	 *
+	 * @access protected
+	 * @var bool
+	 */
+	var $_noOutput = false;
+	
+	/**
+	 * Global setting: case sensitive
+	 *
+	 * @access protected
+	 * @var bool
+	 */
+	var $_caseSensitive = true;
+	
+	/**
+	 * Root paragraph handling enabled
+	 *
+	 * @access protected
+	 * @var bool
+	 */
+	var $_rootParagraphHandling = false;
+	
+	/**
+	 * Paragraph handling parameters
+	 * @access protected
+	 * @var array
+	 */
+	var $_paragraphHandling = array (
+		'detect_string' => "\n\n",
+		'start_tag' => '<p>',
+		'end_tag' => "</p>\n"
+	);
+	
+	/**
+	 * Allow mixed attribute types (e.g. [code=bla attr=blub])
+	 * @access private
+	 * @var bool
+	 */
+	var $_mixedAttributeTypes = false;
+	
+	/**
+	 * Whether to call validation function again (with $action == 'validate_auto') when closetag comes
+	 * @access protected
+	 * @var bool
+	 */
+	var $_validateAgain = false;
+	
+	/**
+	 * Add a code
+	 *
+	 * @access public
+	 * @param string $name The name of the code
+	 * @param string $callback_type See documentation
+	 * @param string $callback_func The callback function to call
+	 * @param array $callback_params The callback parameters
+	 * @param string $content_type See documentation
+	 * @param array $allowed_within See documentation
+	 * @param array $not_allowed_within See documentation
+	 * @return bool
+	 */
+	function addCode ($name, $callback_type, $callback_func, $callback_params, $content_type, $allowed_within, $not_allowed_within) {
+		if (isset ($this->_codes[$name])) {
+			return false; // already exists
+		}
+		if (!preg_match ('/^[a-zA-Z0-9*_!+-]+$/', $name)) {
+			return false; // invalid
+		}
+		$this->_codes[$name] = array (
+			'name' => $name,
+			'callback_type' => $callback_type,
+			'callback_func' => $callback_func,
+			'callback_params' => $callback_params,
+			'content_type' => $content_type,
+			'allowed_within' => $allowed_within,
+			'not_allowed_within' => $not_allowed_within,
+			'flags' => array ()
+		);
+		return true;
+	}
+	
+	/**
+	 * Remove a code
+	 *
+	 * @access public
+	 * @param $name The code to remove
+	 * @return bool
+	 */
+	function removeCode ($name) {
+		if (isset ($this->_codes[$name])) {
+			unset ($this->_codes[$name]);
+			return true;
+		}
+		return false;
+	}
+	
+	/**
+	 * Remove all codes
+	 *
+	 * @access public
+	 */
+	function removeAllCodes () {
+		$this->_codes = array ();
+	}
+	
+	/**
+	 * Set a code flag
+	 *
+	 * @access public
+	 * @param string $name The name of the code
+	 * @param string $flag The name of the flag to set
+	 * @param mixed $value The value of the flag to set
+	 * @return bool
+	 */
+	function setCodeFlag ($name, $flag, $value) {
+		if (!isset ($this->_codes[$name])) {
+			return false;
+		}
+		$this->_codes[$name]['flags'][$flag] = $value;
+		return true;
+	}
+	
+	/**
+	 * Set occurrence type
+	 *
+	 * Example:
+	 *   $bbcode->setOccurrenceType ('url', 'link');
+	 *   $bbcode->setMaxOccurrences ('link', 4);
+	 * Would create the situation where a link may only occur four
+	 * times in the hole text.
+	 *
+	 * @access public
+	 * @param string $code The name of the code
+	 * @param string $type The name of the occurrence type to set
+	 * @return bool
+	 */
+	function setOccurrenceType ($code, $type) {
+		return $this->setCodeFlag ($code, 'occurrence_type', $type);
+	}
+	
+	/**
+	 * Set maximum number of occurrences
+	 *
+	 * @access public
+	 * @param string $type The name of the occurrence type
+	 * @param int $count The maximum number of occurrences
+	 * @return bool
+	 */
+	function setMaxOccurrences ($type, $count) {
+		settype ($count, 'integer');
+		if ($count < 0) { // sorry, does not make any sense
+			return false;
+		}
+		$this->_maxOccurrences[$type] = $count;
+		return true;
+	}
+	
+	/**
+	 * Add a parser
+	 *
+	 * @access public
+	 * @param string $type The content type for which the parser is to add
+	 * @param mixed $parser The function to call
+	 * @return bool
+	 */
+	function addParser ($type, $parser) {
+		if (is_array ($type)) {
+			foreach ($type as $t) {
+				$this->addParser ($t, $parser);
+			}
+			return true;
+		}
+		if (!isset ($this->_parsers[$type])) {
+			$this->_parsers[$type] = array ();
+		}
+		$this->_parsers[$type][] = $parser;
+		return true;
+	}
+	
+	/**
+	 * Set root content type
+	 *
+	 * @access public
+	 * @param string $content_type The new root content type
+	 */
+	function setRootContentType ($content_type) {
+		$this->_rootContentType = $content_type;
+	}
+	
+	/**
+	 * Set paragraph handling on root element
+	 *
+	 * @access public
+	 * @param bool $enabled The new status of paragraph handling on root element
+	 */
+	function setRootParagraphHandling ($enabled) {
+		$this->_rootParagraphHandling = (bool)$enabled;
+	}
+	
+	/**
+	 * Set paragraph handling parameters
+	 *
+	 * @access public
+	 * @param string $detect_string The string to detect
+	 * @param string $start_tag The replacement for the start tag (e.g. <p>)
+	 * @param string $end_tag The replacement for the start tag (e.g. </p>)
+	 */
+	function setParagraphHandlingParameters ($detect_string, $start_tag, $end_tag) {
+		$this->_paragraphHandling = array (
+			'detect_string' => $detect_string,
+			'start_tag' => $start_tag,
+			'end_tag' => $end_tag
+		);
+	}
+	
+	/**
+	 * Set global case sensitive flag
+	 *
+	 * If this is set to true, the class normally is case sensitive, but
+	 * the case_sensitive code flag may override this for a single code.
+	 *
+	 * If this is set to false, all codes are case insensitive.
+	 *
+	 * @access public
+	 * @param bool $caseSensitive
+	 */
+	function setGlobalCaseSensitive ($caseSensitive) {
+		$this->_caseSensitive = (bool)$caseSensitive;
+	}
+	
+	/**
+	 * Get global case sensitive flag
+	 *
+	 * @access public
+	 * @return bool
+	 */
+	function globalCaseSensitive () {
+		return $this->_caseSensitive;
+	}
+	
+	/**
+	 * Set mixed attribute types flag
+	 *
+	 * If set, [code=val1 attr=val2] will cause 2 attributes to be parsed:
+	 * 'default' will have value 'val1', 'attr' will have value 'val2'.
+	 * If not set, only one attribute 'default' will have the value
+	 * 'val1 attr=val2' (the default and original behaviour)
+	 *
+	 * @access public
+	 * @param bool $mixedAttributeTypes
+	 */
+	function setMixedAttributeTypes ($mixedAttributeTypes) {
+		$this->_mixedAttributeTypes = (bool)$mixedAttributeTypes;
+	}
+	
+	/**
+	 * Get mixed attribute types flag
+	 *
+	 * @access public
+	 * @return bool
+	 */
+	function mixedAttributeTypes () {
+		return $this->_mixedAttributeTypes;
+	}
+	
+	/**
+	 * Set validate again flag
+	 *
+	 * If this is set to true, the class calls the validation function
+	 * again with $action == 'validate_again' when closetag comes.
+	 *
+	 * @access public
+	 * @param bool $validateAgain
+	 */
+	function setValidateAgain ($validateAgain) {
+		$this->_validateAgain = (bool)$validateAgain;
+	}
+	
+	/**
+	 * Get validate again flag
+	 *
+	 * @access public
+	 * @return bool
+	 */
+	function validateAgain () {
+		return $this->_validateAgain;
+	}
+	
+	/**
+	 * Get a code flag
+	 *
+	 * @access public
+	 * @param string $name The name of the code
+	 * @param string $flag The name of the flag to get
+	 * @param string $type The type of the return value
+	 * @param mixed $default The default return value
+	 * @return bool
+	 */
+	function getCodeFlag ($name, $flag, $type = 'mixed', $default = null) {
+		if (!isset ($this->_codes[$name])) {
+			return $default;
+		}
+		if (!array_key_exists ($flag, $this->_codes[$name]['flags'])) {
+			return $default;
+		}
+		$return = $this->_codes[$name]['flags'][$flag];
+		if ($type != 'mixed') {
+			settype ($return, $type);
+		}
+		return $return;
+	}
+	
+	/**
+	 * Set a specific status
+	 * @access protected
+	 */
+	function _setStatus ($status) {
+		switch ($status) {
+			case 0:
+				$this->_charactersSearch = array ('[/', '[');
+				$this->_status = $status;
+				break;
+			case 1:
+				$this->_charactersSearch = array (']', ' = "', '="', ' = \'', '=\'', ' = ', '=', ': ', ':', ' ');
+				$this->_status = $status;
+				break;
+			case 2:
+				$this->_charactersSearch = array (']');
+				$this->_status = $status;
+				$this->_savedName = '';
+				break;
+			case 3:
+				if ($this->_quoting !== null) {
+					if ($this->_mixedAttributeTypes) {
+						$this->_charactersSearch = array ('\\\\', '\\'.$this->_quoting, $this->_quoting.' ', $this->_quoting.']', $this->_quoting);
+					} else {
+						$this->_charactersSearch = array ('\\\\', '\\'.$this->_quoting, $this->_quoting.']', $this->_quoting);
+					}
+					$this->_status = $status;
+					break;
+				}
+				if ($this->_mixedAttributeTypes) {
+					$this->_charactersSearch = array (' ', ']');
+				} else {
+					$this->_charactersSearch = array (']');
+				}
+				$this->_status = $status;
+				break;
+			case 4:
+				$this->_charactersSearch = array (' ', ']', '="', '=\'', '=');
+				$this->_status = $status;
+				$this->_savedName = '';
+				$this->_savedValue = '';
+				break;
+			case 5:
+				if ($this->_quoting !== null) {
+					$this->_charactersSearch = array ('\\\\', '\\'.$this->_quoting, $this->_quoting.' ', $this->_quoting.']', $this->_quoting);
+				} else {
+					$this->_charactersSearch = array (' ', ']');
+				}
+				$this->_status = $status;
+				$this->_savedValue = '';
+				break;
+			case 7:
+				$this->_charactersSearch = array ('[/'.$this->_topNode ('name').']');
+				if (!$this->_topNode ('getFlag', 'case_sensitive', 'boolean', true) || !$this->_caseSensitive) {
+					$this->_charactersSearch[] = '[/';
+				}
+				$this->_status = $status;
+				break;
+			default:
+				return false;
+		}
+		return true;
+	}
+	
+	/**
+	 * Abstract method Append text depending on current status
+	 * @access protected
+	 * @param string $text The text to append
+	 * @return bool On success, the function returns true, else false
+	 */
+	function _appendText ($text) {
+		if (!strlen ($text)) {
+			return true;
+		}
+		switch ($this->_status) {
+			case 0:
+			case 7:
+				return $this->_appendToLastTextChild ($text);
+			case 1:
+				return $this->_topNode ('appendToName', $text);
+			case 2:
+			case 4:
+				$this->_savedName .= $text;
+				return true;
+			case 3:
+				return $this->_topNode ('appendToAttribute', 'default', $text);
+			case 5:
+				$this->_savedValue .= $text;
+				return true;
+			default:
+				return false;
+		}
+	}
+	
+	/**
+	 * Restart parsing after current block
+	 *
+	 * To achieve this the current top stack object is removed from the
+	 * tree. Then the current item
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _reparseAfterCurrentBlock () {
+		if ($this->_status == 2) {
+			// this status will *never* call _reparseAfterCurrentBlock itself
+			// so this is called if the loop ends
+			// therefore, just add the [/ to the text
+			
+			// _savedName should be empty but just in case
+			$this->_cpos -= strlen ($this->_savedName);
+			$this->_savedName = '';
+			$this->_status = 0;
+			$this->_appendText ('[/');
+			return true;
+		} else {
+			return parent::_reparseAfterCurrentBlock ();
+		}
+	}
+	
+	/**
+	 * Apply parsers
+	 */
+	function _applyParsers ($type, $text) {
+		if (!isset ($this->_parsers[$type])) {
+			return $text;
+		}
+		foreach ($this->_parsers[$type] as $parser) {
+			if (is_callable ($parser)) {
+				$ntext = call_user_func ($parser, $text);
+				if (is_string ($ntext)) {
+					$text = $ntext;
+				}
+			}
+		}
+		return $text;
+	}
+	
+	/**
+	 * Handle status
+	 * @access protected
+	 * @param int $status The current status
+	 * @param string $needle The needle that was found
+	 * @return bool
+	 */
+	function _handleStatus ($status, $needle) {
+		switch ($status) {
+			case 0: // NORMAL TEXT
+				if ($needle != '[' && $needle != '[/') {
+					$this->_appendText ($needle);
+					return true;
+				}
+				if ($needle == '[') {
+					$node =& new StringParser_BBCode_Node_Element ($this->_cpos);
+					$res = $this->_pushNode ($node);
+					if (!$res) {
+						return false;
+					}
+					$this->_setStatus (1);
+				} else if ($needle == '[/') {
+					if (count ($this->_stack) <= 1) {
+						$this->_appendText ($needle);
+						return true;
+					}
+					$this->_setStatus (2);
+				}
+				break;
+			case 1: // OPEN TAG
+				if ($needle == ']') {
+					return $this->_openElement (0);
+				} else if (trim ($needle) == ':' || trim ($needle) == '=') {
+					$this->_quoting = null;
+					$this->_setStatus (3); // default value parser
+					break;
+				} else if (trim ($needle) == '="' || trim ($needle) == '= "' || trim ($needle) == '=\'' || trim ($needle) == '= \'') {
+					$this->_quoting = substr (trim ($needle), -1);
+					$this->_setStatus (3); // default value parser with quotation
+					break;
+				} else if ($needle == ' ') {
+					$this->_setStatus (4); // attribute parser
+					break;
+				} else {
+					$this->_appendText ($needle);
+					return true;
+				}
+				// break not necessary because every if clause contains return
+			case 2: // CLOSE TAG
+				if ($needle != ']') {
+					$this->_appendText ($needle);
+					return true;
+				}
+				$closecount = 0;
+				if (!$this->_isCloseable ($this->_savedName, $closecount)) {
+					$this->_setStatus (0);
+					$this->_appendText ('[/'.$this->_savedName.$needle);
+					return true;
+				}
+				// this validates the code(s) to be closed after the content tree of
+				// that code(s) are built - if the second validation fails, we will have
+				// to reparse. note that as _reparseAfterCurrentBlock will not work correctly
+				// if we're in $status == 2, we will have to set our status to 0 manually
+				if (!$this->_validateCloseTags ($closecount)) {
+					$this->_setStatus (0);
+					return $this->_reparseAfterCurrentBlock ();
+				}
+				$this->_setStatus (0);
+				for ($i = 0; $i < $closecount; $i++) {
+					if ($i == $closecount - 1) {
+						$this->_topNode ('setHadCloseTag');
+					}
+					if (!$this->_popNode ()) {
+						return false;
+					}
+				}
+				break;
+			case 3: // DEFAULT ATTRIBUTE
+				if ($this->_quoting !== null) {
+					if ($needle == '\\\\') {
+						$this->_appendText ('\\');
+						return true;
+					} else if ($needle == '\\'.$this->_quoting) {
+						$this->_appendText ($this->_quoting);
+						return true;
+					} else if ($needle == $this->_quoting.' ') {
+						$this->_setStatus (4);
+						return true;
+					} else if ($needle == $this->_quoting.']') {
+						return $this->_openElement (2);
+					} else if ($needle == $this->_quoting) {
+						// can't be, only ']' and ' ' allowed after quoting char
+						return $this->_reparseAfterCurrentBlock ();
+					} else {
+						$this->_appendText ($needle);
+						return true;
+					}
+				} else {
+					if ($needle == ' ') {
+						$this->_setStatus (4);
+						return true;
+					} else if ($needle == ']') {
+						return $this->_openElement (2);
+					} else {
+						$this->_appendText ($needle);
+						return true;
+					}
+				}
+				// break not needed because every if clause contains return!
+			case 4: // ATTRIBUTE NAME
+				if ($needle == ' ') {
+					if (strlen ($this->_savedName)) {
+						$this->_topNode ('setAttribute', $this->_savedName, true);
+					}
+					// just ignore and continue in same mode
+					$this->_setStatus (4); // reset parameters
+					return true;
+				} else if ($needle == ']') {
+					if (strlen ($this->_savedName)) {
+						$this->_topNode ('setAttribute', $this->_savedName, true);
+					}
+					return $this->_openElement (2);
+				} else if ($needle == '=') {
+					$this->_quoting = null;
+					$this->_setStatus (5);
+					return true;
+				} else if ($needle == '="') {
+					$this->_quoting = '"';
+					$this->_setStatus (5);
+					return true;
+				} else if ($needle == '=\'') {
+					$this->_quoting = '\'';
+					$this->_setStatus (5);
+					return true;
+				} else {
+					$this->_appendText ($needle);
+					return true;
+				}
+				// break not needed because every if clause contains return!
+			case 5: // ATTRIBUTE VALUE
+				if ($this->_quoting !== null) {
+					if ($needle == '\\\\') {
+						$this->_appendText ('\\');
+						return true;
+					} else if ($needle == '\\'.$this->_quoting) {
+						$this->_appendText ($this->_quoting);
+						return true;
+					} else if ($needle == $this->_quoting.' ') {
+						$this->_topNode ('setAttribute', $this->_savedName, $this->_savedValue);
+						$this->_setStatus (4);
+						return true;
+					} else if ($needle == $this->_quoting.']') {
+						$this->_topNode ('setAttribute', $this->_savedName, $this->_savedValue);
+						return $this->_openElement (2);
+					} else if ($needle == $this->_quoting) {
+						// can't be, only ']' and ' ' allowed after quoting char
+						return $this->_reparseAfterCurrentBlock ();
+					} else {
+						$this->_appendText ($needle);
+						return true;
+					}
+				} else {
+					if ($needle == ' ') {
+						$this->_topNode ('setAttribute', $this->_savedName, $this->_savedValue);
+						$this->_setStatus (4);
+						return true;
+					} else if ($needle == ']') {
+						$this->_topNode ('setAttribute', $this->_savedName, $this->_savedValue);
+						return $this->_openElement (2);
+					} else {
+						$this->_appendText ($needle);
+						return true;
+					}
+				}
+				// break not needed because every if clause contains return!
+			case 7:
+				if ($needle == '[/') {
+					// this was case insensitive match
+					if (strtolower (substr ($this->_text, $this->_cpos + strlen ($needle), strlen ($this->_topNode ('name')) + 1)) == strtolower ($this->_topNode ('name').']')) {
+						// this matched
+						$this->_cpos += strlen ($this->_topNode ('name')) + 1;
+					} else {
+						// it didn't match
+						$this->_appendText ($needle);
+						return true;
+					}
+				}
+				$closecount = $this->_savedCloseCount;
+				if (!$this->_topNode ('validate')) {
+					return $this->_reparseAfterCurrentBlock ();
+				}
+				// do we have to close subnodes?
+				if ($closecount) {
+					// get top node
+					$mynode =& $this->_stack[count ($this->_stack)-1];
+					// close necessary nodes
+					for ($i = 0; $i <= $closecount; $i++) {
+						if (!$this->_popNode ()) {
+							return false;
+						}
+					}
+					if (!$this->_pushNode ($mynode)) {
+						return false;
+					}
+				}
+				$this->_setStatus (0);
+				$this->_popNode ();
+				return true;
+			default: 
+				return false;
+		}
+		return true;
+	}
+	
+	/**
+	 * Open the next element
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _openElement ($type = 0) {
+		$name = $this->_topNode ('name');
+		if (!isset ($this->_codes[$name])) {
+			if (isset ($this->_codes[strtolower ($name)]) && (!$this->getCodeFlag (strtolower ($name), 'case_sensitive', 'boolean', true) || !$this->_caseSensitive)) {
+				$name = strtolower ($name);
+			} else {
+				return $this->_reparseAfterCurrentBlock ();
+			}
+		}
+		$occ_type = $this->getCodeFlag ($name, 'occurrence_type', 'string');
+		if ($occ_type !== null && isset ($this->_maxOccurrences[$occ_type])) {
+			$max_occs = $this->_maxOccurrences[$occ_type];
+			$occs = $this->_root->getNodeCountByCriterium ('flag:occurrence_type', $occ_type);
+			if ($occs >= $max_occs) {
+				return $this->_reparseAfterCurrentBlock ();
+			}
+		}
+		$closecount = 0;
+		$this->_topNode ('setCodeInfo', $this->_codes[$name]);
+		if (!$this->_isOpenable ($name, $closecount)) {
+			return $this->_reparseAfterCurrentBlock ();
+		}
+		$this->_setStatus (0);
+		switch ($type) {
+		case 0:
+			$cond = $this->_isUseContent ($this->_stack[count($this->_stack)-1], false);
+			break;
+		case 1:
+			$cond = $this->_isUseContent ($this->_stack[count($this->_stack)-1], true);
+			break;
+		case 2:
+			$cond = $this->_isUseContent ($this->_stack[count($this->_stack)-1], true);
+			break;
+		default:
+			$cond = false;
+			break;
+		}
+		if ($cond) {
+			$this->_savedCloseCount = $closecount;
+			$this->_setStatus (7);
+			return true;
+		}
+		if (!$this->_topNode ('validate')) {
+			return $this->_reparseAfterCurrentBlock ();
+		}
+		// do we have to close subnodes?
+		if ($closecount) {
+			// get top node
+			$mynode =& $this->_stack[count ($this->_stack)-1];
+			// close necessary nodes
+			for ($i = 0; $i <= $closecount; $i++) {
+				if (!$this->_popNode ()) {
+					return false;
+				}
+			}
+			if (!$this->_pushNode ($mynode)) {
+				return false;
+			}
+		}
+		
+		if ($this->_codes[$name]['callback_type'] == 'simple_replace_single' || $this->_codes[$name]['callback_type'] == 'callback_replace_single') {
+			if (!$this->_popNode ())  {
+				return false;
+			}
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Is a node closeable?
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _isCloseable ($name, &$closecount) {
+		$node =& $this->_findNamedNode ($name, false);
+		if ($node === false) {
+			return false;
+		}
+		$scount = count ($this->_stack);
+		for ($i = $scount - 1; $i > 0; $i--) {
+			$closecount++;
+			if ($this->_stack[$i]->equals ($node)) {
+				return true;
+			}
+			if ($this->_stack[$i]->getFlag ('closetag', 'integer', BBCODE_CLOSETAG_IMPLICIT) == BBCODE_CLOSETAG_MUSTEXIST) {
+				return false;
+			}
+		}
+		return false;
+	}
+	
+	/**
+	 * Revalidate codes when close tags appear
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _validateCloseTags ($closecount) {
+		$scount = count ($this->_stack);
+		for ($i = $scount - 1; $i >= $scount - $closecount; $i--) {
+			if ($this->_validateAgain) {
+				if (!$this->_stack[$i]->validate ('validate_again')) {
+					return false;
+				}
+			}
+		}
+		return true;
+	}
+	
+	/**
+	 * Is a node openable?
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _isOpenable ($name, &$closecount) {
+		if (!isset ($this->_codes[$name])) {
+			return false;
+		}
+		
+		$closecount = 0;
+		
+		$allowed_within = $this->_codes[$name]['allowed_within'];
+		$not_allowed_within = $this->_codes[$name]['not_allowed_within'];
+		
+		$scount = count ($this->_stack);
+		if ($scount == 2) { // top level element
+			if (!in_array ($this->_rootContentType, $allowed_within)) {
+				return false;
+			}
+		} else {
+			if (!in_array ($this->_stack[$scount-2]->_codeInfo['content_type'], $allowed_within)) {
+				return $this->_isOpenableWithClose ($name, $closecount);
+			}
+		}
+		
+		for ($i = 1; $i < $scount - 1; $i++) {
+			if (in_array ($this->_stack[$i]->_codeInfo['content_type'], $not_allowed_within)) {
+				return $this->_isOpenableWithClose ($name, $closecount);
+			}
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Is a node openable by closing other nodes?
+	 *
+	 * @access protected
+	 * @return bool
+	 */
+	function _isOpenableWithClose ($name, &$closecount) {
+		$tnname = $this->_topNode ('name');
+		if (isset ($this->_codes[strtolower($tnname)]) && (!$this->getCodeFlag (strtolower($tnname), 'case_sensitive', 'boolean', true) || !$this->_caseSensitive)) {
+			$tnname = strtolower($tnname);
+		}
+		if (!in_array ($this->getCodeFlag ($tnname, 'closetag', 'integer', BBCODE_CLOSETAG_IMPLICIT), array (BBCODE_CLOSETAG_FORBIDDEN, BBCODE_CLOSETAG_OPTIONAL))) {
+			return false;
+		}
+		$node =& $this->_findNamedNode ($name, true);
+		if ($node === false) {
+			return false;
+		}
+		$scount = count ($this->_stack);
+		if ($scount < 3) {
+			return false;
+		}
+		for ($i = $scount - 2; $i > 0; $i--) {
+			$closecount++;
+			if ($this->_stack[$i]->equals ($node)) {
+				return true;
+			}
+			if (in_array ($this->_stack[$i]->getFlag ('closetag', 'integer', BBCODE_CLOSETAG_IMPLICIT), array (BBCODE_CLOSETAG_IMPLICIT_ON_CLOSE_ONLY, BBCODE_CLOSETAG_MUSTEXIST))) {
+				return false;
+			}
+			if ($this->_validateAgain) {
+				if (!$this->_stack[$i]->validate ('validate_again')) {
+					return false;
+				}
+			}
+		}
+		
+		return false;
+	}
+	
+	/**
+	 * Abstract method: Close remaining blocks
+	 * @access protected
+	 */
+	function _closeRemainingBlocks () {
+		// everything closed
+		if (count ($this->_stack) == 1) {
+			return true;
+		}
+		// not everything close
+		if ($this->strict) {
+			return false;
+		}
+		while (count ($this->_stack) > 1) {
+			if ($this->_topNode ('getFlag', 'closetag', 'integer', BBCODE_CLOSETAG_IMPLICIT) == BBCODE_CLOSETAG_MUSTEXIST) {
+				return false; // sorry
+			}
+			$res = $this->_popNode ();
+			if (!$res) {
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	/**
+	 * Find a node with a specific name in stack
+	 *
+	 * @access protected
+	 * @return mixed
+	 */
+	function &_findNamedNode ($name, $searchdeeper = false) {
+		$lname = strtolower ($name);
+		if (isset ($this->_codes[$lname]) && (!$this->getCodeFlag ($lname, 'case_sensitive', 'boolean', true) || !$this->_caseSensitive)) {
+			$name = $lname;
+			$case_sensitive = false;
+		} else {
+			$case_sensitive = true;
+		}
+		$scount = count ($this->_stack);
+		if ($searchdeeper) {
+			$scount--;
+		}
+		for ($i = $scount - 1; $i > 0; $i--) {
+			if (!$case_sensitive) {
+				$cmp_name = strtolower ($this->_stack[$i]->name ());
+			} else {
+				$cmp_name = $this->_stack[$i]->name ();
+			}
+			if ($cmp_name == $name) {
+				return $this->_stack[$i];
+			}
+		}
+		$result = false;
+		return $result;
+	}
+	
+	/**
+	 * Abstract method: Output tree
+	 * @access protected
+	 * @return bool
+	 */
+	function _outputTree () {
+		if ($this->_noOutput) {
+			return true;
+		}
+		$output = $this->_outputNode ($this->_root);
+		if (is_string ($output)) {
+			$this->_output = $this->_applyPostfilters ($output);
+			unset ($output);
+			return true;
+		}
+		
+		return false;
+	}
+	
+	/**
+	 * Output a node
+	 * @access protected
+	 * @return bool
+	 */
+	function _outputNode (&$node) {
+		$output = '';
+		if ($node->_type == STRINGPARSER_BBCODE_NODE_PARAGRAPH || $node->_type == STRINGPARSER_BBCODE_NODE_ELEMENT || $node->_type == STRINGPARSER_NODE_ROOT) {
+			$ccount = count ($node->_children);
+			for ($i = 0; $i < $ccount; $i++) {
+				$suboutput = $this->_outputNode ($node->_children[$i]);
+				if (!is_string ($suboutput)) {
+					return false;
+				}
+				$output .= $suboutput;
+			}
+			if ($node->_type == STRINGPARSER_BBCODE_NODE_PARAGRAPH) {
+				return $this->_paragraphHandling['start_tag'].$output.$this->_paragraphHandling['end_tag'];
+			}
+			if ($node->_type == STRINGPARSER_BBCODE_NODE_ELEMENT) {
+				return $node->getReplacement ($output);
+			}
+			return $output;
+		} else if ($node->_type == STRINGPARSER_NODE_TEXT) {
+			$output = $node->content;
+			$before = '';
+			$after = '';
+			$ol = strlen ($output);
+			switch ($node->getFlag ('newlinemode.begin', 'integer', BBCODE_NEWLINE_PARSE)) {
+			case BBCODE_NEWLINE_IGNORE:
+				if ($ol && $output{0} == "\n") {
+					$before = "\n";
+				}
+				// don't break!
+			case BBCODE_NEWLINE_DROP:
+				if ($ol && $output{0} == "\n") {
+					$output = substr ($output, 1);
+					$ol--;
+				}
+				break;
+			}
+			switch ($node->getFlag ('newlinemode.end', 'integer', BBCODE_NEWLINE_PARSE)) {
+			case BBCODE_NEWLINE_IGNORE:
+				if ($ol && $output{$ol-1} == "\n") {
+					$after = "\n";
+				}
+				// don't break!
+			case BBCODE_NEWLINE_DROP:
+				if ($ol && $output{$ol-1} == "\n") {
+					$output = substr ($output, 0, -1);
+					$ol--;
+				}
+				break;
+			}
+			// can't do anything
+			if ($node->_parent === null) {
+				return $before.$output.$after;
+			}
+			if ($node->_parent->_type == STRINGPARSER_BBCODE_NODE_PARAGRAPH)  {
+				$parent =& $node->_parent;
+				unset ($node);
+				$node =& $parent;
+				unset ($parent);
+				// if no parent for this paragraph
+				if ($node->_parent === null) {
+					return $before.$output.$after;
+				}
+			}
+			if ($node->_parent->_type == STRINGPARSER_NODE_ROOT) {
+				return $before.$this->_applyParsers ($this->_rootContentType, $output).$after;
+			}
+			if ($node->_parent->_type == STRINGPARSER_BBCODE_NODE_ELEMENT) {
+				return $before.$this->_applyParsers ($node->_parent->_codeInfo['content_type'], $output).$after;
+			}
+			return $before.$output.$after;
+		}
+	}
+	
+	/**
+	 * Abstract method: Manipulate the tree
+	 * @access protected
+	 * @return bool
+	 */
+	function _modifyTree () {
+		// first pass: try to do newline handling
+		$nodes =& $this->_root->getNodesByCriterium ('needsTextNodeModification', true);
+		$nodes_count = count ($nodes);
+		for ($i = 0; $i < $nodes_count; $i++) {
+			$v = $nodes[$i]->getFlag ('opentag.before.newline', 'integer', BBCODE_NEWLINE_PARSE);
+			if ($v != BBCODE_NEWLINE_PARSE) {
+				$n =& $nodes[$i]->findPrevAdjentTextNode ();
+				if (!is_null ($n)) {
+					$n->setFlag ('newlinemode.end', $v);
+				}
+				unset ($n);
+			}
+			$v = $nodes[$i]->getFlag ('opentag.after.newline', 'integer', BBCODE_NEWLINE_PARSE);
+			if ($v != BBCODE_NEWLINE_PARSE) {
+				$n =& $nodes[$i]->firstChildIfText ();
+				if (!is_null ($n)) {
+					$n->setFlag ('newlinemode.begin', $v);
+				}
+				unset ($n);
+			}
+			$v = $nodes[$i]->getFlag ('closetag.before.newline', 'integer', BBCODE_NEWLINE_PARSE);
+			if ($v != BBCODE_NEWLINE_PARSE) {
+				$n =& $nodes[$i]->lastChildIfText ();
+				if (!is_null ($n)) {
+					$n->setFlag ('newlinemode.end', $v);
+				}
+				unset ($n);
+			}
+			$v = $nodes[$i]->getFlag ('closetag.after.newline', 'integer', BBCODE_NEWLINE_PARSE);
+			if ($v != BBCODE_NEWLINE_PARSE) {
+				$n =& $nodes[$i]->findNextAdjentTextNode ();
+				if (!is_null ($n)) {
+					$n->setFlag ('newlinemode.begin', $v);
+				}
+				unset ($n);
+			}
+		}
+		
+		// second pass a: do paragraph handling on root element
+		if ($this->_rootParagraphHandling) {
+			$res = $this->_handleParagraphs ($this->_root);
+			if (!$res) {
+				return false;
+			}
+		}
+		
+		// second pass b: do paragraph handling on other elements
+		unset ($nodes);
+		$nodes =& $this->_root->getNodesByCriterium ('flag:paragraphs', true);
+		$nodes_count = count ($nodes);
+		for ($i = 0; $i < $nodes_count; $i++) {
+			$res = $this->_handleParagraphs ($nodes[$i]);
+			if (!$res) {
+				return false;
+			}
+		}
+		
+		// second pass c: search for empty paragraph nodes and remove them
+		unset ($nodes);
+		$nodes =& $this->_root->getNodesByCriterium ('empty', true);
+		$nodes_count = count ($nodes);
+		if (isset ($parent)) {
+			unset ($parent); $parent = null;
+		}
+		for ($i = 0; $i < $nodes_count; $i++) {
+			if ($nodes[$i]->_type != STRINGPARSER_BBCODE_NODE_PARAGRAPH) {
+				continue;
+			}
+			unset ($parent);
+			$parent =& $nodes[$i]->_parent;
+			$parent->removeChild ($nodes[$i], true);
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Handle paragraphs
+	 * @access protected
+	 * @param object $node The node to handle
+	 * @return bool
+	 */
+	function _handleParagraphs (&$node) {
+		// if this node is already a subnode of a paragraph node, do NOT 
+		// do paragraph handling on this node!
+		if ($this->_hasParagraphAncestor ($node)) {
+			return true;
+		}
+		$dest_nodes = array ();
+		$last_node_was_paragraph = false;
+		$prevtype = STRINGPARSER_NODE_TEXT;
+		$paragraph = null;
+		while (count ($node->_children)) {
+			$mynode =& $node->_children[0];
+			$node->removeChild ($mynode);
+			$subprevtype = $prevtype;
+			$sub_nodes =& $this->_breakupNodeByParagraphs ($mynode);
+			for ($i = 0; $i < count ($sub_nodes); $i++) {
+				if (!$last_node_was_paragraph ||  ($prevtype == $sub_nodes[$i]->_type && ($i != 0 || $prevtype != STRINGPARSER_BBCODE_NODE_ELEMENT))) {
+					unset ($paragraph);
+					$paragraph =& new StringParser_BBCode_Node_Paragraph ();
+				}
+				$prevtype = $sub_nodes[$i]->_type;
+				if ($sub_nodes[$i]->_type != STRINGPARSER_BBCODE_NODE_ELEMENT || $sub_nodes[$i]->getFlag ('paragraph_type', 'integer', BBCODE_PARAGRAPH_ALLOW_BREAKUP) != BBCODE_PARAGRAPH_BLOCK_ELEMENT) {
+					$paragraph->appendChild ($sub_nodes[$i]);
+					$dest_nodes[] =& $paragraph;
+					$last_node_was_paragraph = true;
+				} else {
+					$dest_nodes[] =& $sub_nodes[$i];
+					$last_onde_was_paragraph = false;
+					unset ($paragraph);
+					$paragraph =& new StringParser_BBCode_Node_Paragraph ();
+				}
+			}
+		}
+		$count = count ($dest_nodes);
+		for ($i = 0; $i < $count; $i++) {
+			$node->appendChild ($dest_nodes[$i]);
+		}
+		unset ($dest_nodes);
+		unset ($paragraph);
+		return true;
+	}
+	
+	/**
+	 * Search for a paragraph node in tree in upward direction
+	 * @access protected
+	 * @param object $node The node to analyze
+	 * @return bool
+	 */
+	function _hasParagraphAncestor (&$node) {
+		if ($node->_parent === null) {
+			return false;
+		}
+		$parent =& $node->_parent;
+		if ($parent->_type == STRINGPARSER_BBCODE_NODE_PARAGRAPH) {
+			return true;
+		}
+		return $this->_hasParagraphAncestor ($parent);
+	}
+	
+	/**
+	 * Break up nodes
+	 * @access protected
+	 * @param object $node The node to break up
+	 * @return array
+	 */
+	function &_breakupNodeByParagraphs (&$node) {
+		$detect_string = $this->_paragraphHandling['detect_string'];
+		$dest_nodes = array ();
+		// text node => no problem
+		if ($node->_type == STRINGPARSER_NODE_TEXT) {
+			$cpos = 0;
+			while (($npos = strpos ($node->content, $detect_string, $cpos)) !== false) {
+				$subnode =& new StringParser_Node_Text (substr ($node->content, $cpos, $npos - $cpos), $node->occurredAt + $cpos);
+				// copy flags
+				foreach ($node->_flags as $flag => $value) {
+					if ($flag == 'newlinemode.begin') {
+						if ($cpos == 0) {
+							$subnode->setFlag ($flag, $value);
+						}
+					} else if ($flag == 'newlinemode.end') {
+						// do nothing
+					} else {
+						$subnode->setFlag ($flag, $value);
+					}
+				}
+				$dest_nodes[] =& $subnode;
+				unset ($subnode);
+				$cpos = $npos + strlen ($detect_string);
+			}
+			$subnode =& new StringParser_Node_Text (substr ($node->content, $cpos), $node->occurredAt + $cpos);
+			if ($cpos == 0) {
+				$value = $node->getFlag ('newlinemode.begin', 'integer', null);
+				if ($value !== null) {
+					$subnode->setFlag ('newlinemode.begin', $value);
+				}
+			}
+			$value = $node->getFlag ('newlinemode.end', 'integer', null);
+			if ($value !== null) {
+				$subnode->setFlag ('newlinemode.end', $value);
+			}
+			$dest_nodes[] =& $subnode;
+			unset ($subnode);
+			return $dest_nodes;
+		}
+		// not a text node or an element node => no way
+		if ($node->_type != STRINGPARSER_BBCODE_NODE_ELEMENT) {
+			$dest_nodes[] =& $node;
+			return $dest_nodes;
+		}
+		if ($node->getFlag ('paragraph_type', 'integer', BBCODE_PARAGRAPH_ALLOW_BREAKUP) != BBCODE_PARAGRAPH_ALLOW_BREAKUP || !count ($node->_children)) {
+			$dest_nodes[] =& $node;
+			return $dest_nodes;
+		}
+		$dest_node =& $node->duplicate ();
+		$nodecount = count ($node->_children);
+		// now this node allows breakup - do it
+		for ($i = 0; $i < $nodecount; $i++) {
+			$firstnode =& $node->_children[0];
+			$node->removeChild ($firstnode);
+			$sub_nodes =& $this->_breakupNodeByParagraphs ($firstnode);
+			for ($j = 0; $j < count ($sub_nodes); $j++) {
+				if ($j != 0) {
+					$dest_nodes[] =& $dest_node;
+					unset ($dest_node);
+					$dest_node =& $node->duplicate ();
+				}
+				$dest_node->appendChild ($sub_nodes[$j]);
+			}
+			unset ($sub_nodes);
+		}
+		$dest_nodes[] =& $dest_node;
+		return $dest_nodes;
+	}
+	
+	/**
+	 * Is this node a usecontent node
+	 * @access protected
+	 * @param object $node The node to check
+	 * @param bool $check_attrs Also check whether 'usecontent?'-attributes exist
+	 * @return bool
+	 */
+	function _isUseContent (&$node, $check_attrs = false) {
+		$name = strtolower($node->name ());
+		if ($this->_codes[$name]['callback_type'] == 'usecontent') {
+			return true;
+		}
+		$result = false;
+		if ($this->_codes[$name]['callback_type'] == 'callback_replace?') {
+			$result = true;
+		} else if ($this->_codes[$name]['callback_type'] != 'usecontent?') {
+			return false;
+		}
+		if ($check_attrs === false) {
+			return !$result;
+		}
+		$attributes = array_keys ($this->_topNodeVar ('_attributes'));
+		$p = @$this->_codes[$name]['callback_params']['usecontent_param'];
+		if (is_array ($p)) {
+			foreach ($p as $param) {
+				if (in_array ($param, $attributes)) {
+					return $result;
+				}
+			}
+		} else {
+			if (in_array ($p, $attributes)) {
+				return $result;
+			}
+		}
+		return !$result;
+	}
+}
+
+/**
+ * Node type: BBCode Element node
+ * @see StringParser_BBCode_Node_Element::_type
+ */
+define ('STRINGPARSER_BBCODE_NODE_ELEMENT', 32);
+
+/**
+ * Node type: BBCode Paragraph node
+ * @see StringParser_BBCode_Node_Paragraph::_type
+ */
+define ('STRINGPARSER_BBCODE_NODE_PARAGRAPH', 33);
+
+
+/**
+ * BBCode String parser paragraph node class
+ *
+ * @package stringparser
+ */
+class StringParser_BBCode_Node_Paragraph extends StringParser_Node {
+	/**
+	 * The type of this node.
+	 * 
+	 * This node is a bbcode paragraph node.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_BBCODE_NODE_PARAGRAPH
+	 */
+	var $_type = STRINGPARSER_BBCODE_NODE_PARAGRAPH;
+	
+	/**
+	 * Determines whether a criterium matches this node
+	 *
+	 * @access public
+	 * @param string $criterium The criterium that is to be checked
+	 * @param mixed $value The value that is to be compared
+	 * @return bool True if this node matches that criterium
+	 */
+	function matchesCriterium ($criterium, $value) {
+		if ($criterium == 'empty') {
+			if (!count ($this->_children)) {
+				return true;
+			}
+			if (count ($this->_children) > 1) {
+				return false;
+			}
+			if ($this->_children[0]->_type != STRINGPARSER_NODE_TEXT) {
+				return false;
+			}
+			if (!strlen ($this->_children[0]->content)) {
+				return true;
+			}
+			if (strlen ($this->_children[0]->content) > 2) {
+				return false;
+			}
+			$f_begin = $this->_children[0]->getFlag ('newlinemode.begin', 'integer', BBCODE_NEWLINE_PARSE);
+			$f_end = $this->_children[0]->getFlag ('newlinemode.end', 'integer', BBCODE_NEWLINE_PARSE);
+			$content = $this->_children[0]->content;
+			if ($f_begin != BBCODE_NEWLINE_PARSE && $content{0} == "\n") {
+				$content = substr ($content, 1);
+			}
+			if ($f_end != BBCODE_NEWLINE_PARSE && $content{strlen($content)-1} == "\n") {
+				$content = substr ($content, 0, -1);
+			}
+			if (!strlen ($content)) {
+				return true;
+			}
+			return false;
+		}
+	}
+}
+
+/**
+ * BBCode String parser element node class
+ *
+ * @package stringparser
+ */
+class StringParser_BBCode_Node_Element extends StringParser_Node {
+	/**
+	 * The type of this node.
+	 * 
+	 * This node is a bbcode element node.
+	 *
+	 * @access protected
+	 * @var int
+	 * @see STRINGPARSER_BBCODE_NODE_ELEMENT
+	 */
+	var $_type = STRINGPARSER_BBCODE_NODE_ELEMENT;
+	
+	/**
+	 * Element name
+	 *
+	 * @access protected
+	 * @var string
+	 * @see StringParser_BBCode_Node_Element::name
+	 * @see StringParser_BBCode_Node_Element::setName
+	 * @see StringParser_BBCode_Node_Element::appendToName
+	 */
+	var $_name = '';
+	
+	/**
+	 * Element flags
+	 * 
+	 * @access protected
+	 * @var array
+	 */
+	var $_flags = array ();
+	
+	/**
+	 * Element attributes
+	 * 
+	 * @access protected
+	 * @var array
+	 */
+	var $_attributes = array ();
+	
+	/**
+	 * Had a close tag
+	 *
+	 * @access protected
+	 * @var bool
+	 */
+	var $_hadCloseTag = false;
+	
+	/**
+	 * Was processed by paragraph handling
+	 *
+	 * @access protected
+	 * @var bool
+	 */
+	var $_paragraphHandled = false;
+	
+	//////////////////////////////////////////////////
+	
+	/**
+	 * Duplicate this node (but without children / parents)
+	 *
+	 * @access public
+	 * @return object
+	 */
+	function &duplicate () {
+		$newnode =& new StringParser_BBCode_Node_Element ($this->occurredAt);
+		$newnode->_name = $this->_name;
+		$newnode->_flags = $this->_flags;
+		$newnode->_attributes = $this->_attributes;
+		$newnode->_hadCloseTag = $this->_hadCloseTag;
+		$newnode->_paragraphHandled = $this->_paragraphHandled;
+		$newnode->_codeInfo = $this->_codeInfo;
+		return $newnode;
+	}
+	
+	/**
+	 * Retreive name of this element
+	 *
+	 * @access public
+	 * @return string
+	 */
+	function name () {
+		return $this->_name;
+	}
+	
+	/**
+	 * Set name of this element
+	 *
+	 * @access public
+	 * @param string $name The new name of the element
+	 */
+	function setName ($name) {
+		$this->_name = $name;
+		return true;
+	}
+	
+	/**
+	 * Append to name of this element
+	 *
+	 * @access public
+	 * @param string $chars The chars to append to the name of the element
+	 */
+	function appendToName ($chars) {
+		$this->_name .= $chars;
+		return true;
+	}
+	
+	/**
+	 * Append to attribute of this element
+	 *
+	 * @access public
+	 * @param string $name The name of the attribute
+	 * @param string $chars The chars to append to the attribute of the element
+	 */
+	function appendToAttribute ($name, $chars) {
+		if (!isset ($this->_attributes[$name])) {
+			$this->_attributes[$name] = $chars;
+			return true;
+		}
+		$this->_attributes[$name] .= $chars;
+		return true;
+	}
+	
+	/**
+	 * Set attribute
+	 *
+	 * @access public
+	 * @param string $name The name of the attribute
+	 * @param string $value The new value of the attribute
+	 */
+	function setAttribute ($name, $value) {
+		$this->_attributes[$name] = $value;
+		return true;
+	}
+	
+	/**
+	 * Set code info
+	 *
+	 * @access public
+	 * @param array $info The code info array
+	 */
+	function setCodeInfo ($info) {
+		$this->_codeInfo = $info;
+		$this->_flags = $info['flags'];
+		return true;
+	}
+	
+	/**
+	 * Get attribute value
+	 *
+	 * @access public
+	 * @param string $name The name of the attribute
+	 */
+	function attribute ($name) {
+		if (!isset ($this->_attributes[$name])) {
+			return null;
+		}
+		return $this->_attributes[$name];
+	}
+	
+	/**
+	 * Set flag that this element had a close tag
+	 *
+	 * @access public
+	 */
+	function setHadCloseTag () {
+		$this->_hadCloseTag = true;
+	}
+	
+	/**
+	 * Set flag that this element was already processed by paragraph handling
+	 *
+	 * @access public
+	 */
+	function setParagraphHandled () {
+		$this->_paragraphHandled = true;
+	}
+	
+	/**
+	 * Get flag if this element was already processed by paragraph handling
+	 *
+	 * @access public
+	 * @return bool
+	 */
+	function paragraphHandled () {
+		return $this->_paragraphHandled;
+	}
+	
+	/**
+	 * Get flag if this element had a close tag
+	 *
+	 * @access public
+	 * @return bool
+	 */
+	function hadCloseTag () {
+		return $this->_hadCloseTag;
+	}
+	
+	/**
+	 * Determines whether a criterium matches this node
+	 *
+	 * @access public
+	 * @param string $criterium The criterium that is to be checked
+	 * @param mixed $value The value that is to be compared
+	 * @return bool True if this node matches that criterium
+	 */
+	function matchesCriterium ($criterium, $value) {
+		if ($criterium == 'tagName') {
+			return ($value == $this->_name);
+		}
+		if ($criterium == 'needsTextNodeModification') {
+			return (($this->getFlag ('opentag.before.newline', 'integer', BBCODE_NEWLINE_PARSE) != BBCODE_NEWLINE_PARSE || $this->getFlag ('opentag.after.newline', 'integer', BBCODE_NEWLINE_PARSE) != BBCODE_NEWLINE_PARSE || ($this->_hadCloseTag && ($this->getFlag ('closetag.before.newline', 'integer', BBCODE_NEWLINE_PARSE) != BBCODE_NEWLINE_PARSE || $this->getFlag ('closetag.after.newline', 'integer', BBCODE_NEWLINE_PARSE) != BBCODE_NEWLINE_PARSE))) == (bool)$value);
+		}
+		if (substr ($criterium, 0, 5) == 'flag:') {
+			$criterium = substr ($criterium, 5);
+			return ($this->getFlag ($criterium) == $value);
+		}
+		if (substr ($criterium, 0, 6) == '!flag:') {
+			$criterium = substr ($criterium, 6);
+			return ($this->getFlag ($criterium) != $value);
+		}
+		if (substr ($criterium, 0, 6) == 'flag=:') {
+			$criterium = substr ($criterium, 6);
+			return ($this->getFlag ($criterium) === $value);
+		}
+		if (substr ($criterium, 0, 7) == '!flag=:') {
+			$criterium = substr ($criterium, 7);
+			return ($this->getFlag ($criterium) !== $value);
+		}
+		return parent::matchesCriterium ($criterium, $value);
+	}
+	
+	/**
+	 * Get first child if it is a text node
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &firstChildIfText () {
+		$ret =& $this->firstChild ();
+		if (is_null ($ret)) {
+			return $ret;
+		}
+		if ($ret->_type != STRINGPARSER_NODE_TEXT) {
+			// DON'T DO $ret = null WITHOUT unset BEFORE!
+			// ELSE WE WILL ERASE THE NODE ITSELF! EVIL!
+			unset ($ret);
+			$ret = null;
+		}
+		return $ret;
+	}
+	
+	/**
+	 * Get last child if it is a text node AND if this element had a close tag
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &lastChildIfText () {
+		$ret =& $this->lastChild ();
+		if (is_null ($ret)) {
+			return $ret;
+		}
+		if ($ret->_type != STRINGPARSER_NODE_TEXT || !$this->_hadCloseTag) {
+			// DON'T DO $ret = null WITHOUT unset BEFORE!
+			// ELSE WE WILL ERASE THE NODE ITSELF! EVIL!
+			if ($ret->_type != STRINGPARSER_NODE_TEXT && !$ret->hadCloseTag ()) {
+				$ret2 =& $ret->_findPrevAdjentTextNodeHelper ();
+				unset ($ret);
+				$ret =& $ret2;
+				unset ($ret2);
+			} else {
+				unset ($ret);
+				$ret = null;
+			}
+		}
+		return $ret;
+	}
+	
+	/**
+	 * Find next adjent text node after close tag
+	 *
+	 * returns the node or null if none exists
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &findNextAdjentTextNode () {
+		$ret = null;
+		if (is_null ($this->_parent)) {
+			return $ret;
+		}
+		if (!$this->_hadCloseTag) {
+			return $ret;
+		}
+		$ccount = count ($this->_parent->_children);
+		$found = false;
+		for ($i = 0; $i < $ccount; $i++) {
+			if ($this->_parent->_children[$i]->equals ($this)) {
+				$found = $i;
+				break;
+			}
+		}
+		if ($found === false) {
+			return $ret;
+		}
+		if ($found < $ccount - 1) {
+			if ($this->_parent->_children[$found+1]->_type == STRINGPARSER_NODE_TEXT) {
+				return $this->_parent->_children[$found+1];
+			}
+			return $ret;
+		}
+		if ($this->_parent->_type == STRINGPARSER_BBCODE_NODE_ELEMENT && !$this->_parent->hadCloseTag ()) {
+			$ret =& $this->_parent->findNextAdjentTextNode ();
+			return $ret;
+		}
+		return $ret;
+	}
+	
+	/**
+	 * Find previous adjent text node before open tag
+	 *
+	 * returns the node or null if none exists
+	 *
+	 * @access public
+	 * @return mixed
+	 */
+	function &findPrevAdjentTextNode () {
+		$ret = null;
+		if (is_null ($this->_parent)) {
+			return $ret;
+		}
+		$ccount = count ($this->_parent->_children);
+		$found = false;
+		for ($i = 0; $i < $ccount; $i++) {
+			if ($this->_parent->_children[$i]->equals ($this)) {
+				$found = $i;
+				break;
+			}
+		}
+		if ($found === false) {
+			return $ret;
+		}
+		if ($found > 0) {
+			if ($this->_parent->_children[$found-1]->_type == STRINGPARSER_NODE_TEXT) {
+				return $this->_parent->_children[$found-1];
+			}
+			if (!$this->_parent->_children[$found-1]->hadCloseTag ()) {
+				$ret =& $this->_parent->_children[$found-1]->_findPrevAdjentTextNodeHelper ();
+			}
+			return $ret;
+		}
+		return $ret;
+	}
+	
+	/**
+	 * Helper function for findPrevAdjentTextNode
+	 *
+	 * Looks at the last child node; if it's a text node, it returns it,
+	 * if the element node did not have an open tag, it calls itself
+	 * recursively.
+	 */
+	function &_findPrevAdjentTextNodeHelper () {
+		$lastnode =& $this->lastChild ();
+		if ($lastnode->_type == STRINGPARSER_NODE_TEXT) {
+			return $lastnode;
+		}
+		if (!$lastnode->hadCloseTag ()) {
+			$ret =& $lastnode->_findPrevAdjentTextNodeHelper ();
+		} else {
+			$ret = null;
+		}
+		return $ret;
+	}
+	
+	/**
+	 * Get Flag
+	 *
+	 * @access public
+	 * @param string $flag The requested flag
+	 * @param string $type The requested type of the return value
+	 * @param mixed $default The default return value
+	 * @return mixed
+	 */
+	function getFlag ($flag, $type = 'mixed', $default = null) {
+		if (!isset ($this->_flags[$flag])) {
+			return $default;
+		}
+		$return = $this->_flags[$flag];
+		if ($type != 'mixed') {
+			settype ($return, $type);
+		}
+		return $return;
+	}
+	
+	/**
+	 * Set a flag
+	 *
+	 * @access public
+	 * @param string $name The name of the flag
+	 * @param mixed $value The value of the flag
+	 */
+	function setFlag ($name, $value) {
+		$this->_flags[$name] = $value;
+		return true;
+	}
+	
+	/**
+	 * Validate code
+	 *
+	 * @access public
+	 * @param string $action The action which is to be called ('validate'
+	 *                       for first validation, 'validate_again' for
+	 *                       second validation (optional))
+	 * @return bool
+	 */
+	function validate ($action = 'validate') {
+		if ($action != 'validate' && $action != 'validate_again') {
+			return false;
+		}
+		if ($this->_codeInfo['callback_type'] != 'simple_replace' && $this->_codeInfo['callback_type'] != 'simple_replace_single') {
+			if (!is_callable ($this->_codeInfo['callback_func'])) {
+				return false;
+			}
+			
+			if (($this->_codeInfo['callback_type'] == 'usecontent' || $this->_codeInfo['callback_type'] == 'usecontent?' || $this->_codeInfo['callback_type'] == 'callback_replace?') && count ($this->_children) == 1 && $this->_children[0]->_type == STRINGPARSER_NODE_TEXT) {
+				// we have to make sure the object gets passed on as a reference
+				// if we do call_user_func(..., &$this) this will clash with PHP5
+				$callArray = array ($action, $this->_attributes, $this->_children[0]->content, $this->_codeInfo['callback_params']);
+				$callArray[] =& $this;
+				$res = call_user_func_array ($this->_codeInfo['callback_func'], $callArray);
+				if ($res) {
+					// ok, now, if we've got a usecontent type, set a flag that
+					// this may not be broken up by paragraph handling!
+					// but PLEASE do NOT change if already set to any other setting
+					// than BBCODE_PARAGRAPH_ALLOW_BREAKUP because we could
+					// override e.g. BBCODE_PARAGRAPH_BLOCK_ELEMENT!
+					$val = $this->getFlag ('paragraph_type', 'integer', BBCODE_PARAGRAPH_ALLOW_BREAKUP);
+					if ($val == BBCODE_PARAGRAPH_ALLOW_BREAKUP) {
+						$this->_flags['paragraph_type'] = BBCODE_PARAGRAPH_ALLOW_INSIDE;
+					}
+				}
+				return $res;
+			}
+			
+			// we have to make sure the object gets passed on as a reference
+			// if we do call_user_func(..., &$this) this will clash with PHP5
+			$callArray = array ($action, $this->_attributes, null, $this->_codeInfo['callback_params']);
+			$callArray[] =& $this;
+			return call_user_func_array ($this->_codeInfo['callback_func'], $callArray);
+		}
+		return (bool)(!count ($this->_attributes));
+	}
+	
+	/**
+	 * Get replacement for this code
+	 *
+	 * @access public
+	 * @param string $subcontent The content of all sub-nodes
+	 * @return string
+	 */
+	function getReplacement ($subcontent) {
+		if ($this->_codeInfo['callback_type'] == 'simple_replace' || $this->_codeInfo['callback_type'] == 'simple_replace_single') {
+			if ($this->_codeInfo['callback_type'] == 'simple_replace_single') {
+				if (strlen ($subcontent)) { // can't be!
+					return false;
+				}
+				return $this->_codeInfo['callback_params']['start_tag'];
+			}
+			return $this->_codeInfo['callback_params']['start_tag'].$subcontent.$this->_codeInfo['callback_params']['end_tag'];
+		}
+		// else usecontent, usecontent? or callback_replace or callback_replace_single
+		// => call function (the function is callable, determined in validate()!)
+		
+		// we have to make sure the object gets passed on as a reference
+		// if we do call_user_func(..., &$this) this will clash with PHP5
+		$callArray = array ('output', $this->_attributes, $subcontent, $this->_codeInfo['callback_params']);
+		$callArray[] =& $this;
+		return call_user_func_array ($this->_codeInfo['callback_func'], $callArray);
+	}
+	
+	/**
+	 * Dump this node to a string
+	 *
+	 * @access protected
+	 * @return string
+	 */
+	function _dumpToString () {
+		$str = "bbcode \"".substr (preg_replace ('/\s+/', ' ', $this->_name), 0, 40)."\"";
+		if (count ($this->_attributes)) {
+			$attribs = array_keys ($this->_attributes);
+			sort ($attribs);
+			$str .= ' (';
+			$i = 0;
+			foreach ($attribs as $attrib) {
+				if ($i != 0) {
+					$str .= ', ';
+				}
+				$str .= $attrib.'="';
+				$str .= substr (preg_replace ('/\s+/', ' ', $this->_attributes[$attrib]), 0, 10);
+				$str .= '"';
+				$i++;
+			}
+			$str .= ')';
+		}
+		return $str;
+	}
+}
+
+?>
\ No newline at end of file

Added: YDFramework2.0/trunk/YDFramework2/javascript/bbtextarea.js
===================================================================
--- YDFramework2.0/trunk/YDFramework2/javascript/bbtextarea.js	2006-09-29 12:02:32 UTC (rev 2170)
+++ YDFramework2.0/trunk/YDFramework2/javascript/bbtextarea.js	2006-10-02 08:35:47 UTC (rev 2171)
@@ -0,0 +1,56 @@
+function AddText( myField, startTag, defaultText, endTag ) {
+    myField = document.getElementById( myField );
+    if ( document.selection ) {
+        myField.focus();
+        sel = document.selection.createRange();
+        if ( sel.text.length > 0 ) {
+            sel.text = startTag + sel.text + endTag;
+        } else {
+            if ( endTag == '') {
+                sel.text = startTag;
+            } else {
+                sel.text = startTag + endTag;
+            }
+        }
+    } else if ( myField.selectionStart || myField.selectionStart == '0' ) {
+        var startPos = myField.selectionStart;
+        var endPos = myField.selectionEnd;
+        var cursorPos = endPos;
+        var scrollTop = myField.scrollTop;
+        if ( startPos != endPos ) {
+            myField.value = myField.value.substring(0, startPos)
+                          + startTag
+                          + myField.value.substring(startPos, endPos) 
+                          + endTag
+                          + myField.value.substring(endPos, myField.value.length);
+            cursorPos += startTag.length + endTag.length;
+        } else {
+            if ( endTag == '') {
+                myField.value = myField.value.substring(0, startPos) 
+                              + startTag
+                              + myField.value.substring(endPos, myField.value.length);
+                cursorPos = startPos + startTag.length;
+            } else {
+                myField.value = myField.value.substring(0, startPos) 
+                              + endTag
+                              + myField.value.substring(endPos, myField.value.length);
+                cursorPos = startPos + endTag.length;
+            }
+        }
+        myField.selectionStart = cursorPos;
+        myField.selectionEnd = cursorPos;
+        myField.scrollTop = scrollTop;
+    } else {
+        if ( endTag == '') {
+            myField.value += startTag;
+        } else {
+            myField.value += startTag + endTag;
+        }
+    }
+    myField.focus();
+}
+
+function openWin( url, name, opts ) {
+    win = window.open( url, name, opts );
+    win.focus();
+}



From pclaerhout at mail.berlios.de  Mon Oct  2 15:27:42 2006
From: pclaerhout at mail.berlios.de (pclaerhout at BerliOS)
Date: Mon, 2 Oct 2006 15:27:42 +0200
Subject: [ydf-devel] r2172 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200610021327.k92DRgPj021017@sheep.berlios.de>

Author: pclaerhout
Date: 2006-10-02 15:27:42 +0200 (Mon, 02 Oct 2006)
New Revision: 2172

Modified:
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
Spam comments were not always marked as spam comments. The bug was comparing a string value of $comment['is_spam'] with an integer value 0, which doesn't work properly of course.

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-10-02 08:35:47 UTC (rev 2171)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-10-02 13:27:42 UTC (rev 2172)
@@ -141,7 +141,7 @@
                     }
 
                     // Set the subject
-                    if ( $comment['is_spam'] == 0 ) {
+                    if ( $comment['is_spam'] == '0' ) {
                         $eml->setSubject( t('new_comment') . ': ' . strip_tags( $item['title'] ) );
                     } else {
                         $eml->setSubject( '[spam] ' . t('new_comment') . ': ' . strip_tags( $item['title'] ) );



From pclaerhout at mail.berlios.de  Mon Oct  2 15:33:01 2006
From: pclaerhout at mail.berlios.de (pclaerhout at BerliOS)
Date: Mon, 2 Oct 2006 15:33:01 +0200
Subject: [ydf-devel] r2173 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200610021333.k92DX10b021793@sheep.berlios.de>

Author: pclaerhout
Date: 2006-10-02 15:33:01 +0200 (Mon, 02 Oct 2006)
New Revision: 2173

Modified:
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
Fixed my previous commit properly.

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-10-02 13:27:42 UTC (rev 2172)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-10-02 13:33:01 UTC (rev 2173)
@@ -129,7 +129,7 @@
                     $eml->addBcc( $item['user_email'] );
 
                     // Spam emails do not go to the subscribers
-                    if ( $comment['is_spam'] == '0' ) {
+                    if ( intval( $comment['is_spam'] ) == 0 ) {
                         foreach ( $subscribers as $subscriber ) {
                             $eml->addBcc( $subscriber );
                         }
@@ -141,7 +141,7 @@
                     }
 
                     // Set the subject
-                    if ( $comment['is_spam'] == '0' ) {
+                    if ( intval( $comment['is_spam'] ) == 0 ) {
                         $eml->setSubject( t('new_comment') . ': ' . strip_tags( $item['title'] ) );
                     } else {
                         $eml->setSubject( '[spam] ' . t('new_comment') . ': ' . strip_tags( $item['title'] ) );



From ximian at mail.berlios.de  Tue Oct  3 23:42:55 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Tue, 3 Oct 2006 23:42:55 +0200
Subject: [ydf-devel] r2174 - in YDFramework2.0/trunk/examples: . ajax
Message-ID: <200610032142.k93LgtqK000232@sheep.berlios.de>

Author: ximian
Date: 2006-10-03 23:42:54 +0200 (Tue, 03 Oct 2006)
New Revision: 2174

Added:
   YDFramework2.0/trunk/examples/ajax/defaultEvent.php
   YDFramework2.0/trunk/examples/ajax/defaultEvent.tpl
Modified:
   YDFramework2.0/trunk/examples/index.tpl
Log:
- added an YDAjax example on how to create and handle default events

Added: YDFramework2.0/trunk/examples/ajax/defaultEvent.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/defaultEvent.php	2006-10-02 13:33:01 UTC (rev 2173)
+++ YDFramework2.0/trunk/examples/ajax/defaultEvent.php	2006-10-03 21:42:54 UTC (rev 2174)
@@ -0,0 +1,72 @@
+<?php
+	// Standard include
+	include_once( dirname( __FILE__ ) . '/../../YDFramework2/YDF2_init.php' );
+
+	// Includes
+	YDInclude( 'YDRequest.php' );
+	YDInclude( 'YDTemplate.php' );
+	YDInclude( 'YDForm.php' );
+	YDInclude( 'YDAjax.php' );
+
+
+	class defaultEvent extends YDRequest {
+
+
+		function defaultEvent() {
+
+			$this->YDRequest();
+
+			$this->template = new YDTemplate();
+			$this->ajax = new YDAjax( & $this->template );
+		}	
+
+
+		function actionDefault() {
+
+
+			// crete a simple form
+			$form = new YDForm( 'myform' );
+			$form->addElement( 'button', 'mybutton', 'Standard form button event' );
+
+			// add an event to form button, JS event and default event handling
+			$this->ajax->addForm( $form );
+			$this->ajax->addEvent( 'mybutton',       array( &$this, 'buttonEvent' ) );
+			$this->ajax->addEvent( 'customEvent(x)', array( &$this, 'customEvent' ), 'var x' );
+			$this->ajax->addEvent( '*',              array( &$this, 'defaultOne' ) );
+
+			// process all events
+			$this->ajax->processEvents();
+
+			$this->template->assign( 'form',  $form->toHTML() );
+			$this->template->display();
+		}
+
+
+		// ajax response to button
+		function buttonEvent(){
+
+			return YDAjax::message( 'You have clicked on the form button, right?' );
+		}
+
+
+		// ajax response to custom JS event
+		function customEvent( $x ){
+
+			return YDAjax::message( 'You have clicked on custom button.. and it have send: "' . $x . '"' );
+		}
+
+
+		// ajax response to all other events
+		function defaultOne(){
+
+			// get function name and arguments
+			list( $f_name, $f_args ) = func_get_args();
+
+			return YDAjax::message( "Here goes what i got:\n* Function:  '" . $f_name . "'\n* Arguments:  '" . implode( "'; '", $f_args ) . "'" );
+		}
+
+}
+
+
+    YDInclude( 'YDF2_process.php' );
+?>
\ No newline at end of file

Added: YDFramework2.0/trunk/examples/ajax/defaultEvent.tpl
===================================================================
--- YDFramework2.0/trunk/examples/ajax/defaultEvent.tpl	2006-10-02 13:33:01 UTC (rev 2173)
+++ YDFramework2.0/trunk/examples/ajax/defaultEvent.tpl	2006-10-03 21:42:54 UTC (rev 2174)
@@ -0,0 +1,45 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+<head><title></title></head>
+<body>
+<p><br />
+  This example demonstrates how to create and handle default events (read: events that are not registered by your YDAjax code)</p>
+<p>{$form}</p>
+<p>Custom event: 
+  <label>
+  <input type="submit" name="Submit" value="This event is a registered JS event: customEvent('Hello YDF!')" onclick="customEvent('Hello YDF!')" />
+  </label>
+</p>
+<p>&nbsp;</p>
+<p>Hardcoded JS function '__someOtherEvent' to simulate some hardcoded ajax call 'someOtherAjaxCall' :</p>
+{literal}
+<script>
+	function __someOtherEvent(){return xajax.call("someOtherAjaxCall", arguments, 1);}  
+</script>
+<pre id="line1">
+function __someOtherEvent(){return xajax.call(&quot;someOtherAjaxCall&quot;, arguments, 1);}  </pre>
+{/literal}
+
+<p>Event not registered:
+  <label>
+  <input type="submit" name="Submit2" value="This event will be catched as a default event: __someOtherEvent( 'firstArg', 'secondArg', 'allArgsYouwant' )" onclick="__someOtherEvent( 'firstArg', 'secondArg', 'allArgsYouwant' )" />
+  </label>
+</p>
+
+<p>&nbsp;</p>
+<p>Another JS function '__hackEvent' to simulate an hardcoded ajax call 'myCall' :</p>
+{literal}
+<script>
+	function __hackEvent(){return xajax.call("myCall", arguments, 1);}  
+</script>
+<pre id="line1">
+function __hackEvent(){return xajax.call(&quot;myCall&quot;, arguments, 1);}  </pre>
+{/literal}
+
+<p>Event not registered:
+  <label>
+  <input type="submit" name="Submit2" value="This event will be catched as a default event: __hackEvent( 'justOneArgument' )" onclick="__hackEvent( 'justOneArgument' )" />
+  </label>
+</p>
+
+</body>
+</html>

Modified: YDFramework2.0/trunk/examples/index.tpl
===================================================================
--- YDFramework2.0/trunk/examples/index.tpl	2006-10-02 13:33:01 UTC (rev 2173)
+++ YDFramework2.0/trunk/examples/index.tpl	2006-10-03 21:42:54 UTC (rev 2174)
@@ -69,16 +69,14 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=firstapp/index.php">firstapp/index.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=firstapp/index.tpl">firstapp/index.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=firstapp/index.tpl">firstapp/index.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database/index.php">Tutorial application using a database</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=database/index.php">database/index.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database/index.tpl">database/index.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database/index.tpl">database/index.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDBase: the base class</b></td>
@@ -88,8 +86,7 @@
             <td valign="top">&nbsp;</td>
             <td valign="top"><a href="base.php">Using the YDBase object</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=base.php">base.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=base.php">base.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDConfig: the global configuration</b></td>
@@ -99,8 +96,7 @@
             <td valign="top">&nbsp;</td>
             <td valign="top"><a href="config.php">Using the YDConfig object</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=config.php">config.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=config.php">config.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>How requests are processed</b></td>
@@ -112,20 +108,17 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.php">sample.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.tpl">sample.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.tpl">sample.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="phpinfo.php">Showing the PHP information</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=phpinfo.php">phpinfo.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=phpinfo.php">phpinfo.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="extending.php">Extending the YDRequest base class</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=extending.php">extending.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=extending.php">extending.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="multi_apps/index.php">Multiple applications</a></td>
@@ -146,16 +139,14 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=multi_apps/app2/index.php">multi_apps/app2/index.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=multi_apps/app2/index.tpl">multi_apps/app2/index.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=multi_apps/app2/index.tpl">multi_apps/app2/index.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="callbacks.php">Using callbacks</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.php">callbacks.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.tpl">callbacks.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=sample.tpl">callbacks.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using templates</b></td>
@@ -167,8 +158,7 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=template_smarty.php">template_smarty.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=template_smarty.tpl">template_smarty.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=template_smarty.tpl">template_smarty.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="template_php.php">Using PHP templates with short open tags</a><br />
@@ -178,8 +168,7 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=template_php.tpl">template_php.tpl</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=template_php2.tpl">template_php2.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=template_php2.tpl">template_php2.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="cache/index.php">Smarty caching</a> </td>
@@ -190,8 +179,7 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=cache/subdir/index.php">cache/subdir/index.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=cache/subdir/index.tpl">cache/subdir/index.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=cache/subdir/index.tpl">cache/subdir/index.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using and validating forms</b></td>
@@ -205,58 +193,49 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=form.tpl">form.tpl</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_selector.tpl">form_selector.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_selector.tpl">form_selector.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form2.php">Form handling and validation (new style)</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form2.php">form2.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form2.php">form2.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_date.php">YDForm using a combination of date elements</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_date.php">form_date.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_date.php">form_date.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_get.php">YDForm using GET parameters</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_get.php">form_get.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_get.php">form_get.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_rule.php">YDForm using form rules</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_rule.php">form_rule.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_rule.php">form_rule.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_compare.php">YDForm using compare rules</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_compare.php">form_compare.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_compare.php">form_compare.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="fileupload.php">Handling file uploads</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=fileupload.php">fileupload.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=fileupload.tpl">fileupload.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=fileupload.tpl">fileupload.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_modified.php">Getting the modified values</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_modified.php">form_modified.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_modified.php">form_modified.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="validaterules.php">Validation rules</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=validaterules.php">validaterules.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=validaterules.php">validaterules.php</a>            </td>
         </tr>
         <tr>
           <td valign="top"><a href="form_filters.php">Form filters</a> </td>
@@ -265,16 +244,14 @@
         <tr>
             <td valign="top"><a href="form_xml2.php">Rendering and importing using XML</a></td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_xml2.php">form_xml2.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_xml2.php">form_xml2.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="form_checkboxgroup.php">Using the checkboxgroup element</a></td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=form_checkboxgroup.php">form_checkboxgroup.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_checkboxgroup.tpl">form_checkboxgroup.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_checkboxgroup.tpl">form_checkboxgroup.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using logfiles</b></td>
@@ -284,8 +261,7 @@
             <td valign="top">&nbsp;</td>
             <td valign="top"><a href="logging.php">Using file logging</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=logging.php">logging.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=logging.php">logging.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Handling authentication</b></td>
@@ -305,16 +281,14 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=login/userinfo.php">login/userinfo.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=login/userinfo.tpl">login/userinfo.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=login/userinfo.tpl">login/userinfo.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="auth_ipcheck.php">Authentication based on IP numbers</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=auth_ipcheck.php">auth_ipcheck.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=auth_ipcheck.tpl">auth_ipcheck.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=auth_ipcheck.tpl">auth_ipcheck.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="http_auth/index.php">Basic HTTP Authentication</a> </td>
@@ -327,8 +301,7 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=http_auth/userinfo.php">http_auth/userinfo.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=http_auth/userinfo.tpl">http_auth/userinfo.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=http_auth/userinfo.tpl">http_auth/userinfo.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Connecting to and using databases</b></td>
@@ -341,91 +314,75 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=database.php">database.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database.tpl">database.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database.tpl">database.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database1.php">Database connectivity - YD MySQL library</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=database1.php">database1.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database1.tpl">database1.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database1.tpl">database1.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database2.php">Database connectivity - YD SQLite library</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database2.php">database2.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database2.php">database2.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database3.php">Database connectivity - YD Oracle library</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database3.php">database3.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database3.php">database3.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database4.php">Database connectivity - YD PostgreSQL library</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database4.php">database4.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database4.php">database4.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="database_paging.php">Paged recordsets - YD MySQL library</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=database_paging.php">database_paging.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_paging.tpl">database_paging.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_paging.tpl">database_paging.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="array_paging.php">Paged arrays</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging.php">array_paging.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging.tpl">array_paging.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging.tpl">array_paging.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="array_paging_with_sorting.php">Paged arrays with sorting</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging_with_sorting.php">array_paging_with_sorting.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging_with_sorting.tpl">array_paging_with_sorting.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=array_paging_with_sorting.tpl">array_paging_with_sorting.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top">
                 <a href="database_backup.php">Making MySQL database backups</a><br/>
-                <a href="database_backup.php?do=restore">Restoring a database backup</a><br/>
-            </td>
+                <a href="database_backup.php?do=restore">Restoring a database backup</a><br/>            </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_backup.php">database_backup.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_backup.php">database_backup.php</a>            </td>
         </tr>
         <tr>
             <td valign="top">
-                <a href="database_tree.php">Database trees</a><br/>
-            </td>
+                <a href="database_tree.php">Database trees</a><br/>            </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_tree.php">database_tree.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_tree.php">database_tree.php</a>            </td>
         </tr>
         <tr>
             <td valign="top">
-                <a href="db_metadata.php">Querying database metadata</a><br/>
-            </td>
+                <a href="db_metadata.php">Querying database metadata</a><br/>            </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=db_metadata.php">db_metadata.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=db_metadata.php">db_metadata.php</a>            </td>
         </tr>
         <tr>
             <td valign="top">
-                <a href="database_named_instances.php">Using named database instances/a><br/>
-            </td>
+                <a href="database_named_instances.php">Using named database instances/a><br/>            </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_named_instances.php">database_named_instances.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=database_named_instances.php">database_named_instances.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using files, images and directories</b></td>
@@ -435,8 +392,7 @@
             <td rowspan="5" valign="top">&nbsp;</td>
             <td valign="top"><a href="path.php">YDPath module</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=path.php">path.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=path.php">path.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="fsfile.php">YDFSFile object</a> <br/>
@@ -444,20 +400,17 @@
               <a href="fsfile.php?do=download2">YDFSFile object - File download with changed name</a><br/>
               <a href="fsfile.php?do=downloadinline">YDFSFile object - Inline File download</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsfile.php">fsfile.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsfile.php">fsfile.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="fsdirectory.php">YDFSDirectory object</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsdirectory.php">fsdirectory.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsdirectory.php">fsdirectory.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="fsdirectory2.php">More examples for the YDFSDirectory object</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsdirectory2.php">fsdirectory2.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsdirectory2.php">fsdirectory2.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="fsimage.php">YDFSImage object</a> <br/>
@@ -467,8 +420,7 @@
               <a href="fsimage.php?do=thumbnail6">YDFSImage object - thumbnail cropping</a> <br/>
               <a href="fsimage.php?do=thumbnailsave">YDFSImage object - thumbnail saving</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsimage.php">fsimage.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=fsimage.php">fsimage.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using URLs and downloading data</b></td>
@@ -483,16 +435,14 @@
               <a href="url.php?do=alter">YDUrl object - Altering URLs</a> <br/>
               <a href="url.php?do=merge">YDUrl object - Merging URLs</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=url.php">url.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=url.php">url.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="pbase.php">Combining YDUrl and YDArrayUtil</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=pbase.php">pbase.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=pbase.tpl">pbase.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=pbase.tpl">pbase.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Using XML/RPC clients and servers</b></td>
@@ -502,14 +452,12 @@
             <td rowspan="2" valign="top">&nbsp;</td>
             <td valign="top"><a href="xmlrpcclient.php">XML/RPC client</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=xmlrpcclient.php">xmlrpcclient.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=xmlrpcclient.php">xmlrpcclient.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="xmlrpcserver.php">XML/RPC server</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=xmlrpcserver.php">xmlrpcserver.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=xmlrpcserver.php">xmlrpcserver.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Constructing and sending emails</b></td>
@@ -523,8 +471,7 @@
                 <br/>
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=email.tpl">email.tpl</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=email_template.tpl">email_template.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=email_template.tpl">email_template.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>Creating RSS and ATOM feeds</b></td>
@@ -538,8 +485,7 @@
               <a href="feedcreator.php?do=rss20">YDFeedCreator object - RSS 2.0 output</a> <br/>
               <a href="feedcreator.php?do=atom">YDFeedCreator object - Atom output</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=feedcreator.php">feedcreator.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=feedcreator.php">feedcreator.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDCart: a shopping cart</b></td>
@@ -551,8 +497,7 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=cart.php">cart.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=cart.tpl">cart.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=cart.tpl">cart.tpl</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDLocale: internationalization</b></td>
@@ -562,8 +507,7 @@
             <td valign="top">&nbsp;</td>
             <td valign="top"><a href="locale.php">Using the YDLocale object</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=locale.php">locale.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=locale.php">locale.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDDatabaseObject</b></td>
@@ -598,8 +542,7 @@
               <a href="timer.php?YD_DEBUG=2">Using timers/markers (debug 2)</a> <br/>
               <a href="timer.php?do=standaloneTimer">Using a standalone timers</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=timer.php">timer.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=timer.php">timer.php</a>            </td>
         </tr>
         <tr>
             <td colspan="2"><b>&nbsp;<br/>YDGraph</b></td>
@@ -621,11 +564,9 @@
                 <a href="graph.php?do=demo10">Impuls chart</a> <br/>
                 <a href="graph.php?do=demo11">Impuls and dots chart</a> <br/>
                 <a href="graph.php?do=demo12">Impuls, dots and lines chart</a> <br/>
-                <a href="graph.php?do=demo13">Pie chart</a> <br/>
-            </td>
+                <a href="graph.php?do=demo13">Pie chart</a> <br/>            </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=graph.php">graph.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=graph.php">graph.php</a>            </td>
         </tr>
         <tr>
           <td colspan="2"><b>&nbsp;<br/>
@@ -633,44 +574,36 @@
           <td><b>&nbsp;</b></td>
         </tr>
         <tr>
-          <td valign="top" rowspan="18">&nbsp;</td>
-          <td valign="top"><a href="ajax/version.php">Simple ajax example</a><br/>
-          </td>
+          <td valign="top" rowspan="19">&nbsp;</td>
+          <td valign="top"><a href="ajax/version.php">Simple ajax example</a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/version.php">ajax/version.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/two_buttons.php">Two buttons with different events </a><br/>
-          </td>
+          <td valign="top"><a href="ajax/two_buttons.php">Two buttons with different events </a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/two_buttons.php">ajax/two_buttons.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/calculator.php">Sum calculator </a><br/>
-          </td>
+          <td valign="top"><a href="ajax/calculator.php">Sum calculator </a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/calculator.php">ajax/calculator.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/calculator_dynamic.php">Four operations calculator </a><br/>
-          </td>
+          <td valign="top"><a href="ajax/calculator_dynamic.php">Four operations calculator </a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/calculator_dynamic.php">ajax/calculator_dynamic.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/cars.php">Dependency between select elements</a><br/>
-          </td>
+          <td valign="top"><a href="ajax/cars.php">Dependency between select elements</a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/cars.php">ajax/cars.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/date_calculator.php">Date calculator using a datetimeselect</a><br/>
-          </td>
+          <td valign="top"><a href="ajax/date_calculator.php">Date calculator using a datetimeselect</a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/date_calculator.php">ajax/date_calculator.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/form.php">Form submission and validation</a><br/>
-          </td>
+          <td valign="top"><a href="ajax/form.php">Form submission and validation</a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/form.php">ajax/form.php</a> </td>
         </tr>
         <tr>
-          <td valign="top"><a href="ajax/two_forms.php">Two forms in same template</a><br/>
-          </td>
+          <td valign="top"><a href="ajax/two_forms.php">Two forms in same template</a><br/>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/two_forms.php">ajax/two_forms.php</a> </td>
           </tr>
         <tr>
@@ -710,9 +643,13 @@
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/autocompleter.php">ajax/autocompleter.php</a> </td>
         </tr>
         <tr>
+          <td valign="top"><a href="ajax/defaultEvent.php">How to handle default events </a><br/></td>
+          <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/defaultEvent.php">ajax/defaultEvent.php</a></td>
+        </tr>
+        <tr>
           <td valign="top"><a href="ajax/functions.php">Without a YDForm </a></td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/functions.php">ajax/functions.php</a> </td>
-        </tr>
+          </tr>
         <tr>
           <td colspan="3"><b>&nbsp;<br/>
             YDCMComponent: Content Management</b><b>&nbsp;components</b></td>
@@ -749,8 +686,7 @@
         <tr>
           <td valign="top">&nbsp;&nbsp;&nbsp;<a href="cm/backend/permissions.php">Permissions ( register, check, add, delete )</a><br>
             &nbsp;&nbsp;&nbsp;<a href="cm/backend/permissions.php?do=alias">Permissions ( using alias )</a><br>
-            &nbsp;&nbsp;&nbsp;<a href="cm/backend/permissions.php?do=alwaysRegistered">Permissions ( always registered actions )</a><br>
-          </td>
+            &nbsp;&nbsp;&nbsp;<a href="cm/backend/permissions.php?do=alwaysRegistered">Permissions ( always registered actions )</a><br>          </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=cm/backend/permissions.php">cm/backend/permissions.php</a> </td>
           </tr>
         <tr>
@@ -765,8 +701,7 @@
               <a href="xml_example.php?do=array">YDXml - working with XML arrays</a> <br/>
               <a href="xml_example.php?do=save">YDXml - saving XML files</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=xml_example.php">xml_example.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=xml_example.php">xml_example.php</a>            </td>
         </tr>
         <tr>
           <td colspan="2"><b>&nbsp;<br/>
@@ -794,34 +729,29 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=constants.php">constants.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=constants.tpl">constants.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=constants.tpl">constants.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="browserinfo.php">Showing the browser information</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=browserinfo.php">browserinfo.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=browserinfo.php">browserinfo.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="arrayutil.php">Array utilities</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=arrayutil.php">arrayutil.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=arrayutil.php">arrayutil.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="bbcode.php">BBCode conversion</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=bbcode.php">bbcode.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=bbcode.txt">bbcode.txt</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=bbcode.txt">bbcode.txt</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="stacktrace.php">Using the YDStacktrace function</a> </td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=stacktrace.php">stacktrace.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=stacktrace.php">stacktrace.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="stringutil.php">StringUtil class</a> </td>
@@ -832,40 +762,34 @@
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=ajax.php">ajax.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=ajax.tpl">ajax.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=ajax.tpl">ajax.tpl</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="encryption.php">Encryption and decryption</a></td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=encryption.php">encryption.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=encryption.php">encryption.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="persistent.php">Using persistent data</a></td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=persistent.php">persistent.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=persistent.php">persistent.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="pdfreport.php">Using PDF reports</a></td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=pdfreport.php">pdfreport.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=pdfreport.php">pdfreport.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="guidutil.php">Using the YDGuidUtil class</a></td>
             <td valign="top">
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=guidutil.php">guidutil.php</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=guidutil.php">guidutil.php</a>            </td>
         </tr>
         <tr>
             <td valign="top"><a href="xul.php">Using XUL</a> (FireFox and Mozilla only)</td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=xul.php">xul.php</a>
                 <br/>
-                <a href="{$YD_SELF_SCRIPT}?do=source&id=xul.tpl">xul.tpl</a>
-            </td>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=xul.tpl">xul.tpl</a>            </td>
         </tr>
         </table>
 



From rene at reneschmidt.de  Wed Oct  4 17:54:19 2006
From: rene at reneschmidt.de (Rene Schmidt)
Date: Wed, 04 Oct 2006 17:54:19 +0200
Subject: [ydf-devel] German weblog translation
Message-ID: <1159977259.9712.5.camel@callisto>

Hello,

you all did a very nice job on the weblog, congrats.

I just wanted to let you know I'm working on a german translation which
should be done by weekend/next week.

However, I've seen some strings get lowercased by force, such as

./include/YDWeblog_init.php:  
return $showIfNone ? strtolower( t( 'no_comments_yet' ) ) : '';

This is not suitable for german language because nouns (such as
'comment') always begin with a capital letter. Lowercasing them would
make them look *wrong*. If we stumble across such statements we should
remove strtolower() statements.

-- 
Rene Schmidt
Berater f?r Web-Entwicklung und eCommerce 
Lange Str. 15, 21614 Buxtehude
Tel. 04161.558363 - http://www.reneschmidt.de/



From ximian at mail.berlios.de  Wed Oct  4 19:49:20 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Wed, 4 Oct 2006 19:49:20 +0200
Subject: [ydf-devel] r2175 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200610041749.k94HnKqf020557@sheep.berlios.de>

Author: ximian
Date: 2006-10-04 19:49:20 +0200 (Wed, 04 Oct 2006)
New Revision: 2175

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
- added YDAjax::getActualId that gets the actual DOM id of an element by first seeing if it is a form element.
  By Graeme

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-10-03 21:42:54 UTC (rev 2174)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-10-04 17:49:20 UTC (rev 2175)
@@ -314,6 +314,27 @@
 
 
         /**
+         * This method gets the actual DOM id of an element by first seeing if it is a form element.
+         *
+         *  @param $id        Form element name or a generic id string.
+         */
+         function getActualId( $id ) {
+         
+            // try to get a form containing this element
+            $form = $this->__getForm( $id );
+
+            // if $id is not a form element return string
+            if ( is_null( $form ) ) return $id;
+
+            // if is a form element, get element
+            $elem = & $form->getElement( $id );
+
+            // return real element id
+            return $elem->getAttribute( 'id' );
+         }
+
+
+        /**
          *	This method assigns the current autocompleter with a result array
          *
          *	@param $result		Autocompleter results array



From francisco at fusemail.com  Wed Oct  4 19:50:16 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Wed, 04 Oct 2006 18:50:16 +0100
Subject: [ydf-devel] Add new method YDAjax::getActualID( $id )
In-Reply-To: <4aef63030609250155k4194f3f9ha9e439ce4712ad95@mail.gmail.com>
References: <20060924020044.5677.qmail@web54010.mail.yahoo.com>
	<4aef63030609250155k4194f3f9ha9e439ce4712ad95@mail.gmail.com>
Message-ID: <4523F458.1000501@fusemail.com>


Added on b2175.


regards
Francisco


From rene at reneschmidt.de  Wed Oct  4 23:48:40 2006
From: rene at reneschmidt.de (Rene Schmidt)
Date: Wed, 04 Oct 2006 23:48:40 +0200
Subject: [ydf-devel] German weblog translation
Message-ID: <1159998521.18852.2.camel@callisto>

Hello,

you all did a very nice job on the weblog, congrats.

I just wanted to let you know I'm working on a german translation which
should be done by weekend/next week.

However, I've seen some strings get lowercased by force, such as

./include/YDWeblog_init.php:  
return $showIfNone ? strtolower( t( 'no_comments_yet' ) ) : '';

This is not suitable for german language because nouns (such as
'comment') always begin with a capital letter. Lowercasing them would
make them look *wrong*. If we stumble across such statements we should
remove strtolower() statements.

-- 
Rene Schmidt
Berater f?r Web-Entwicklung und eCommerce 
Lange Str. 15, 21614 Buxtehude
Tel. 04161.558363 - http://www.reneschmidt.de/



From muitocomplicado at gmail.com  Wed Oct  4 23:53:47 2006
From: muitocomplicado at gmail.com (David Bittencourt)
Date: Wed, 4 Oct 2006 18:53:47 -0300
Subject: [ydf-devel] German weblog translation
In-Reply-To: <1159998521.18852.2.camel@callisto>
References: <1159998521.18852.2.camel@callisto>
Message-ID: <12260be20610041453h2658d76ftf0f47e3d7ba1f979@mail.gmail.com>

I think Pieter can take a look at this, but I just want to give you a hint.
There's a script in

/include/languages/check.php

that receives a "lang" GET variable to compare the missing translations and
deprecated ones with the english translation.

For example:

http://localhost/weblog/include/languages/check.php?lang=nl

-db

On 10/4/06, Rene Schmidt <rene at reneschmidt.de> wrote:
>
> Hello,
>
> you all did a very nice job on the weblog, congrats.
>
> I just wanted to let you know I'm working on a german translation which
> should be done by weekend/next week.
>
> However, I've seen some strings get lowercased by force, such as
>
> ./include/YDWeblog_init.php:
> return $showIfNone ? strtolower( t( 'no_comments_yet' ) ) : '';
>
> This is not suitable for german language because nouns (such as
> 'comment') always begin with a capital letter. Lowercasing them would
> make them look *wrong*. If we stumble across such statements we should
> remove strtolower() statements.
>
> --
> Rene Schmidt
> Berater f?r Web-Entwicklung und eCommerce
> Lange Str. 15, 21614 Buxtehude
> Tel. 04161.558363 - http://www.reneschmidt.de/
>
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/ydframework-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061004/71aaa6b4/attachment.html>

From ximian at mail.berlios.de  Thu Oct  5 02:02:39 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Thu, 5 Oct 2006 02:02:39 +0200
Subject: [ydf-devel] r2176 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610050002.k9502dMT025277@sheep.berlios.de>

Author: ximian
Date: 2006-10-05 02:02:37 +0200 (Thu, 05 Oct 2006)
New Revision: 2176

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php
Log:
- disabled checkboxes have gray label too. usability feature ;)
  See examples/form_checkboxgroup.php example

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php	2006-10-04 17:49:20 UTC (rev 2175)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php	2006-10-05 00:02:37 UTC (rev 2176)
@@ -108,7 +108,18 @@
             $this->setValue( $val );
         } 
 
+
         /**
+         *	This function extends element disable by making the element label gray too
+         */
+		function disable(){
+		
+			parent::disable( null );
+			$this->_label = '<span style="color:#999999">' . $this->_label . '</span>';
+		}
+
+
+        /**
          *	This function will return the element as HTML.
          *
          *	@returns	The form element as HTML text.



From ximian at mail.berlios.de  Thu Oct  5 02:09:40 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Thu, 5 Oct 2006 02:09:40 +0200
Subject: [ydf-devel] r2177 - YDFramework2.0/trunk/examples
Message-ID: <200610050009.k9509eDR025689@sheep.berlios.de>

Author: ximian
Date: 2006-10-05 02:09:40 +0200 (Thu, 05 Oct 2006)
New Revision: 2177

Modified:
   YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
Log:
the effect on the last commit in better shown in the example ( examples/form_checkboxgroup.tpl )

Modified: YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-10-05 00:02:37 UTC (rev 2176)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-10-05 00:09:40 UTC (rev 2177)
@@ -1 +1,12 @@
+{literal}
+	<style>
+		BODY{
+			font-family:Verdana, Arial, Helvetica, sans-serif;
+			font-size:12px;
+			color:#0000FF;
+		}
+	</style>
+{/literal}
+
+
 {$form}
\ No newline at end of file



From ximian at mail.berlios.de  Sat Oct  7 01:44:10 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Sat, 7 Oct 2006 01:44:10 +0200
Subject: [ydf-devel] r2178 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610062344.k96NiA5w018728@sheep.berlios.de>

Author: ximian
Date: 2006-10-07 01:44:08 +0200 (Sat, 07 Oct 2006)
New Revision: 2178

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
- new feature: checkboxGroups can have a 'select all' checkbox that selects/unselects all checkboxes of that group only.
  support for custom style too

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-05 00:09:40 UTC (rev 2177)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-06 23:44:08 UTC (rev 2178)
@@ -84,6 +84,7 @@
             if ( isset ( $attributes['separator'] ) )
 				$this->_separator = $attributes['separator'];
 
+			$this->_addSelectAll = false;
         }
 
 
@@ -115,6 +116,18 @@
 
 
         /**
+         *	This function sets checkboxgroup with 'select all' button
+         *
+         *	@param	$onBottom	(Optional) Boolean that defines if button should be added on top (TRUE) or on bottom (FALSE) options
+         */
+        function addSelectAll( $onBottom = true ) {
+
+			$this->_addSelectAll = true;
+			$this->_addSelectAll_onBottom = $onBottom;
+        }
+
+
+        /**
          *	This function disables checkboxes
          *
          *	@param	$options	Value, Array of values to disable
@@ -175,8 +188,25 @@
                 if ( $this->_position == 'right' ) $output .= $item->toHtml() . '&nbsp;<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>' . $this->_separator;
                 else                               $output .= '<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>&nbsp;' . $item->toHtml() . $this->_separator;
 
+			// check if a 'select all' button should be added
+			if ( $this->_addSelectAll ){ 
+
+				// check default translation
+				if( !isset( $GLOBALS['t']['select all'] ) ) $GLOBALS['t']['select all'] = 'select all';
+
+				// compute button code
+				$bcode = '<input type="checkbox" onclick="for (var i=0;i<document.forms[\''. $this->_form . '\'].elements.length;i++) if (document.forms[\''. $this->_form . '\'].elements[i].type==\'checkbox\' && !document.forms[\''. $this->_form . '\'].elements[i].disabled && /' . $this->_name . '\[[0-9]+\]/.test( document.forms[\''. $this->_form . '\'].elements[i].name ) ) document.forms[\''. $this->_form . '\'].elements[i].checked = this.checked;" />';
+
+				// compute button label
+				if ( $this->_position == 'right' ) $bcode = '<span class="select_all"><label>' . $bcode . ' ' . t( 'select all' ) . '</label></span>';
+				else                               $bcode = '<span class="select_all"><label>' . t( 'select all' ) . ' ' . $bcode . '</label></span>';
+
+				// add button code to html output
+				if ( $this->_addSelectAll_onBottom ) $output = $output . $bcode;
+				else                                 $output = $bcode . $this->_separator . $output;
+			}
+
             return $output;
-
         }
 
     }



From ximian at mail.berlios.de  Sat Oct  7 01:45:30 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Sat, 7 Oct 2006 01:45:30 +0200
Subject: [ydf-devel] r2179 - YDFramework2.0/trunk/examples
Message-ID: <200610062345.k96NjTtj018879@sheep.berlios.de>

Author: ximian
Date: 2006-10-07 01:45:29 +0200 (Sat, 07 Oct 2006)
New Revision: 2179

Modified:
   YDFramework2.0/trunk/examples/form_checkboxgroup.php
   YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
Log:
- updated examples/form_checkboxgroup.php on how to use the 'select all' feature added in previous commit

Modified: YDFramework2.0/trunk/examples/form_checkboxgroup.php
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-10-06 23:44:08 UTC (rev 2178)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-10-06 23:45:29 UTC (rev 2179)
@@ -26,7 +26,7 @@
             $form->addElement( 'checkboxgroup', 'choose_multiple2', 'Choose multiple HORIZONTAL',       array('sep' => 'h' ), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple3', 'Choose multiple VERTICAL',         array('sep' => 'v' ), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple4', 'Choose multiple LEFT',             array('sep' => 'l' ), array( 0 => 'choice 1', 1 => 'choice 2' ) );
-            $form->addElement( 'checkboxgroup', 'choose_multiple5', 'Choose multiple RIGHT',            array('sep' => 'r' ), array( 0 => 'choice 1', 1 => 'choice 2' ) );
+    $el = & $form->addElement( 'checkboxgroup', 'choose_multiple5', 'Choose multiple RIGHT',            array('sep' => 'r' ), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple6', 'Choose multiple VERTICAL LEFT',    array('sep' => 'vl'), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple7', 'Choose multiple VERTICAL RIGHT',   array('sep' => 'vr'), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple8', 'Choose multiple HORIZONTAL LEFT',  array('sep' => 'hl'), array( 0 => 'choice 1', 1 => 'choice 2' ) );
@@ -41,6 +41,9 @@
             $form->disable( 'choose_multiple2', array( 0, 1 ) );
             $form->disable( 'choose_multiple3' );
 
+			// Add and example about 'select all' button
+			$el->addSelectAll();
+
             // Add the submit button
             $form->addElement( 'submit', 'btnSubmit', 'submit' );
 

Modified: YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-10-06 23:44:08 UTC (rev 2178)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-10-06 23:45:29 UTC (rev 2179)
@@ -5,6 +5,12 @@
 			font-size:12px;
 			color:#0000FF;
 		}
+
+		/* SELECT ALL checkboxes style */
+		.select_all{
+			font-size:10px; 
+			color:#000000;
+		}
 	</style>
 {/literal}
 



From david_db at mail.berlios.de  Tue Oct 10 15:05:23 2006
From: david_db at mail.berlios.de (david_db at mail.berlios.de)
Date: Tue, 10 Oct 2006 15:05:23 +0200
Subject: [ydf-devel] r2180 -
	YDFramework2.0/trunk/YDFramework2/addons/YDInstaller
Message-ID: <200610101305.k9AD5NAJ011641@sheep.berlios.de>

Author: david_db
Date: 2006-10-10 15:05:20 +0200 (Tue, 10 Oct 2006)
New Revision: 2180

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDInstaller/YDInstaller.php
Log:
Small fix on missing variables in YDInstaller

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDInstaller/YDInstaller.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDInstaller/YDInstaller.php	2006-10-06 23:45:29 UTC (rev 2179)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDInstaller/YDInstaller.php	2006-10-10 13:05:20 UTC (rev 2180)
@@ -41,6 +41,8 @@
         var $_items = array();
         var $_css = array();
         var $_css_link = array();
+        var $_js = array();
+        var $_js_link = array();
         var $_errors = array();
 
         /**



From rene at reneschmidt.de  Wed Oct 11 22:56:03 2006
From: rene at reneschmidt.de (Rene Schmidt)
Date: Wed, 11 Oct 2006 22:56:03 +0200
Subject: [ydf-devel] Weblog german translation
Message-ID: <1160600163.4957.12.camel@callisto>

Here it is fellows
-- 
Rene Schmidt
Berater f?r Web-Entwicklung und eCommerce 
Lange Str. 15, 21614 Buxtehude
Tel. 04161.558363 - http://www.reneschmidt.de/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: language_de.php
Type: application/x-php
Size: 18265 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061011/da8a2b95/attachment.bin>

From ximian at mail.berlios.de  Fri Oct 13 21:16:25 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 13 Oct 2006 21:16:25 +0200
Subject: [ydf-devel] r2181 -
	YDFramework2.0/trunk/examples/weblog/include/languages
Message-ID: <200610131916.k9DJGPHF025766@sheep.berlios.de>

Author: ximian
Date: 2006-10-13 21:16:25 +0200 (Fri, 13 Oct 2006)
New Revision: 2181

Added:
   YDFramework2.0/trunk/examples/weblog/include/languages/language_de.php
Log:
- added new language file to weblog ( by Rene Schmidt )

Added: YDFramework2.0/trunk/examples/weblog/include/languages/language_de.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/languages/language_de.php	2006-10-10 13:05:20 UTC (rev 2180)
+++ YDFramework2.0/trunk/examples/weblog/include/languages/language_de.php	2006-10-13 19:16:25 UTC (rev 2181)
@@ -0,0 +1,364 @@
+<?php
+// (c) Rene Schmidt, please retain copyright
+// GFDL license
+// Version 0.1 - first version, incomplete
+
+// General stuff
+$GLOBALS['t']['not_found'] = 'Nicht gefunden';
+$GLOBALS['t']['sorry_not_there'] = 'Entschuldigen Sie bitte, das von Ihnen Gesuchte existiert nicht.';
+$GLOBALS['t']['sorry_not_found'] = 'Entschuldigen Sie bitte, das von Ihnen Gesuchte existiert nicht.';
+$GLOBALS['t']['no_items_found'] = 'Entschuldigen Sie bitte, das von Ihnen Gesuchte existiert nicht.';
+$GLOBALS['t']['by'] = 'von';
+$GLOBALS['t']['required'] = 'notwendig';
+$GLOBALS['t']['login'] = 'Anmelden';
+$GLOBALS['t']['actions'] = 'Aktionen';
+$GLOBALS['t']['save'] = 'Speichern';
+$GLOBALS['t']['edit'] = 'Bearbeiten';
+$GLOBALS['t']['delete'] = 'L&ouml;schen';
+$GLOBALS['t']['previous'] = 'Zur&uuml;ck';
+$GLOBALS['t']['next'] = 'Weiter';
+$GLOBALS['t']['total'] = 'Gesamt';
+$GLOBALS['t']['of'] = 'von';
+$GLOBALS['t']['at'] = 'um';
+$GLOBALS['t']['title'] = 'Titel';
+$GLOBALS['t']['install_warning'] = 'Aus Sicherheitsgr&uuml;nden m&uuml;ssen die Dateien install.php und install.tpl gel&ouml;scht werden!';
+$GLOBALS['t']['home'] = 'Startseite';
+$GLOBALS['t']['view'] = 'Ansicht';
+$GLOBALS['t']['author'] = 'Autor';
+$GLOBALS['t']['more'] = 'mehr';
+$GLOBALS['t']['err_general'] = 'Ein Fehler ist aufgetreten';
+$GLOBALS['t']['back'] = 'Zur&uuml;ck';
+$GLOBALS['t']['yes'] = 'Ja';
+$GLOBALS['t']['no'] = 'Nein';
+$GLOBALS['t']['confirm_action'] = 'M&ouml;chten Sie die Aktion wirklich ausf&uuml;hren lassen?';
+$GLOBALS['t']['rows'] = 'Zeile(n)';
+$GLOBALS['t']['tables'] = 'Tabellen';
+$GLOBALS['t']['related_items'] = 'Themenverwandte Beitr&auml;ge';
+
+// __std_header.tpl
+$GLOBALS['t']['another_powered_by'] = 'Betrieben mit ' . YD_FW_NAME . '!';
+
+// __std_footer.tpl
+$GLOBALS['t']['or'] = 'or';
+$GLOBALS['t']['powered_by'] = 'Dieses Weblog wird betrieben mit ';
+$GLOBALS['t']['syndicate_as'] = 'Syndicate this weblog as ';
+$GLOBALS['t']['syndicate_comments_as'] = 'Comments as ';
+$GLOBALS['t']['syndicate_gallery_as'] = 'Galleries as ';
+$GLOBALS['t']['design_by'] = 'Gestaltet von Michael Heilemann.';
+
+// __std_sidebar.tpl
+$GLOBALS['t']['weblogs'] = 'Weblogs';
+$GLOBALS['t']['weblog'] = 'Weblog';
+$GLOBALS['t']['pages'] = 'Seiten';
+$GLOBALS['t']['page'] = 'Seite';
+$GLOBALS['t']['archives'] = 'Archiv';
+$GLOBALS['t']['archives_gallery'] = 'Fotogalerie';
+$GLOBALS['t']['categories'] = 'Kategorien';
+$GLOBALS['t']['view_posts_filed_under'] = 'View all posts filed under';
+$GLOBALS['t']['links'] = 'Verweise';
+$GLOBALS['t']['link_to'] = 'Link to';
+$GLOBALS['t']['admin'] = 'Admin';
+
+// archive.tpl
+
+// category.tpl
+$GLOBALS['t']['archive_for_the'] = 'Archive for the';
+$GLOBALS['t']['category'] = 'Kategorie';
+
+// index.tpl
+$GLOBALS['t']['posted_in'] = 'abgelegt in';
+$GLOBALS['t']['older_items'] = '&Auml;ltere Beitr&auml;ge';
+
+// item.tpl
+$GLOBALS['t']['older_post'] = '&Auml;lterer Beitrag';
+$GLOBALS['t']['newer_post'] = 'Neuerer Beitrag';
+$GLOBALS['t']['posted_under'] = 'Dieser Betrag wurde ver&ouml;ffentlicht am';
+$GLOBALS['t']['filed_under'] = 'and is filed under';
+$GLOBALS['t']['can_leave_comment'] = 'Sie k&ouml;nnen einen <a href="#respond">Kommentar hinterlassen</a>';
+$GLOBALS['t']['trackback'] = 'Trackback';
+$GLOBALS['t']['from_your_site'] = 'von Ihrer eigenen Seite.';
+$GLOBALS['t']['to'] = 'an';
+$GLOBALS['t']['says'] = 'sagt';
+$GLOBALS['t']['leave_comment'] = 'Kommentar hinterlassen';
+$GLOBALS['t']['error_comment'] = 'Beim Speichern des Kommentars ist ein Fehler aufgetreten.';
+$GLOBALS['t']['name'] = 'Name';
+$GLOBALS['t']['mail_not_published'] = 'E-Mail (bleibt privat)';
+$GLOBALS['t']['website'] = 'Website';
+$GLOBALS['t']['submit_comment'] = 'Kommentar senden';
+$GLOBALS['t']['ta_enter_url'] = 'URL eingeben';
+$GLOBALS['t']['ta_enter_email'] = 'E-Mail-Adresse eingeben';
+$GLOBALS['t']['ta_enter_image'] = 'Komplette URL des Bildes eingeben';
+$GLOBALS['t']['err_name'] = 'Der Name fehlt';
+$GLOBALS['t']['err_name_email'] = 'Der Name darf keine E-Mail-Adresse sein';
+$GLOBALS['t']['err_email'] = 'E-Mail-Adresse fehlt oder ist fehlerhaft';
+$GLOBALS['t']['err_website'] = 'The website specified is not a valid URL';
+$GLOBALS['t']['err_comment'] = 'Der Kommentar ist notwendig';
+$GLOBALS['t']['with'] = 'f&uuml;r';
+$GLOBALS['t']['item_closed'] = 'Dieser Beitrag ist gesperrt.';
+$GLOBALS['t']['spam'] = 'Spam';
+$GLOBALS['t']['no_spam'] = 'Kein Spam';
+$GLOBALS['t']['choose_no_spam'] = 'W&auml;hlen Sie "kein Spam"';
+$GLOBALS['t']['err_userspam'] = 'Spam-Versuch erkannt';
+
+// comment_email.tpl
+$GLOBALS['t']['new_comment'] = 'Neuer Kommentar';
+$GLOBALS['t']['item_title'] = 'Titel des Beitrags';
+$GLOBALS['t']['wrote'] = 'schrieb';
+
+// item_email.tpl
+$GLOBALS['t']['new_item'] = 'Neuer Beitrag';
+
+// page.tpl
+$GLOBALS['t']['created_on'] = 'Erstellt am';
+$GLOBALS['t']['last_modified_on'] = 'Zuletzt ge&auml;ndert am';
+
+// Comments
+$GLOBALS['t']['no_comments_yet'] = 'Keine Kommentare bis jetzt';
+$GLOBALS['t']['comment'] = 'Kommentar';
+$GLOBALS['t']['comments'] = 'Kommentare';
+$GLOBALS['t']['err_name_length'] = 'Der Name darf nicht l&auml;nger als 35 Zeichen sein';
+
+// manage/__mng_header.tpl
+$GLOBALS['t']['confirm_delete'] = 'Are you sure you want to delete:';
+$GLOBALS['t']['logoff'] = 'Abmelden';
+$GLOBALS['t']['view_site'] = 'Website ansehen';
+$GLOBALS['t']['user'] = 'Benutzer';
+$GLOBALS['t']['server'] = 'Server';
+$GLOBALS['t']['h_shortcuts'] = 'Shortcuts';
+$GLOBALS['t']['a_admin_home'] = 'Admin-Startseite';
+$GLOBALS['t']['a_view_site'] = 'Website ansehen';
+$GLOBALS['t']['h_contents'] = 'Inhalt';
+$GLOBALS['t']['a_weblogs'] = 'Weblogs';
+$GLOBALS['t']['a_items'] = 'Beitr&auml;ge';
+$GLOBALS['t']['a_comments'] = 'Kommentare';
+$GLOBALS['t']['a_links'] = 'Verweise';
+$GLOBALS['t']['a_pages'] = 'Seiten';
+$GLOBALS['t']['a_images'] = 'Bilder';
+$GLOBALS['t']['a_categories'] = 'Kategorien';
+$GLOBALS['t']['h_global_settings'] = 'Globale Einstellungen';
+$GLOBALS['t']['a_users'] = 'Benutzer';
+$GLOBALS['t']['a_settings'] = 'Einstellungen';
+$GLOBALS['t']['h_maintenance'] = 'Wartung';
+$GLOBALS['t']['a_cleanup_cache'] = 'Zwischenspeicher';
+$GLOBALS['t']['a_server_info'] = 'Server-Informationen';
+$GLOBALS['t']['h_statistics'] = 'Statistik';
+$GLOBALS['t']['a_statistics'] = 'Statistik';
+$GLOBALS['t']['h_logoff'] = 'Abmelden';
+$GLOBALS['t']['a_logoff'] = 'Abmelden';
+
+// manage/login.tpl
+$GLOBALS['t']['username'] = 'Benutzername';
+$GLOBALS['t']['password'] = 'Kennwort';
+$GLOBALS['t']['msg_login'] = 'Bitte Benutzername und Kennwort eingeben';
+$GLOBALS['t']['err_login'] = 'Beim Anmelden gab es ein Problem';
+$GLOBALS['t']['err_username'] = 'Benutzername fehlt';
+$GLOBALS['t']['err_password'] = 'Kennwort fehlt oder ist falsch';
+$GLOBALS['t']['err_login_all'] = 'Benutzername und/oder Kennwort falsch';
+
+// manage/cache.tpl
+$GLOBALS['t']['cleanup'] = 'Aufr&auml;umen';
+$GLOBALS['t']['cleanup_cache'] = 'Zwischenspeicher l&ouml;schen';
+$GLOBALS['t']['cache_cleaned_up'] = 'Zwischenspeicher bereinigt!';
+
+// manage/serverinfo.tpl
+$GLOBALS['t']['system'] = 'System';
+$GLOBALS['t']['server_name'] = 'Namee des Servers';
+$GLOBALS['t']['server_address'] = 'Adresse des Servers';
+$GLOBALS['t']['server_port'] = 'Port';
+$GLOBALS['t']['server_software'] = 'Server-Software';
+$GLOBALS['t']['operating_system'] = 'Betriebssystem';
+$GLOBALS['t']['version'] = 'Version';
+$GLOBALS['t']['loaded_modules'] = 'Geladene Module';
+$GLOBALS['t']['server_api'] = 'Server-API';
+$GLOBALS['t']['registered_streams'] = 'Registrierte PHP-Streams';
+$GLOBALS['t']['include_path'] = 'Include Path';
+$GLOBALS['t']['full_php_info'] = 'Komplette PHP-Informationen';
+
+// manage/stats.tpl
+$GLOBALS['t']['general_stats'] = 'Allgemeine Statistik';
+$GLOBALS['t']['installed_since'] = 'Installiert seit';
+$GLOBALS['t']['num_days_online'] = 'Tage online';
+$GLOBALS['t']['days'] = 'Tag(e)';
+$GLOBALS['t']['hits'] = 'Anfrage(n)';
+$GLOBALS['t']['no_bots'] = ' (ohne Roboter)';
+$GLOBALS['t']['total_hits'] = 'Gesamtzahl Anfragen';
+$GLOBALS['t']['total_hits_no_bots'] = $GLOBALS['t']['total_hits'] . $GLOBALS['t']['no_bots'];
+$GLOBALS['t']['avg_hits_per_day'] = 'Durchschnittliche Anzahl Anfragen pro Tag';
+$GLOBALS['t']['avg_hits_per_day_no_bots'] = $GLOBALS['t']['avg_hits_per_day'] . $GLOBALS['t']['no_bots'];
+$GLOBALS['t']['total_average_stats'] = 'Totals and averages';
+$GLOBALS['t']['hits_last_6_months'] = 'Anzahl Anfragen in den letzten 6 Monaten';
+$GLOBALS['t']['all_months'] = 'All months';
+$GLOBALS['t']['hits_last_7_days'] = 'Hits last 7 days';
+$GLOBALS['t']['all_days'] = 'All days';
+$GLOBALS['t']['nothing_found'] = 'Nothing found';
+$GLOBALS['t']['top_10_urls'] = 'The 10 most visited URLs';
+$GLOBALS['t']['all_urls'] = 'All URLs';
+$GLOBALS['t']['web_browsers'] = 'Webbrowser';
+$GLOBALS['t']['operating_systems'] = 'Betriebssysteme';
+$GLOBALS['t']['other'] = 'Andere';
+$GLOBALS['t']['totalitems'] = 'Gesamtzahl Beitr&auml;ge';
+$GLOBALS['t']['totalcomments'] = 'Anzahl Kommentare';
+$GLOBALS['t']['items'] = 'Beitr&auml;ge';
+$GLOBALS['t']['top_10_commenters'] = 'Die 10 aktivsten Kommentierer';
+$GLOBALS['t']['all_commenters'] = 'Alle Kommentierer';
+$GLOBALS['t']['reset_stats'] = 'Statistik zur&uuml;cksetzen';
+
+// manage/users.tpl
+$GLOBALS['t']['useremail'] = 'E-Mail-Adresse';
+$GLOBALS['t']['created'] = 'Erstellt am';
+$GLOBALS['t']['add_user'] = 'Benutzer hinzuf&uuml;gen';
+$GLOBALS['t']['req_useremail'] = 'E-Mail-Adresse fehlt oder ist ung&uuml;ltig';
+$GLOBALS['t']['req_loginpass'] = 'Kennwort wird ben&ouml;tigt';
+$GLOBALS['t']['user_dup'] = 'Benutzer existiert bereits';
+$GLOBALS['t']['change_user_desc'] = 'Changing user:';
+
+// manage/images.tpl
+$GLOBALS['t']['upload_image'] = 'Bild hochladen';
+$GLOBALS['t']['ok'] = 'OK';
+$GLOBALS['t']['size'] = 'Gr&ouml;&szlig;e';
+$GLOBALS['t']['type'] = 'Typ';
+$GLOBALS['t']['dimensions'] = 'Abmessungen';
+$GLOBALS['t']['no_images_found'] = 'Es wurden keine Bilder gefunden';
+
+// manage/categories.tpl
+$GLOBALS['t']['add_category'] = 'Kategorie hinzuf&uuml;gen';
+$GLOBALS['t']['number_of_items'] = 'Anzahl Kategorien';
+$GLOBALS['t']['change_category_desc'] = 'Kategorie bearbeiten';
+$GLOBALS['t']['err_category_title'] = '"Name der Kategorie" wird ben&ouml;tigt';
+$GLOBALS['t']['err_unique_category'] = 'Kategorie existiert bereits';
+$GLOBALS['t']['no_categories_found'] = 'Es wurden keinen Kategorien gefunden';
+
+// manage/links.tpl
+$GLOBALS['t']['link_title'] = 'Titel des Verweises';
+$GLOBALS['t']['link_url'] = 'Verweis-Adresse (URL)';
+$GLOBALS['t']['add_link'] = 'Hinzuf&uuml;gen';
+$GLOBALS['t']['err_link_title'] = 'Verweistitel wird ben&ouml;tigt';
+$GLOBALS['t']['err_link_url'] = 'Verweis-Adresse wird ben&ouml;tigt';
+$GLOBALS['t']['err_unique_link'] = 'Verweis-Adresse existiert bereits';
+$GLOBALS['t']['change_link_desc'] = 'Verweis &auml;ndern';
+$GLOBALS['t']['no_links_found'] = 'Es wurden keine Verweise gefunden.';
+$GLOBALS['t']['num_visits'] = 'Besuche';
+
+// manage/pages.tpl
+$GLOBALS['t']['add_page'] = 'Seite hinzuf&uuml;gen';
+$GLOBALS['t']['page_title'] = 'Seitentitel';
+$GLOBALS['t']['page_body'] = 'Seiteninhalt';
+$GLOBALS['t']['change_page_desc'] = 'Seite &auml;ndern';
+$GLOBALS['t']['err_page_title'] = 'Seitentitel wird ben&ouml;tigt';
+$GLOBALS['t']['err_page_body'] = 'Seiteninhalt wird ben&ouml;tigt';
+$GLOBALS['t']['no_pages_found'] = 'Es wurden keine Seiten gefunden';
+
+// manage/comments.tpl
+$GLOBALS['t']['date'] = 'Datum';
+$GLOBALS['t']['parent'] = 'Parent Item';
+$GLOBALS['t']['change_comment_desc'] = 'Change comment';
+$GLOBALS['t']['mail'] = 'Email';
+$GLOBALS['t']['no_comments_found'] = 'No comments were found';
+$GLOBALS['t']['posted_from'] = 'Posted from IP address';
+$GLOBALS['t']['a_comments_spam'] = 'Spam comments';
+$GLOBALS['t']['mark_as_spam'] = 'mark as spam';
+$GLOBALS['t']['mark_as_not_spam'] = 'als Nicht-Spam markieren';
+$GLOBALS['t']['is_spam'] = 'Spam-Kommentar';
+
+// manage/config.tpl
+$GLOBALS['t']['cfg_db_settings'] = 'Datenbank-Einstellungen';
+$GLOBALS['t']['cfg_db_host'] = 'Datenbank-Hostname';
+$GLOBALS['t']['cfg_db_name'] = 'Datenbank-Name';
+$GLOBALS['t']['cfg_db_user'] = 'Datenbank-Benutzername';
+$GLOBALS['t']['cfg_db_pass'] = 'Datenbank-Kennwort';
+$GLOBALS['t']['cfg_weblog_settings'] = 'Weblog-Einstellugen';
+$GLOBALS['t']['cfg_weblog_title'] = 'Weblog-Titel';
+$GLOBALS['t']['cfg_weblog_description'] = 'Weblog-Beschreibung';
+$GLOBALS['t']['cfg_weblog_entries_fp'] = 'Anzahl Beitr&auml;ge auf der Startseite';
+$GLOBALS['t']['cfg_weblog_skin'] = 'Weblog-Aussehen';
+$GLOBALS['t']['cfg_weblog_language'] = 'Sprache des Weblogs';
+$GLOBALS['t']['cfg_weblog_date_format'] = 'Datumsformat';
+$GLOBALS['t']['cfg_notification'] = 'Benachrichtigungseinstellungen';
+$GLOBALS['t']['cfg_notification_email_comment'] = 'Neue Kommentare per E-Mail senden';
+$GLOBALS['t']['cfg_notification_email_item'] = 'Neue Beitr&auml;ge per E-Mail an Weblog-Betreiber senden';
+$GLOBALS['t']['cfg_rss'] = 'Syndizierungseinstellungen';
+$GLOBALS['t']['cfg_rss_max_syndicated_items'] = 'Anzahl syndizierter Beitr&auml;ge';
+$GLOBALS['t']['err_db_host'] = 'Database-Hostname wird ben&ouml;tigt';
+$GLOBALS['t']['err_db_name'] = 'Database Name wird ben&ouml;tigt';
+$GLOBALS['t']['err_db_user'] = 'Database Username wird ben&ouml;tigt';
+$GLOBALS['t']['err_weblog_title'] = 'Weblog-Titel wird ben&ouml;tigt';
+$GLOBALS['t']['err_weblog_entries_fp'] = '"Anzahl Beitr&auml;ge auf der Startseite" wird ben&ouml;tigt';
+$GLOBALS['t']['err_weblog_entries_fp_num'] = '"Anzahl Beitr&auml;ge auf der Startseite" muss numerisch sein';
+$GLOBALS['t']['err_max_syndicated_items'] = '"Anzahl syndizierter Beitr&auml;ge" wird ben&ouml;tigt';
+$GLOBALS['t']['err_max_syndicated_items_num'] = '"Anzahl syndizierter Beitr&auml;ge" muss numerisch sein';
+$GLOBALS['t']['change_config'] = '&Auml;ndern';
+$GLOBALS['t']['cfg_db_prefix'] = 'Tabelle-Prefix f&uuml;r Datenbank';
+$GLOBALS['t']['cfg_cache'] = 'Zwischenspeichern';
+$GLOBALS['t']['cfg_use_cache_comment'] = '&Ouml;ffentlich zug&auml;ngliche Seiten zwischenspeichern';
+$GLOBALS['t']['cfg_friendly_urls'] = 'Friendly URLs';
+$GLOBALS['t']['cfg_spam_protection'] = 'Spam-Schutz';
+$GLOBALS['t']['cfg_auto_close_items'] = 'Nach x Tagen Kommentare verbieten';
+$GLOBALS['t']['err_auto_close_items'] = '"Nach x Tagen Kommentare verbieten" sollte einen numerischen Wert haben';
+$GLOBALS['t']['cfg_include_debug_info'] = 'Debug-Informationen zeigen';
+$GLOBALS['t']['cfg_default_item_settings'] = 'Standardwerte f&uuml;r neue Beitr&auml;ge';
+$GLOBALS['t']['cfg_weblog_google_analytics'] = '<a href="http://www.google.com/analytics/" target="_blank">Google-Analytics</a>-Konto';
+$GLOBALS['t']['cfg_google_analytics'] = 'Google-Analytics';
+$GLOBALS['t']['cfg_keep_stats'] = 'Track statistics';
+$GLOBALS['t']['cfg_blocked_ips'] = 'Blocked IP addresses separated by comma\'s. An asterix can be used as a wildcard.';
+$GLOBALS['t']['cfg_akismet_key'] = 'Akismet-API-Schl&uuml;ssel (<a href="http://wordpress.com/signup/" target="_blank">Schl&uuml;ssel hier erhalten</a>)';
+$GLOBALS['t']['cfg_max_img_size'] = 'Maximale Bildgr&ouml;&szlig;e';
+
+// manage/item.tpl
+$GLOBALS['t']['item_title'] = 'Titel des Beitrags';
+$GLOBALS['t']['item_body'] = 'Beitragsinhalt';
+$GLOBALS['t']['item_body_more'] = 'Beitragsinhalt (erweitert)';
+$GLOBALS['t']['select_image'] = 'Bild w&auml;hlen';
+$GLOBALS['t']['view'] = 'Ansehen';
+$GLOBALS['t']['add_item'] = 'Beitrag hinzuf&uuml;gen';
+$GLOBALS['t']['change_item_desc'] = 'Beitrag &auml;ndern';
+$GLOBALS['t']['err_item_title'] = 'Ein Titel f&uuml;r den Beitrag wird ben&ouml;tigt';
+$GLOBALS['t']['err_item_body'] = 'Inhalt f&uuml;r den Beitrag wird ben&ouml;tigt';
+$GLOBALS['t']['gallery'] = 'Fotos';
+$GLOBALS['t']['allow_comments'] = 'Erlaube Kommentare';
+$GLOBALS['t']['auto_close_item'] = 'Beitrag schlie&szlig;en ';
+if ( YDConfig::get( 'auto_close_items', '' ) != '' ) {
+    $GLOBALS['t']['auto_close_item'] .= 'nach ' . YDConfig::get( 'auto_close_items', '' ) . ' Tagen';
+}
+$GLOBALS['t']['is_draft'] = 'Entwurf (nicht ver&ouml;ffentlichen)';
+$GLOBALS['t']['draft'] = 'Entwurf';
+$GLOBALS['t']['closed'] = 'geschlossen';
+$GLOBALS['t']['active_items'] = 'Aktive Beitr&auml;ge';
+$GLOBALS['t']['drafts_items'] = 'Entw&uuml;rfe';
+$GLOBALS['t']['closed_items'] = 'Geschlossene Beitr&auml;ge';
+
+// item_gallery.tpl
+$GLOBALS['t']['no_images_yet'] = 'Keine Bilder bis jetzt';
+$GLOBALS['t']['image'] = 'Bild';
+$GLOBALS['t']['images'] = 'Bilder';
+$GLOBALS['t']['item'] = 'Beitrag';
+$GLOBALS['t']['edit_meta'] = 'Metadaten';
+
+// manage/index.tpl
+$GLOBALS['t']['latest_items'] = 'Neueste Beitr&auml;ge';
+$GLOBALS['t']['overview'] = '&Uuml;berblick';
+
+// manage/dbbackup.tpl
+$GLOBALS['t']['a_db_backup'] = 'Datenbank-Sicherung';
+$GLOBALS['t']['bck_name'] = 'Dateiname f&uuml;r Datenbank-Sicherung';
+$GLOBALS['t']['gz_compress'] = 'Datenbank-Sicherung mit GZip komprimieren';
+$GLOBALS['t']['backup'] = 'Sicherung';
+$GLOBALS['t']['err_bck_name'] = 'Dateiname f&uuml;r Datenbank-Sicherung wird ben&ouml;tigt';
+$GLOBALS['t']['bck_name_comment'] = 'Use "%DBNAME" for database name and <a href="http://www.php.net/strftime" target="_blank">any strftime options</a> for time specification. The extension will be automagically added. Any other text will be preserved.';
+$GLOBALS['t']['bck_type'] = 'Sicherungstyp';
+$GLOBALS['t']['bck_full'] = 'Komplette Sicherung (Struktur und Daten)';
+$GLOBALS['t']['bck_structure_only'] = 'Nur Struktur';
+$GLOBALS['t']['bck_data_only'] = 'Nur Daten';
+
+// manage/version_info.tpl
+$GLOBALS['t']['h_diagtools'] = 'Werkzeuge';
+$GLOBALS['t']['a_version_info'] = 'Automatische Aktualisierung';
+$GLOBALS['t']['version_check'] = 'Version pr&uuml;fen';
+$GLOBALS['t']['installed_version'] = 'Installierte Version';
+$GLOBALS['t']['development_version'] = 'Entwicklungsversion';
+$GLOBALS['t']['msg_correct_version'] = 'Es existieren keine neuere Versionen';
+$GLOBALS['t']['msg_install_update'] = 'Es gibt neuere Versionen';
+$GLOBALS['t']['development_changelog'] = 'Entwicklungsgeschichte';
+$GLOBALS['t']['schema_version'] = 'Version des Datenbank-Schemas';
+$GLOBALS['t']['installed_on'] = 'installiert am';
+
+?>



From pclaerhout at mail.berlios.de  Sat Oct 14 17:06:19 2006
From: pclaerhout at mail.berlios.de (pclaerhout at BerliOS)
Date: Sat, 14 Oct 2006 17:06:19 +0200
Subject: [ydf-devel] r2182 - in YDFramework2.0/trunk/examples/weblog: .
	include
Message-ID: <200610141506.k9EF6JNn023379@sheep.berlios.de>

Author: pclaerhout
Date: 2006-10-14 17:06:19 +0200 (Sat, 14 Oct 2006)
New Revision: 2182

Modified:
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
Made some improvements to the comment spam prevention stuff in the weblog application.

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-10-13 19:16:25 UTC (rev 2181)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-10-14 15:06:19 UTC (rev 2182)
@@ -558,20 +558,26 @@
 
                 // Update the comment values
                 if ( $result == NULL || $result === false ) {
-                    $values['is_spam'] = 0;
+                    $values['is_spam'] = '0';
                 } else {
-                    $values['is_spam'] = 1;
+                    $values['is_spam'] = '1';
                 }
 
             }
 
-            // Check the amount of hyperlinks in the comments. More than 3 is marked as spam.
+            // Check the amount of hyperlinks in the comments. More than 1 is marked as spam.
             $count1 = preg_match_all( "/href=/i", $values['comment'], $matches1 );
             $count2 = preg_match_all( "/\[url=/i", $values['comment'], $matches2 );
-            if ( ( $count1 + $count2 ) > 3 ) {
-                $values['is_spam'] = 1;
+            if ( ( $count1 + $count2 ) > 1 ) {
+                $values['is_spam'] = '1';
             }
 
+            // Only 2 http links are allowed
+            $count = preg_match_all( "/http\:\/\//i", $values['comment'], $matches );
+            if ( ( $count ) > 1 ) {
+                $values['is_spam'] = '1';
+            }
+
             // Add the comment
             $result = $this->_executeInsert( '#_comments', $values );
             $comment_id = $this->db->getLastInsertID();

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-10-13 19:16:25 UTC (rev 2181)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-10-14 15:06:19 UTC (rev 2182)
@@ -129,7 +129,7 @@
                     $eml->addBcc( $item['user_email'] );
 
                     // Spam emails do not go to the subscribers
-                    if ( intval( $comment['is_spam'] ) == 0 ) {
+                    if ( strval( $comment['is_spam'] ) == '0' ) {
                         foreach ( $subscribers as $subscriber ) {
                             $eml->addBcc( $subscriber );
                         }
@@ -141,7 +141,7 @@
                     }
 
                     // Set the subject
-                    if ( intval( $comment['is_spam'] ) == 0 ) {
+                    if ( strval( $comment['is_spam'] ) == '0' ) {
                         $eml->setSubject( t('new_comment') . ': ' . strip_tags( $item['title'] ) );
                     } else {
                         $eml->setSubject( '[spam] ' . t('new_comment') . ': ' . strip_tags( $item['title'] ) );



From maximus_meridius79 at yahoo.com  Tue Oct 17 17:34:48 2006
From: maximus_meridius79 at yahoo.com (maximus meridius)
Date: Tue, 17 Oct 2006 08:34:48 -0700 (PDT)
Subject: [ydf-devel] YDAjax and drag-drop
Message-ID: <20061017153449.79678.qmail@web54007.mail.yahoo.com>

    Hi,

I am still working on drag-drop for use with YDAjax. I have startedcleaning it up and have created a new YDLayer class to minimise changesto YDAjax.

I have an example working (not online) that can be used to createdynamic layers in the request or response. This can also be used tocreate dynamic layers containing forms. There is an option to makeindividual layers draggable or modal (i.e. for modal forms). I plan topost a tarball containing an example soon.

For modal forms, the approach is to initiate closing of the form oncethe form has validated in a response. The example will shed some lighton this.

Unfortunately draggable forms don't work in firefox very well (can'tenter text in any of the form fields). I am using the drag-drop effectI mentioned in my original e-mail.

An interesting thing that I just found is a new javascript effectslibrary called mootools by the same author as moo.fx. It has lessdependencies, seems to be more powerful but may not be backwardlycompatible with moo.fx used in YDAjax effects. Here are some links forthe new library: http://mad4milk.net/entry/mootools-releasedand http://mootools.net/ .

There is a good drag drop example here http://snook.ca/archives/javascript/mootools_drag_a/. This site has very favourable comments for mootools since it seems tobe a relatively lightweight but powerful approach compared to othereffects libraries.

Regards,

Graeme

maximus meridius wrote:    Hi,
  
I found a modified version of moo.fx that includes a drag-drop effecthere:
  
  http://clement.lavoillotte.info/devs/moofx/new/#
  
(I can't actually read that site since and couldn't find anyexplanation of the drag-drop that they had created)
  
This has an MIT-style license. I have used this to add drag-drop toYDAjax.
  
I have attached a tarball containing the following files:
  
./examples/ajax/drag.php
./examples/ajax/drag.tpl
./YDFramework2/addons/YDAjax/YDAjax.php
./YDFramework2/addons/YDAjax/js/prototype.lite.js_moo.fx.js_moo.fx.pack.js
  
The Javascript file is a revised version of the existing one providedwith YDAjax. I have added moo.fx.drag.js to the end of the file. I havealso used the original uncompressed moo.fx javascript files for thepurpose of aiding debugging (the javascript worked out of the box).
  
I have added a method "addDraggables" to the YDAjax class.
  
        /**
         *    This method adds a draggabble element
         *
         *    @param $id        The id to assign the draggable
         *  @param $html    The initial html for the draggable
         */        
        function & addDraggable( $id, $html = "", $class ="draggable", $parent = "" ) {
  
This creates a div element that is draggable with the specified CSS"$id". "$html" is for the div content. "$parent" is an optional CSS idthat can be used to add a draggable to an existing div container.Draggables created in this form are restricted to the container. Thecontainer can have a pixel-width or percentage-width.
  
Draggables can overlap. I am not sure how to modify the CSS orjavascript to prevent overlap. It would be nice if overlap could beoptionally turned off.
  
I have setup addDraggable so that it can add a draggable in a requestor in an ajax response.
  
I have created an example. A screenshot of the example is attached. The"Add a Popup" button will create a draggable via an ajax response. Theexample works in Firefox, IE, Opera and Safari (although it does notrefresh correctly in safari).
  
I would like to add a method to create a draggable form that behaves asa modal dialog (i.e. the form must be closed, cancelled or submitted inorder to continue).
  
Enjoy!
  
Regards,
  
Graeme
  
  
    
 
  
---------------------------------
Do you Yahoo!?
Get on board. You'reinvited to try the new Yahoo! Mail.  

---------------------------------
_______________________________________________YDFramework-devel mailing listYDFramework-devel at lists.berlios.dehttps://lists.berlios.de/mailman/listinfo/ydframework-devel  


 		
---------------------------------
 All-new Yahoo! Mail - Fire up a more powerful email and get things done faster.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061017/511d98ee/attachment.html>

From maximus_meridius79 at yahoo.com  Wed Oct 18 17:55:27 2006
From: maximus_meridius79 at yahoo.com (maximus meridius)
Date: Wed, 18 Oct 2006 08:55:27 -0700 (PDT)
Subject: [ydf-devel] YDAjax and mootools
Message-ID: <20061018155527.43867.qmail@web54010.mail.yahoo.com>

Hi,

I have modified YDAjax and YDAjaxEffects classes to
use the new mootools 
javascript framework from http://mootools.net/ .

The effects are more complex to setup internally but
there is much 
greater power and flexibility in mootools. Mootools is
20kb compressed 
whilst moo.fx is 8kb compressed.

A tarball is attached.

-rwxrw-r--  39011 2006-10-19 01:22
./YDFramework2/addons/YDAjax/YDAjax.php
-rwxr--r--   43422 2006-10-18 21:35 
./YDFramework2/addons/YDAjax/js/mootools.svn.76.js
-rwxr--r--  24000 2006-10-19 01:05 
./YDFramework2/addons/YDAjax/js/mootools.svn.compressed.76.js

This uses a configuration variable "YD_AJAX_MOOTOOLS"
to enable mootools 
instead of moo.fx. The change to YDAjax.php is quite
minor. I changed 
YDAjax.php so that the effects interface is compatible
and hence the 
existing effects example "examples/ajax/image2.php"
works without 
change. For an improved implementation and due to the
size of the 
mootools javascript file it would be better to link to
its javascript 
rather than embedding it directly. YDTemplate would
need to be modified 
to do this.

I have not implemented "fadesize". I have also not
tested "hide", "show" 
and focus, however these don't rely on the effects
library.

The mootools is build 76 from the svn repository at
mootools. I have 
included compressed and uncompressed versions of the
javascript since 
the uncompressed file contains the license information
(MIT style license).

Regards,

Graeme




__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ydmootools.tar.gz
Type: application/gzip
Size: 28561 bytes
Desc: 1370806068-ydmootools.tar.gz
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061018/23769a15/attachment.bin>

From francisco at fusemail.com  Wed Oct 18 20:03:19 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Wed, 18 Oct 2006 19:03:19 +0100
Subject: [ydf-devel] YDAjax and mootools
In-Reply-To: <20061018155527.43867.qmail@web54010.mail.yahoo.com>
References: <20061018155527.43867.qmail@web54010.mail.yahoo.com>
Message-ID: <45366C67.7070105@fusemail.com>

Hi Graeme

> 
> I have modified YDAjax and YDAjaxEffects classes to
> use the new mootools 
> javascript framework from http://mootools.net/ .
> 
> The effects are more complex to setup internally but
> there is much 
> greater power and flexibility in mootools. Mootools is
> 20kb compressed 
> whilst moo.fx is 8kb compressed.
> 
> A tarball is attached.
> 
> -rwxrw-r--  39011 2006-10-19 01:22
> ./YDFramework2/addons/YDAjax/YDAjax.php
> -rwxr--r--   43422 2006-10-18 21:35 
> ./YDFramework2/addons/YDAjax/js/mootools.svn.76.js
> -rwxr--r--  24000 2006-10-19 01:05 
> ./YDFramework2/addons/YDAjax/js/mootools.svn.compressed.76.js
> 
> This uses a configuration variable "YD_AJAX_MOOTOOLS"
> to enable mootools 
> instead of moo.fx. The change to YDAjax.php is quite
> minor. I changed 
> YDAjax.php so that the effects interface is compatible
> and hence the 
> existing effects example "examples/ajax/image2.php"
> works without 
> change. For an improved implementation and due to the
> size of the 
> mootools javascript file it would be better to link to
> its javascript 
> rather than embedding it directly. YDTemplate would
> need to be modified 
> to do this.
> 
> I have not implemented "fadesize". I have also not
> tested "hide", "show" 
> and focus, however these don't rely on the effects
> library.
> 
> The mootools is build 76 from the svn repository at
> mootools. I have 
> included compressed and uncompressed versions of the
> javascript since 
> the uncompressed file contains the license information
> (MIT style license).

That sounds good. Please give me some time to see it in detail and give 
my feedback too.

regards
Francisco A


From david_db at mail.berlios.de  Thu Oct 19 17:35:17 2006
From: david_db at mail.berlios.de (david_db at mail.berlios.de)
Date: Thu, 19 Oct 2006 17:35:17 +0200
Subject: [ydf-devel] r2183 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200610191535.k9JFZHOS028015@sheep.berlios.de>

Author: david_db
Date: 2006-10-19 17:35:13 +0200 (Thu, 19 Oct 2006)
New Revision: 2183

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
Fixed YDForm::disable to use correct XHTML attributes and added YDForm::enable.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-14 15:06:19 UTC (rev 2182)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-19 15:35:13 UTC (rev 2183)
@@ -1117,8 +1117,7 @@
             if ( sizeof( $array ) == 0 ) { return ''; }
             $out = '';
             foreach ( $array as $key=>$value ) {
-                if ( is_null( $value ) ) $out .= ' disabled ';
-                else                     $out .= ' ' . strval( $key ) . '="' . str_replace( '&amp;', '&', htmlspecialchars( strval( $value ) ) ) . '"';
+                $out .= ' ' . strval( $key ) . '="' . str_replace( '&amp;', '&', htmlspecialchars( strval( $value ) ) ) . '"';
             }
             return $out;
         }
@@ -1312,16 +1311,23 @@
                 $this->setAttribute( $k, $v );
         }
 
-
         /**
          *  Function to disable this element
          *
          *  @param  $options    (Optional) Custom options
          */
         function disable( $options = null ) {
-            $this->setAttribute( 'disabled', null );
+            $this->setAttribute( 'disabled', 'disabled' );
         }
 
+        /**
+         *  Function to enable this element
+         *
+         *  @param  $options    (Optional) Custom options
+         */
+        function enable( $options = null ) {
+            $this->delAttribute( 'disabled' );
+        }
 
         /**
          *  Function to delete an attribute of a form element



From ximian at mail.berlios.de  Fri Oct 27 00:01:01 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:01:01 +0200
Subject: [ydf-devel] r2184 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610262201.k9QM11gu018733@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:01:00 +0200 (Fri, 27 Oct 2006)
New Revision: 2184

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
on checkboxgroup form element:
  * added support for attributes
  * added suport for label attributes
  * 'select all' checkbox addon is only displayed if we have more than one option
  * 'select all' checkbox addon is selected if all options are selected too

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-19 15:35:13 UTC (rev 2183)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-26 22:01:00 UTC (rev 2184)
@@ -85,6 +85,8 @@
 				$this->_separator = $attributes['separator'];
 
 			$this->_addSelectAll = false;
+			$this->_addSelectAll_chk_attributes = array();
+			$this->_addSelectAll_label_attributes = array();
         }
 
 
@@ -116,14 +118,29 @@
 
 
         /**
+         *	This function sets the attribute for the element.
+         *
+         *	@param	$attribute	Attribute to change
+         *	@param	$value   	Attribute value
+         */
+        function setAttribute( $attribute, $value ) {
+            foreach ( $this->_items as $k=>$v ) {
+                $this->_items[$k]->setAttribute( $attribute, $value );
+            }
+        }
+
+
+        /**
          *	This function sets checkboxgroup with 'select all' button
          *
-         *	@param	$onBottom	(Optional) Boolean that defines if button should be added on top (TRUE) or on bottom (FALSE) options
+         *	@param	$onBottom			(Optional) Boolean that defines if button should be added on bottom (TRUE) or on top (FALSE)
+         *	@param	$chk_attributes		(Optional) Attributes to pass to the select all checkbox
          */
-        function addSelectAll( $onBottom = true ) {
+        function addSelectAll( $onBottom = true, $chk_attributes = array() ) {
 
 			$this->_addSelectAll = true;
 			$this->_addSelectAll_onBottom = $onBottom;
+			$this->_addSelectAll_chk_attributes = $chk_attributes;
         }
 
 
@@ -188,22 +205,28 @@
                 if ( $this->_position == 'right' ) $output .= $item->toHtml() . '&nbsp;<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>' . $this->_separator;
                 else                               $output .= '<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>&nbsp;' . $item->toHtml() . $this->_separator;
 
-			// check if a 'select all' button should be added
-			if ( $this->_addSelectAll ){ 
+			// check if we have more than one element and a 'select all' button is defined
+			if ( count( $this->_items ) > 1 && $this->_addSelectAll ){ 
 
+				// compute button code
+				$selall = new YDFormElement_Checkbox( $this->_form, $this->getAttribute( 'id' ) . 'sall' );
+				$selall->setAttribute( 'onclick', 'for (var i=0;i<document.forms[\''. $this->_form . '\'].elements.length;i++) if (document.forms[\''. $this->_form . '\'].elements[i].type==\'checkbox\' && !document.forms[\''. $this->_form . '\'].elements[i].disabled && /' . $this->_name . '\[[a-zA-Z0-9]+\]/.test( document.forms[\''. $this->_form . '\'].elements[i].name ) ) document.forms[\''. $this->_form . '\'].elements[i].checked = this.checked;' );
+
+				// if all checkboxes are selected, the 'select all' will be selected too
+				$selall->setValue(1);
+				foreach( $this->getValue() as $elem => $value )
+					if ( $value != 1 ){ $selall->setValue(0); break; }
+
 				// check default translation
 				if( !isset( $GLOBALS['t']['select all'] ) ) $GLOBALS['t']['select all'] = 'select all';
 
-				// compute button code
-				$bcode = '<input type="checkbox" onclick="for (var i=0;i<document.forms[\''. $this->_form . '\'].elements.length;i++) if (document.forms[\''. $this->_form . '\'].elements[i].type==\'checkbox\' && !document.forms[\''. $this->_form . '\'].elements[i].disabled && /' . $this->_name . '\[[0-9]+\]/.test( document.forms[\''. $this->_form . '\'].elements[i].name ) ) document.forms[\''. $this->_form . '\'].elements[i].checked = this.checked;" />';
-
 				// compute button label
-				if ( $this->_position == 'right' ) $bcode = '<span class="select_all"><label>' . $bcode . ' ' . t( 'select all' ) . '</label></span>';
-				else                               $bcode = '<span class="select_all"><label>' . t( 'select all' ) . ' ' . $bcode . '</label></span>';
+				if ( $this->_position == 'right' ) $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label>' . $selall->toHTML() . ' ' . t( 'select all' ) . '</label></span>';
+				else                               $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label>' . t( 'select all' ) . ' ' . $selall->toHTML() . '</label></span>';
 
 				// add button code to html output
-				if ( $this->_addSelectAll_onBottom ) $output = $output . $bcode;
-				else                                 $output = $bcode . $this->_separator . $output;
+				if ( $this->_addSelectAll_onBottom ) $output = $output . $selall_html;
+				else                                 $output = $selall_html . $this->_separator . $output;
 			}
 
             return $output;



From ximian at mail.berlios.de  Fri Oct 27 00:06:40 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:06:40 +0200
Subject: [ydf-devel] r2185 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200610262206.k9QM6e9N019299@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:06:39 +0200 (Fri, 27 Oct 2006)
New Revision: 2185

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
on YDFormElement:
  * new YDFormElement::getLabel(), returns the html label of an form element
  * new YDFormElement::setLabelAttribute(), sets label attributes by placing the label inside a custom span when exporting
  * new YDFormElement::toFullHTML(), returns the html of an element (including the label), useful for debugging

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-26 22:01:00 UTC (rev 2184)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-26 22:06:39 UTC (rev 2185)
@@ -1277,6 +1277,7 @@
             $this->_default = null;
             $this->_raw_default = false;
             $this->_isButton = false;
+			$this->_label_attributes = array();
 
             // Indicate where the label should be
             $this->_placeLabel = 'before';
@@ -1486,13 +1487,30 @@
         /**
          *      Gets the label of the form element.
          *
+         *      @param  $html   (Optional) Return label as html
          *      @returns        The label of the form element.
          */
-        function getLabel() {
+        function getLabel( $html = false ) {
+
+			if ( $html ) return '<span ' . YDForm::_convertToHtmlAttrib( $this->_label_attributes ) . '><label for="' . $this->_attributes['id'] . '">' . $this->_label . '</label></span>';
+
             return $this->_label;
         }
 
+
         /**
+         *      Sets label attribute
+         *
+         *      @param  $attribute	Attribute name
+         *      @param  $value 		Attribute value
+         */
+        function setLabelAttribute( $attribute, $value ) {
+
+			$this->_label_attributes[ $attribute ] = $value;
+        }
+
+
+        /**
          *      This function returns a boolean indicating if the element value was
          *      modified from it's default value.
          *
@@ -1541,7 +1559,7 @@
                 'type'        => $this->_type,
                 'label'       => $this->_label,
                 'attributes'  => $this->_attributes,
-                'label_html'  => '<label for="' . $this->_attributes['id'] . '">' . $this->_label . '</label>',
+                'label_html'  => $this->getLabel( true ),
                 'options'     => $this->_options,
                 'placeLabel'  => $this->_placeLabel,
                 'html'        => $this->toHtml(),
@@ -1557,7 +1575,19 @@
         function toHtml() {
         }
 
+
         /**
+         *  This function returns the element as HTML with label
+         *
+         *  @returns    The form element as HTML text.
+         */
+        function toFullHtml( $separator = '', $begin = '', $end = '') {
+		
+			return $begin . $this->getLabel( true ) . $separator . $this->toHTML() . $end;
+        }
+
+
+        /**
          *	This function returns the default javascript event of this element
          */
         function getJSEvent(){ 



From ximian at mail.berlios.de  Fri Oct 27 00:08:18 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:08:18 +0200
Subject: [ydf-devel] r2186 -
	YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent
Message-ID: <200610262208.k9QM8Iwi019457@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:08:18 +0200 (Fri, 27 Oct 2006)
New Revision: 2186

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMUserobject.php
Log:
on YDCMUserobject::getElements:
  * now accepts more than one element

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMUserobject.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMUserobject.php	2006-10-26 22:06:39 UTC (rev 2185)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMUserobject.php	2006-10-26 22:08:18 UTC (rev 2186)
@@ -184,7 +184,7 @@
         /**
          *  This method returns an associative array 
          *
-         *  @param $type       Node type
+         *  @param $type       Node type (or array of types)
          *  @param $attribute  (Optional) Attribute name or (array of attributes) to get only
          *
          *  @returns    Associative array
@@ -194,7 +194,7 @@
 			$this->resetAll();
 
 			// set user id
-			$this->set( 'type', $type );
+			$this->where( 'type IN ("' . implode( '","', $type ) . '")' );
 
 			// get all attributes
 			$this->find();



From ximian at mail.berlios.de  Fri Oct 27 00:09:32 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:09:32 +0200
Subject: [ydf-devel] r2187 -
	YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent
Message-ID: <200610262209.k9QM9W1u019613@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:09:32 +0200 (Fri, 27 Oct 2006)
New Revision: 2187

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMPermission.php
Log:
on YDCMPermission:
  * lots of changes and new features including: permission editing and translation support

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMPermission.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMPermission.php	2006-10-26 22:08:18 UTC (rev 2186)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMPermission.php	2006-10-26 22:09:32 UTC (rev 2187)
@@ -31,7 +31,10 @@
 
 	// include YDF libs
 	YDInclude( 'YDDatabaseObject.php' );
+	YDInclude( 'YDResult.php' );
 
+	// add translations directory for generic translations
+	YDLocale::addDirectory( dirname( __FILE__ ) . '/languages/' );
 
 
     class YDCMPermission extends YDDatabaseObject {
@@ -65,6 +68,13 @@
 			
 			// init always-valid actions
 			$this->_always_valid = array();
+
+			// init action titles and class titles
+			$this->_titles_actions = array();
+			$this->_titles_classes = array();
+
+			// init form name
+			$this->_form_name = 'permissions';
 		}
 
 
@@ -117,6 +127,28 @@
 
 
         /**
+         *  This function returns all permissions
+		 *
+         *  @returns    An array with all permissions
+         */
+		function getAllPermissions( $txt = false ){
+
+			$this->resetAll();
+			$this->orderBy( 'permission_id', 'desc' );
+			$this->findAll();
+			
+			if ( $txt == false ) return $this->getResults();
+
+			$export = "\nID \tCLASS \t\tACTION \n";
+			foreach( $this->getResults() as $res )
+				$export .= $res[ 'permission_id'] . "\t" . $res[ 'class'] . "\t" . $res[ 'action'] . "\n";
+				
+			return $export;			
+		}
+
+
+
+        /**
          *  This function returns all permissions of a userobject
          *
          *  @param     $userobject_id   Userobject id (or array of userobjects ) to delete
@@ -169,10 +201,11 @@
          *
          *  @param     $class    Class name
          *  @param     $action   Action name
+         *  @param     $title	 (Optional) Action title ( custom action description )
          *
          *  @returns   TRUE if added, FALSE is already exists
          */
-		function registerAction( $class, $action ){
+		function registerAction( $class, $action, $title = null ){
 
 			// check if class and action are registed
 			if ( $this->actionIsRegistered( $class, $action ) ) return false;
@@ -180,11 +213,63 @@
 			// add action to class
 			$this->_actions[ $class ][] = $action;
 
+			// add title if defined
+			if ( is_string( $title ) ) $this->_titles_actions[ $class ][ $action ] = $title;
+
 			return true;
 		}
 
 
         /**
+         *  This function returns a action description
+         *
+         *  @param     $class    Class name
+         *  @param     $action   Action name
+         *
+         *  @returns   description STRING
+         */
+		function getActionTitle( $class, $action ){
+		
+			// if a custom title was defined, just return it
+			if ( isset( $this->_titles_actions[ $class ][ $action ] ) ) return $this->_titles_actions[ $class ][ $action ];
+
+			// return default 
+			return t( $class . ' perm ' . $action );
+		}
+
+
+        /**
+         *  This function returns a class description
+         *
+         *  @param     $class    Class name
+         *
+         *  @returns   description STRING
+         */
+		function setClassTitle( $class, $title ){
+
+			// add description if not null
+			if ( is_string( $title ) ) $this->_titles_classes[ $class ] = $title;
+		}
+
+
+        /**
+         *  This function returns a class description
+         *
+         *  @param     $class    Class name
+         *
+         *  @returns   description STRING
+         */
+		function getClassTitle( $class ){
+		
+			// if a custom title was defined, just return it
+			if ( isset( $this->_titles_classes[ $class ] ) ) return $this->_titles_classes[ $class ];
+
+			// return default 
+			return t( $class . ' perm' );
+		}
+
+
+        /**
          *  This function registers an always-valid action
          *
          *  @param     $class    Class name
@@ -348,7 +433,180 @@
 		}
 
 
+
         /**
+         *  This function returns all registered actions
+         *
+         *  @param     $name    Form name
+         */
+		function setForm( $name ){
+
+			$this->_form_name = $name;
+		}
+
+
+        /**
+         *  This function returns an associative array with checkboxgroups
+         *
+         *  @returns   Associative array:  array( CLASS => checkboxgroup )
+         */
+		function & addFormEdit( $group_id ){
+
+			// store edition id (used later when saving details)
+			$this->_editing_id = $group_id;
+
+			// get current permissions of this group
+			$perms = $this->getPermissions( $group_id );
+
+			// check if we need to create a new form, or use some
+			if ( ! isset( $this->_form ) ){
+	
+				YDInclude( 'YDForm.php' );
+
+				// init form
+				$this->_form = new YDForm( $this->_form_name );
+			}
+
+			// if this group is not a root group we must get the parent group permissions to check the ones we can use
+			$userobject = new YDCMUserobject();
+			$groups     = $userobject->getElements( array( 'ydcmgroup', 'ydcmuser' ) );
+			$parent_id  = $groups[ $group_id ][ 'parent_id' ];
+
+			// if parent of this group is root, parentgroup permissions are ALL (read: null), otherwise we must get permissions of that parent
+			if ( $parent_id == 1 ) $parentgroup_perms = null;
+			else                   $parentgroup_perms = $this->getPermissions( $groups[ $parent_id ][ 'parent_id' ] );
+
+			// init form default array
+			$form_defaults = array();
+
+			// get all possible actions to compute checkboxgroups for each class
+			foreach( $this->getRegisteredActions() as $class => $actions ){
+			
+				// get permission translations for each component
+				YDLocale::addDirectory( YD_DIR_HOME_ADD . '/YDCMComponent/languages/' . $class );
+
+				// init checkboxgroup options, disabled options and default values
+				$chk_options                         = array();
+				$chk_disable                         = array();
+				$form_defaults[ 'pclass_' . $class ] = array();
+
+				// cycle all actions of this class to get translations and default values
+				foreach( $actions as $action ){
+				
+					// get actions labels
+					$chk_options[ $action ] = $this->getActionTitle( $class, $action );
+					
+					// if parentgroup is the root (id 1) or the parent group has the correspondent action, this action must be set based on current group db values
+					if ( is_null( $parentgroup_perms ) || isset( $parentgroup_perms[ $class ][ $action ] ) ){
+						
+						if ( isset( $perms[ $class ][ $action ] ) ) $form_defaults[ 'pclass_' . $class ][ $action ] = 1;
+
+					// otherwise the action must be unset and disabled (because, if the parent group cannot do something, this group cannot do too)
+					}else{
+						$form_defaults[ 'pclass_'. $class ][ $action ] = 0;
+						$chk_disable[] = $action;
+					}
+				}
+
+				// add checkboxgroup to form
+				$checkboxgroup = & $this->_form->addElement( 'checkboxgroup', 'pclass_'. $class, $this->getClassTitle( $class ), array(), $chk_options );
+				$checkboxgroup->addSelectAll( true, array( 'class' => 'ydcmpermission_checkbox_selall' ) );
+				$checkboxgroup->setAttribute( 'class', 'ydcmpermission_checkbox' );
+				$checkboxgroup->setLabelAttribute( 'class', 'ydcmpermission_checkbox_label' );
+
+				// disable some checkboxgroup elements
+				if ( ! empty( $chk_disable ) ) $this->_form->disable( 'pclass_' . $class, $chk_disable );
+			}
+
+			// add submit button
+			$this->_form->addElement( 'submit', '_cmdSubmit', t( 'save' ) );
+
+			// set form defaults
+			$this->_form->setDefaults( $form_defaults );
+
+			return $this->_form;
+		}
+
+
+		function saveFormEdit( $formvalues = null ){
+		
+			$group_id = $this->_editing_id;
+		
+			// check form validation
+			if ( !$this->_form->validate( $formvalues ) )
+				return YDResult::warning( t( 'form errors' ), $this->_form->getErrors() );
+
+			// get form values EXCLUDING spans
+			$values = $this->_form->getValues();
+
+			// get current group permissions
+			$perms = $this->getPermissions( $group_id );
+
+			// if this group is not a root group we must get the parent group permissions to check the ones we can use
+			$userobject = new YDCMUserobject();
+			$groups     = $userobject->getElements( array( 'ydcmgroup', 'ydcmuser' ) );
+			$parent_id  = $groups[ $group_id ][ 'parent_id' ];
+
+			// if parent of this group is root, parentgroup permissions are ALL (read: null), otherwise we must get permissions of that parent
+			if ( $parent_id == 1 ) $parentgroup_perms = null;
+			else                   $parentgroup_perms = $this->getPermissions( $groups[ $parent_id ][ 'parent_id' ] );
+
+			$actions_to_add = array();
+			$actions_to_del = array();
+
+			// get all possible actions to compute actions we must add and actions we must delete
+			foreach( $this->getRegisteredActions() as $class => $actions ){
+				foreach( $actions as $action ){
+
+					// if action is selected by the user AND
+					// this is a root group OR the action belogs to the parent group
+					// we can add it
+					if ( isset( $values[ 'pclass_' . $class ][ $action ] ) && $values[ 'pclass_' . $class ][ $action ] == 1 ){
+
+						// check if action is valid:
+						// if parent group is a root a group OR the parent group has this action
+						if ( is_null( $parentgroup_perms ) || isset( $parentgroup_perms[ $class ][ $action ] ) ){
+						
+							// if action is valid we must check if we must add it or the user already has it
+							if ( ! isset( $perms[ $class ][ $action ] ) ) $actions_to_add[] = array( $class, $action );
+							
+							continue;
+						}
+
+						// if action selected is not valid we must delete it
+						$actions_to_del[] = array( $class, $action );
+					}
+					
+					// if action is not set, we will always delete it (even if is not in bd)
+					$actions_to_del[] = array( $class, $action );
+				}
+			}
+
+
+			// delete actions			
+			foreach( $actions_to_del as $ac ){
+				$this->resetValues();
+				$this->set( 'permission_id', $group_id );
+				$this->set( 'class', $ac[0] );
+				$this->set( 'action', $ac[1] );
+				$this->delete();
+			}
+
+			// add actions
+			foreach( $actions_to_add as $ac ){
+				$this->resetValues();
+				$this->set( 'permission_id', $group_id );
+				$this->set( 'class', $ac[0] );
+				$this->set( 'action', $ac[1] );
+				$this->insert();
+			}
+
+			// TODO: currently YDDatabaseObject don't have a mechanism to control the above deletes and inserts
+			return YDResult::ok( t('ydcmpermission mess permissions updated') );
+		}
+
+
+        /**
          *  This function checks if a userobject if can do some action
          *
          *  @param     $userobject_id     Userobject id



From ximian at mail.berlios.de  Fri Oct 27 00:10:31 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:10:31 +0200
Subject: [ydf-devel] r2188 -
	YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent
Message-ID: <200610262210.k9QMAV8f019846@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:10:31 +0200 (Fri, 27 Oct 2006)
New Revision: 2188

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMGroup.php
Log:
on YDCMGroup:
  * when adding the editing form we get the form pointer

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMGroup.php	2006-10-26 22:09:32 UTC (rev 2187)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDCMComponent/YDCMGroup.php	2006-10-26 22:10:31 UTC (rev 2188)
@@ -136,7 +136,7 @@
          *
 		 * @param $edit         TRUE: We are editing a group, FALSE: we are creating a group
          */
-		function _addFormDetails( $id, $edit ){
+		function & _addFormDetails( $id, $edit ){
 
 			YDInclude( 'YDForm.php' );
 
@@ -155,7 +155,7 @@
 			// if we are not editing a group, just add a submit button and return
 			if ( ! $edit ){
 				$this->_form->addElement( 'submit', '_cmdSubmit', t( 'ydcmgroup label new' ) );
-				return;
+				return $this->_form;
 			}
 
 			// if we are editing, set defaults and add a submit button
@@ -167,6 +167,8 @@
 
 			// add submit button
 			$this->_form->addElement( 'submit', '_cmdSubmit', t( 'ydcmgroup label save' ) );
+			
+			return $this->_form;
 		}
 
 



From ximian at mail.berlios.de  Fri Oct 27 00:12:33 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 00:12:33 +0200
Subject: [ydf-devel] r2189 - YDFramework2.0/trunk/examples/cm/backend
Message-ID: <200610262212.k9QMCX50020095@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 00:12:32 +0200 (Fri, 27 Oct 2006)
New Revision: 2189

Modified:
   YDFramework2.0/trunk/examples/cm/backend/permissions.php
Log:
updated YDCM permissions example for permission editing

Modified: YDFramework2.0/trunk/examples/cm/backend/permissions.php
===================================================================
--- YDFramework2.0/trunk/examples/cm/backend/permissions.php	2006-10-26 22:10:31 UTC (rev 2188)
+++ YDFramework2.0/trunk/examples/cm/backend/permissions.php	2006-10-26 22:12:32 UTC (rev 2189)
@@ -26,19 +26,9 @@
 			$this->perms->registerAction( 'YDCMGroup', 'add' );
 			$this->perms->registerAction( 'YDCMGroup', 'edit' );
 
-            print(" We have registered the next permissions :                        <br>
-                    'YDCMPage',  'create'                                            <br>
-                    'YDCMPage',  'delete'                                            <br>
-                    'YDCMGroup', 'add'                                               <br>
-                    'YDCMGroup', 'edit'                                              <br><br>");
+			YDDebugUtil::dump("\n'YDCMPage',  'create' \n'YDCMPage',  'delete'\n'YDCMGroup', 'add'\n'YDCMGroup', 'edit'", 'We have registered the next permissions:' );
 
-
-            print(" In our database we have the next permission system:              <br>
-                    INSERT INTO `ydcmpermission` VALUES (2,'YDCMRootmenu','delete'); <br>
-                    INSERT INTO `ydcmpermission` VALUES (2,'YDCMPage','delete');     <br>
-                    INSERT INTO `ydcmpermission` VALUES (2,'YDCMPage','create');     <br>
-                    INSERT INTO `ydcmpermission` VALUES (5,'YDCMPage','delete');     <br>
-                    INSERT INTO `ydcmpermission` VALUES (5,'YDCMPage','create');     <br><br>");
+			YDDebugUtil::dump( $this->perms->getAllPermissions( true ), 'In our database we have the next permission system:' );
         }
 
 
@@ -52,10 +42,10 @@
 			YDDebugUtil::dump( $this->perms->can( 5, 'YDCMPage', 'add' ), '$this->perms->can( 5, "YDCMPage", "add" );  // check if userobject 5 can "YDCMPage"+"add"' );
 
 			// check if userobject 2 can 'YDCMRootmenu'+'delete'
-			YDDebugUtil::dump( $this->perms->can( 2, 'YDCMRootmenu', 'delete' ), '$this->perms->can( 2, "YDCMRootmenu", "delete" );  // action is in DB but its NOT registered' );
+			YDDebugUtil::dump( $this->perms->can( 2, 'YDCMRootmenu', 'delete' ), '$this->perms->can( 2, "YDCMRootmenu", "delete" );  // action is in DB but it is NOT registered' );
 
 			// get permissions of userobject 2
-			YDDebugUtil::dump( $this->perms->getPermissions( 2 ), '$this->perms->getPermissions( 2 );' );
+			YDDebugUtil::dump( $this->perms->getPermissions( 2 ), '$this->perms->getPermissions( 2 );  // get permissions of group Administrators' );
 
 			// get translated permissions of userobject 5
 			YDDebugUtil::dump( $this->perms->getPermissions( 5, true ), '$this->perms->getPermissions( 5, true );  // translated permissions' );
@@ -120,6 +110,32 @@
 
 		}
 
+
+		function actionEdit(){
+		
+			// get permissions form of group id 2
+			print "Edit group 2 permissions: \n";
+			
+			$form = & $this->perms->addFormEdit( 2 );
+
+			// if form is not submitted just show it
+			if ( ! $form->isSubmitted() ) return $form->display();
+
+			// update user with submitted information, magic isn't it ;)
+			$result = $this->perms->saveFormEdit();
+
+			// print result message
+			if ( $result->ok ) print( 'OK: '    . $result->message );
+			else               print( 'Error: ' . $result->message );
+
+			// display form again
+			$form->display();
+			
+			// display db state after updating
+			YDDebugUtil::dump( $this->perms->getAllPermissions( true ), 'Now, we have the next permission system in our db:' );
+		}		
+		
+
     }
 
     // Process the request



From ximian at mail.berlios.de  Fri Oct 27 01:05:06 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Fri, 27 Oct 2006 01:05:06 +0200
Subject: [ydf-devel] r2190 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610262305.k9QN56uY010211@sheep.berlios.de>

Author: ximian
Date: 2006-10-27 01:05:05 +0200 (Fri, 27 Oct 2006)
New Revision: 2190

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
on checkboxgroup:
  * fix: 'select all' now correctly checks/unchecks (on IE) when clicked on its label

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-26 22:12:32 UTC (rev 2189)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-26 23:05:05 UTC (rev 2190)
@@ -221,8 +221,8 @@
 				if( !isset( $GLOBALS['t']['select all'] ) ) $GLOBALS['t']['select all'] = 'select all';
 
 				// compute button label
-				if ( $this->_position == 'right' ) $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label>' . $selall->toHTML() . ' ' . t( 'select all' ) . '</label></span>';
-				else                               $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label>' . t( 'select all' ) . ' ' . $selall->toHTML() . '</label></span>';
+				if ( $this->_position == 'right' ) $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '>' . $selall->toHTML() . '&nbsp;<label for="' . $selall->getAttribute( 'id' ) . '">' . t( 'select all' ) . '</label></span>';
+				else                               $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label for="' . $selall->getAttribute( 'id' ) . '">' . t( 'select all' ) . '</label>&nbsp;' . $selall->toHTML() . '</span>';
 
 				// add button code to html output
 				if ( $this->_addSelectAll_onBottom ) $output = $output . $selall_html;



From maximus_meridius79 at yahoo.com  Mon Oct 30 06:38:28 2006
From: maximus_meridius79 at yahoo.com (maximus meridius)
Date: Sun, 29 Oct 2006 21:38:28 -0800 (PST)
Subject: [ydf-devel] YDAjax and mootools
Message-ID: <20061030053829.22303.qmail@web54009.mail.yahoo.com>

    Hi,

I have created a new class called YDLayer to work alongside YDAjax forcreating dynamic layers. This is to keep the complexity outside ofYDAjax rather than my earlier attempt to add draggables. The mootoolsjavascript library is used for this instead of moofx. 

There is an attached screenshot for the example.

Layers have the following characteristics:
  
   layers can be optionally modal (this relies on special css"#overlay" - see the example)
    
   layers can be optionally dragged  
   layers can have a title  
   mutliple layers can be instantiated  
   layers have a html id automatically assigned and a close linkgenerated
    
   layers can be dynamically opened or closed
    
   layers can be dynamically closed in response
    
   layers can be centered  
   layers can be used to contain a form  
   layers can be inserted and hence contained in parent elements (this is currently buggy in browsers such as explorer ). The dragging isbuggy since the positioning is wrong.
  
The layer code works in IE6, IE7, Firefox, Safari and Opera. Safari hasissues with the wrong mouse cursors being displayed.

A tarball with the following code is attached:

./js/mootools.svn.compressed.83.js
./js/mootools.svn.83.js
./js/ydtools.js
./examples/index.php
./examples/ajax/layer.php
./examples/ajax/layer.tpl
./YDFramework2/YDClasses/YDTemplate.php
./YDFramework2/addons/YDAjax/YDAjax.php
./YDFramework2/addons/YDAjax/YDLayer.php
./examples/ajax/close-icon.png

This is some of the rationale in the way I constructed it:
  
   I added a new method to the smarty version of YDTemplate toprovide for linked javascript in addition to javascript embedded in thetemplate head. The reason for this is that the compressed mootoolslibrary is approximately 24kilobytes. Linking the javascript in thismanner allows it to be cached. There was a corresponding change toYDTemplate::__assignHeadCode. I have submitted a feature request forthe change to YDTemplate since this is a generally useful change.
    
   I designed YDLayer so that layers could be dynamically added inthe request or the response. The new example demonstrates this. Thisrequired the addition of the YDAjax::isOnResponse method. I havesubmitted a feature request for the addition of YDAjax::isOnResponsewhich is also generally useful in putting together functionality basedon YDAjax.  
   The example layer.php contains a method setup_thetestform_layer()which shows how to associate server-side processing via manual setup ofan onclick event that uses xajax.getFormValues.
    
   Rather than attaching javascript to form elements such as buttonsfor closing the form, I decided that it is more appropriate to close alayer programmatically via the php response processing function. Thisis achieved by passing the received form values (which include theautomatically assigned hidden layer id) to a close method. The closemethod searches for this id in the form values and generates javascriptto close the layer. The example layer.php shows how to do this in the"defaultOne" method.  
   .layer-title and .layer-close are css classes that can be used tocontrol the appearance of the layer title and close link.  
   YDLayer::setHtmlClass and YDLayer::setHtmlId can be used tooverride the html class and html id of the layer. These should becalled before YDLayer::render(). YDLayer::render() is generally thelast call which will add the layer into the results or request.  
   Initially I thought that the class should be called YDWindow butI think YDLayer is more generic for the purposes it could be used for.
  
Any feedback is appreciated ...

Enjoy!

Regards,

Graeme


maximus meridius wrote:  
Hi,I have modified YDAjax and YDAjaxEffects classes touse the new mootools javascript framework from http://mootools.net/ .The effects are more complex to setup internally butthere is much greater power and flexibility in mootools. Mootools is20kb compressed whilst moo.fx is 8kb compressed.A tarball is attached.-rwxrw-r--  39011 2006-10-19 01:22./YDFramework2/addons/YDAjax/YDAjax.php-rwxr--r--   43422 2006-10-18 21:35 ./YDFramework2/addons/YDAjax/js/mootools.svn.76.js-rwxr--r--  24000 2006-10-19 01:05 ./YDFramework2/addons/YDAjax/js/mootools.svn.compressed.76.jsThis uses a configuration variable "YD_AJAX_MOOTOOLS"to enable mootools instead of moo.fx. The change to YDAjax.php is quiteminor. I changed YDAjax.php so that the effects interface is compatibleand hence the existing effects example "examples/ajax/image2.php"works without change. For an improved implementation and due to thesize of the mootools javascript file it would be better to link toits javascript rather than
 embedding it directly. YDTemplate wouldneed to be modified to do this.I have not implemented "fadesize". I have also nottested "hide", "show" and focus, however these don't rely on the effectslibrary.The mootools is build 76 from the svn repository atmootools. I have included compressed and uncompressed versions of thejavascript since the uncompressed file contains the license information(MIT style license).Regards,Graeme  

 
---------------------------------
Everyone is raving about the  all-new Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061029/4de3c9b0/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: layer.tar.gz
Type: application/gzip
Size: 81931 bytes
Desc: 2899218899-layer.tar.gz
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061029/4de3c9b0/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: layer-screenshot.jpg
Type: image/jpeg
Size: 49487 bytes
Desc: 1002989180-layer-screenshot.jpg
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061029/4de3c9b0/attachment.jpg>

From ximian at mail.berlios.de  Mon Oct 30 23:00:16 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Mon, 30 Oct 2006 23:00:16 +0100
Subject: [ydf-devel] r2191 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610302200.k9UM0GP9017638@sheep.berlios.de>

Author: ximian
Date: 2006-10-30 23:00:15 +0100 (Mon, 30 Oct 2006)
New Revision: 2191

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
on checkboxgroup:
 * FIXED: separator is really a separator (only shown between the elements)
 * FIXED: custom attributes no more shown as html attributes
 * NEW FEATURE: now it's possible to export the checkboxgroup in columns (long waited feature!!)

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-26 23:05:05 UTC (rev 2190)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-30 22:00:15 UTC (rev 2191)
@@ -52,6 +52,25 @@
             // Set the type
             $this->_type = 'checkboxgroup';
 
+            // set default separator and default position
+            $this->_separator = '<br />';
+            $this->_position  = 'right';
+
+            // parse separator and position from array
+            if ( isset ( $attributes['sep'] ) ) {
+
+                // find horizontal and left tags
+                if ( is_int( strpos( $attributes[ 'sep' ], 'h' ) ) ) $this->_separator = '&nbsp;&nbsp;&nbsp;';
+                if ( is_int( strpos( $attributes[ 'sep' ], 'l' ) ) ) $this->_position  = 'left';
+				unset( $attributes[ 'sep' ] );
+            }
+
+			// we can even have a custom separator
+            if ( isset ( $attributes[ 'separator' ] ) ){
+				$this->_separator = $attributes[ 'separator' ];
+				unset( $attributes[ 'separator' ] );
+			}
+
             // Add the subitems
             $this->_items = array();
             foreach ( $options as $key=>$val ) {
@@ -68,25 +87,11 @@
             // Indicate that the label should be appended
             $this->_placeLabel = 'before';
 
-            // set default separator and default position
-            $this->_separator = '<br />';
-            $this->_position  = 'right';
-
-            // parse separator and position from array
-            if ( isset ( $attributes['sep'] ) ) {
-
-                // find horizontal and left tags
-                if ( is_int( strpos( $attributes['sep'], 'h' ) ) ) $this->_separator = '&nbsp;&nbsp;&nbsp;';
-                if ( is_int( strpos( $attributes['sep'], 'l' ) ) ) $this->_position  = 'left';
-            }
-
-			// we can even have a custom separator
-            if ( isset ( $attributes['separator'] ) )
-				$this->_separator = $attributes['separator'];
-
 			$this->_addSelectAll = false;
 			$this->_addSelectAll_chk_attributes = array();
 			$this->_addSelectAll_label_attributes = array();
+			
+			$this->_columns = 1;
         }
 
 
@@ -118,6 +123,16 @@
 
 
         /**
+         *	This function defines the columns to export
+         *
+         *	@param	$total	Total of columns
+         */
+        function setColumns( $total ) {
+			$this->_columns = $total;
+        }
+
+
+        /**
          *	This function sets the attribute for the element.
          *
          *	@param	$attribute	Attribute to change
@@ -198,13 +213,17 @@
          */
         function toHtml() {
 
-            // Output the HTML
-            $output = '';
+            // Output the HTML checkboxes
+            $output = array();
 
+			// cycle all items to get their html
             foreach ( $this->_items as $item )
-                if ( $this->_position == 'right' ) $output .= $item->toHtml() . '&nbsp;<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>' . $this->_separator;
-                else                               $output .= '<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>&nbsp;' . $item->toHtml() . $this->_separator;
+                if ( $this->_position == 'right' ) $output[] = $item->toHtml() . '&nbsp;<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>';
+                else                               $output[] = '<label for="' . $item->_attributes['id'] . '">' . $item->_label . '</label>&nbsp;' . $item->toHtml();
 
+			// init the 'select all' html
+			$selall_html = '';
+
 			// check if we have more than one element and a 'select all' button is defined
 			if ( count( $this->_items ) > 1 && $this->_addSelectAll ){ 
 
@@ -223,13 +242,78 @@
 				// compute button label
 				if ( $this->_position == 'right' ) $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '>' . $selall->toHTML() . '&nbsp;<label for="' . $selall->getAttribute( 'id' ) . '">' . t( 'select all' ) . '</label></span>';
 				else                               $selall_html = '<span ' . YDForm::_convertToHtmlAttrib( $this->_addSelectAll_chk_attributes ) . '><label for="' . $selall->getAttribute( 'id' ) . '">' . t( 'select all' ) . '</label>&nbsp;' . $selall->toHTML() . '</span>';
+			}
 
-				// add button code to html output
-				if ( $this->_addSelectAll_onBottom ) $output = $output . $selall_html;
-				else                                 $output = $selall_html . $this->_separator . $output;
+			// check if we don't want columns format
+			if ( $this->_columns == 1 ){
+			
+				// if we don't have a 'select all' just return checkboxes html
+				if ( $selall_html == '' ){
+					return implode( $this->_separator, $output );
+
+				// if 'select all' is at the end
+				}else if ( $this->_addSelectAll_onBottom ){
+					return implode( $this->_separator, $output ) . $this->_separator . $selall_html;
+
+				// if 'select all' is at the beggining
+				}else{
+					return $selall_html . $this->_separator . implode( $this->_separator, $output );
+				}
+			
+			// create a html table
+			}else{
+			
+				// init table header
+				$table = '<table width="100%" border="0" cellpadding="0" cellspacing="0">';
+			
+				// if 'select all' is defined to be on top, add a row with 'select all' column and other cols empty
+				if ( $selall_html != '' && ! $this->_addSelectAll_onBottom ){
+				
+					$table .= '<tr>';
+					$table .= '<td>' . $selall_html . '</td>';
+					
+					for( $k = 1; $k < $this->_columns; $k++ )
+						$table .= '<td>&nbsp;</td>';
+					
+					$table .= '</tr>';
+				}
+	
+				// create option checkboxes content			
+				for ( $i = 0; isset( $output[ $i ] ); ){
+				
+					$table .= '<tr>';
+				
+					for( $k = 0; $k < $this->_columns; $k++ ){
+						
+						// if we have a checkbox just add it. otherwise add an empty char
+						if ( isset( $output[ $i ] ) ) $table .= '<td>' . $output[ $i ] . '</td>';
+						else                          $table .= '<td>&nbsp;</td>';
+					
+						$i++;
+					}
+
+					$table .= '</tr>';
+					
+				}
+
+				// if 'select all' is defined to be on bottom, add empty cols and a last column with 'select all' code
+				if ( $selall_html != '' && $this->_addSelectAll_onBottom ){
+				
+					$table .= '<tr>';
+					
+					for( $k = 1; $k < $this->_columns; $k++ )
+						$table .= '<td>&nbsp;</td>';
+
+					$table .= '<td>' . $selall_html . '</td>';
+					$table .= '</tr>';
+				}
+					
+				// end table
+				$table .= '</table>';
+					
+				return $table;			
 			}
 
-            return $output;
         }
 
     }



From ximian at mail.berlios.de  Mon Oct 30 23:01:15 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Mon, 30 Oct 2006 23:01:15 +0100
Subject: [ydf-devel] r2192 - YDFramework2.0/trunk/examples
Message-ID: <200610302201.k9UM1F4V017746@sheep.berlios.de>

Author: ximian
Date: 2006-10-30 23:01:14 +0100 (Mon, 30 Oct 2006)
New Revision: 2192

Modified:
   YDFramework2.0/trunk/examples/form_checkboxgroup.php
Log:
updated checkboxgroup example with previous feature ( columns html export )

Modified: YDFramework2.0/trunk/examples/form_checkboxgroup.php
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-10-30 22:00:15 UTC (rev 2191)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-10-30 22:01:14 UTC (rev 2192)
@@ -36,6 +36,19 @@
             $form->addElement( 'checkboxgroup', 'choose_multiple11', 'Custom Separator "XXX" and LEFT',           array('sep' => 'l', 'separator' => '&nbsp;&nbsp;XXX&nbsp;&nbsp;'), array( 0 => 'choice 1', 1 => 'choice 2' ) );
             $form->addElement( 'checkboxgroup', 'choose_multiple12', 'Custom Separator "...", LEFT and VERTICAL',                   array('sep' => 'l', 'separator' => '...<br />'), array( 0 => 'choice 1', 1 => 'choice 2' ) );
 
+            $form->addElement( 'checkboxgroup', 'choose_multiple_big',  'Choose with column format', array(), array( 0 => 'choice 1', 'choice 2', 'choice 3', 'choice 4', 'choice 5', 'choice 6', 'choice 7', 'choice 8' ) );
+   $el2 = & $form->addElement( 'checkboxgroup', 'choose_multiple_big2', 'Choose with column format (2 columns)', array(), array( 0 => 'choice 1', 'choice 2', 'choice 3', 'choice 4', 'choice 5', 'choice 6', 'choice 7', 'choice 8' ) );
+			$el2->setColumns( 2 );
+
+   $el3 = & $form->addElement( 'checkboxgroup', 'choose_multiple_big3', 'Choose with column format (3 columns and a default "select all")', array(), array( 0 => 'choice 1', 'choice 2', 'choice 3', 'choice 4', 'choice 5', 'choice 6', 'choice 7', 'choice 8', 'choice 9' ) );
+			$el3->setColumns( 3 );
+			$el3->addSelectAll();
+
+   $el4 = & $form->addElement( 'checkboxgroup', 'choose_multiple_big4', 'Choose with column format (3 columns and a "select all" on top)', array(), array( 0 => 'choice 1', 'choice 2', 'choice 3', 'choice 4', 'choice 5', 'choice 6', 'choice 7', 'choice 8' ) );
+			$el4->setColumns( 3 );
+			$el4->addSelectAll( false );
+
+
 			// demonstrate disable on checkboxgroup
             $form->disable( 'choose_multiple',  1 );
             $form->disable( 'choose_multiple2', array( 0, 1 ) );



From ximian at mail.berlios.de  Mon Oct 30 23:34:40 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Mon, 30 Oct 2006 23:34:40 +0100
Subject: [ydf-devel] r2193 -
	YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200610302234.k9UMYeZJ021729@sheep.berlios.de>

Author: ximian
Date: 2006-10-30 23:34:39 +0100 (Mon, 30 Oct 2006)
New Revision: 2193

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
Log:
on checkboxgroup:
  * NEW FEATURE: when all checkbox options are disabled the 'select all' checkbox will not be displayed.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-30 22:01:14 UTC (rev 2192)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_CheckboxGroup.php	2006-10-30 22:34:39 UTC (rev 2193)
@@ -224,8 +224,13 @@
 			// init the 'select all' html
 			$selall_html = '';
 
+			// if all checkboxes are disabled, the 'select all' will not be displayed
+			$allCheckboxesDisabled = true;
+			foreach( $this->_items as $item )
+				if ( $item->isDisabled() == false ){ $allCheckboxesDisabled = false; break; }
+
 			// check if we have more than one element and a 'select all' button is defined
-			if ( count( $this->_items ) > 1 && $this->_addSelectAll ){ 
+			if ( $allCheckboxesDisabled == false && count( $this->_items ) > 1 && $this->_addSelectAll ){ 
 
 				// compute button code
 				$selall = new YDFormElement_Checkbox( $this->_form, $this->getAttribute( 'id' ) . 'sall' );



From ximian at mail.berlios.de  Tue Oct 31 00:57:00 2006
From: ximian at mail.berlios.de (ximian at BerliOS)
Date: Tue, 31 Oct 2006 00:57:00 +0100
Subject: [ydf-devel] r2194 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200610302357.k9UNv0PC011265@sheep.berlios.de>

Author: ximian
Date: 2006-10-31 00:56:59 +0100 (Tue, 31 Oct 2006)
New Revision: 2194

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
added new method YDFormElement::isDisabled that checks if a form element is disabled :)

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-30 22:34:39 UTC (rev 2193)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-10-30 23:56:59 UTC (rev 2194)
@@ -1322,6 +1322,15 @@
         }
 
         /**
+         *  Function to check if an item is disabled
+         *
+         *  @returns  TRUE if disabled. FALSE otherwise
+         */
+        function isDisabled() {
+            return isset( $this->_attributes[ 'disabled' ] );
+        }
+
+        /**
          *  Function to enable this element
          *
          *  @param  $options    (Optional) Custom options



From francisco at fusemail.com  Tue Oct 31 15:18:53 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Tue, 31 Oct 2006 08:18:53 -0600 (CST)
Subject: [ydf-devel] Query builder
Message-ID: <1162304333.v1.fusewebmail-15630@f>

Hi db, Hi all

I have an idea about sql and a way to handle filters in a automated way
and i would like to discuss with you the best way to create it.
Currently we have YDDatabaseObject that handles db operations, but what do
you think of a new object (that integrates with YDDatabaseObject) to
handle filters?

All select results are (almost) always diaplayed in tables and we have
filters for that. Filters are just pre-defined 'where' clauses.

Imagine a cars table:

CAR  | COLOR | PRICE

fiat | red   | 100
ford | red   |  10
audi | blue  |  99


We could define pre-defined filters:
- user can filter by 'color' value
- user can filter by 'price' interval

This could be done as:

$filter = new YDDatabaseFilter();
$filter->addField( 'color', 'is', array( 'red', 'blue' ) );
$filter->addField( 'price', 'between', 5, 500 );

this filter means that color must be 'red' or 'blue' and price must be
between '5' and '500'.


How to use the filter
====================

The filter can have 2 uses:
 - be displayed with master select results as a form
 - be used to create result with YDDatabase (on a response)


 when displayed
 ==============

 $filter->toHTML(); or $form = & $filter->getForm();

 returns the html/form code needed to manage the filter.
 in the previous example this will generate a YDForm with 2 elements
'color' and 'price'.
 - 'color' will be a 'select' box with values 'red' and 'blue'
 - 'price' will be a 'text' element where the user will set the price we
wants.



 when integrated with YDDatabaseObject
 =====================================

 $dbObject->resetValues();
 $dbObject->userFilter( $filter );
 $dbObject->findAll();

 this means that our YDDatabaseObject will read the filter and apply all
'where' internally.
 basically, in the example, this is the same as doing it by hand like:

 $dbObject->resetValues();
 $dbObject->set( 'color', $color_value );
 $dbObject->set( 'price', $price_value );
 $dbObject->findAll();



This seems a good feature to me, that can make development much more
easier :)
Imagine..
  * more complex filters (and how they could be automated)...
  * saving filters in db..


What do you think?
Francisco A



From maximus_meridius79 at yahoo.com  Tue Oct 31 16:38:50 2006
From: maximus_meridius79 at yahoo.com (maximus meridius)
Date: Tue, 31 Oct 2006 07:38:50 -0800 (PST)
Subject: [ydf-devel] Query builder
Message-ID: <20061031153850.14354.qmail@web54004.mail.yahoo.com>

  Hi Francisco,

This sounds like a great idea. It would be a good alternative to views.I really like the proposal for filter ranges rather than individualvalues.

You should also think about ways to set defaults that allow filteredfields to be automatically populated for insert and update clauses.That way the filter can be used for reads and writes.

My modification to YDDatabaseTree does this. I mentioned that I wasworking on that some time ago. Have a look at:
  
   setFilterByArray  
   setAddDefaults  
   getFilter  
   _getFilter  
   getWhereFilter
  
 in the attached. I haven't had the time to put together an updatedexample.

I haven't spent much time on it but it works for the purpose ofallowing multiple trees to be stored in a single table.

YDDatabaseTree seems to be based on pure SQL and could certainlybenefit from a change to base it on YDDatabaseObject.

Regards,

Graeme

Francisco Azevedo wrote:  
Hi db, Hi allI have an idea about sql and a way to handle filters in a automated wayand i would like to discuss with you the best way to create it.Currently we have YDDatabaseObject that handles db operations, but what doyou think of a new object (that integrates with YDDatabaseObject) tohandle filters?All select results are (almost) always diaplayed in tables and we havefilters for that. Filters are just pre-defined 'where' clauses.Imagine a cars table:CAR  | COLOR | PRICEfiat | red   | 100ford | red   |  10audi | blue  |  99We could define pre-defined filters:- user can filter by 'color' value- user can filter by 'price' intervalThis could be done as:$filter = new YDDatabaseFilter();$filter->addField( 'color', 'is', array( 'red', 'blue' ) );$filter->addField( 'price', 'between', 5, 500 );this filter means that color must be 'red' or 'blue' and price must bebetween '5' and '500'.How to use the filter====================The filter can have 2 uses: - be displayed with master
 select results as a form - be used to create result with YDDatabase (on a response) when displayed ============== $filter->toHTML(); or $form = & $filter->getForm(); returns the html/form code needed to manage the filter. in the previous example this will generate a YDForm with 2 elements'color' and 'price'. - 'color' will be a 'select' box with values 'red' and 'blue' - 'price' will be a 'text' element where the user will set the price wewants. when integrated with YDDatabaseObject ===================================== $dbObject->resetValues(); $dbObject->userFilter( $filter ); $dbObject->findAll(); this means that our YDDatabaseObject will read the filter and apply all'where' internally. basically, in the example, this is the same as doing it by hand like: $dbObject->resetValues(); $dbObject->set( 'color', $color_value ); $dbObject->set( 'price', $price_value ); $dbObject->findAll();This seems a good feature to me, that can make development much moreeasier :)Imagine..  *
 more complex filters (and how they could be automated)...  * saving filters in db..What do you think?Francisco A_______________________________________________YDFramework-devel mailing listYDFramework-devel at lists.berlios.dehttps://lists.berlios.de/mailman/listinfo/ydframework-devel  


 
---------------------------------
Want to start your own business? Learn how on  Yahoo! Small Business. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061031/f9c09223/attachment.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20061031/f9c09223/attachment-0001.html>

From francisco at fusemail.com  Tue Oct 31 17:03:04 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Tue, 31 Oct 2006 10:03:04 -0600 (CST)
Subject: [ydf-devel] Query builder
In-Reply-To: <20061031153850.14354.qmail@web54004.mail.yahoo.com>
References: <20061031153850.14354.qmail@web54004.mail.yahoo.com>
Message-ID: <1162310584.v1.fusewebmail-15630@f>

Hi Graeme

I don't see how filters can be used in writes (inserts).. for updates i
can see (but i don't think i would use, if you ask me).
My primary intention was for selects and to be used with YDDatabaseObject
only.

so, filters can be:

- a "is" value in range.  eg,  COLOR  is   <select>
  some value in a pre-defined select box

- a "is one or more".  eg,  COLOR  is  <multi select>
  some value(s) in a pre-defined "multiple select" or "checkboxgroup"

- a "like" value.  eg,  COLOR  contains  <text>
  a value that is like some string inserted in a text box

- a "is" value.  eg,  PRICE  is  <text>
  a value that is equal to some "text"

- a "between".  eg,  PRICE is between  <text1> and <text2>
 a value that is between 2 text box values


What do you think? More ideas?

regards
Francisco A


----- Original Message -----
>   Hi Francisco,
>
> This sounds like a great idea. It would be a good alternative to views.I
> really like the proposal for filter ranges rather than individualvalues.
>
> You should also think about ways to set defaults that allow filteredfields
> to be automatically populated for insert and update clauses.That way the
> filter can be used for reads and writes.
>
> My modification to YDDatabaseTree does this. I mentioned that I wasworking
> on that some time ago. Have a look at:
>
>    setFilterByArray
>    setAddDefaults
>    getFilter
>    _getFilter
>    getWhereFilter
>
>  in the attached. I haven't had the time to put together an
> updatedexample.
>
> I haven't spent much time on it but it works for the purpose ofallowing
> multiple trees to be stored in a single table.
>
> YDDatabaseTree seems to be based on pure SQL and could certainlybenefit
> from a change to base it on YDDatabaseObject.
>
> Regards,
>
> Graeme
>
> Francisco Azevedo wrote:
> Hi db, Hi allI have an idea about sql and a way to handle filters in a
> automated wayand i would like to discuss with you the best way to create
> it.Currently we have YDDatabaseObject that handles db operations, but what
> doyou think of a new object (that integrates with YDDatabaseObject)
> tohandle filters?All select results are (almost) always diaplayed in
> tables and we havefilters for that. Filters are just pre-defined 'where'
> clauses.Imagine a cars table:CAR  | COLOR | PRICEfiat | red   | 100ford |
> red   |  10audi | blue  |  99We could define pre-defined filters:- user
> can filter by 'color' value- user can filter by 'price' intervalThis could
> be done as:$filter = new YDDatabaseFilter();$filter->addField( 'color',
> 'is', array( 'red', 'blue' ) );$filter->addField( 'price', 'between', 5,
> 500 );this filter means that color must be 'red' or 'blue' and price must
> bebetween '5' and '500'.How to use the filter====================The
> filter can have 2 uses: - be displayed with master
>  select results as a form - be used to create result with YDDatabase (on a
> response) when displayed ============== $filter->toHTML(); or $form = &
> $filter->getForm(); returns the html/form code needed to manage the
> filter. in the previous example this will generate a YDForm with 2
> elements'color' and 'price'. - 'color' will be a 'select' box with values
> 'red' and 'blue' - 'price' will be a 'text' element where the user will
> set the price wewants. when integrated with YDDatabaseObject
> ===================================== $dbObject->resetValues();
> $dbObject->userFilter( $filter ); $dbObject->findAll(); this means that
> our YDDatabaseObject will read the filter and apply all'where'
> internally. basically, in the example, this is the same as doing it by
> hand like: $dbObject->resetValues(); $dbObject->set( 'color',
> $color_value ); $dbObject->set( 'price', $price_value );
> $dbObject->findAll();This seems a good feature to me, that can make
> development much moreeasier :)Imagine..  *
>  more complex filters (and how they could be automated)...  * saving
> filters in db..What do you think?Francisco
> A_______________________________________________YDFramework-devel mailing
> listYDFramework-devel at lists.berlios.dehttps://lists.berlios.de/mailman/listinfo/ydframework-devel
>
>
>
> ---------------------------------
> Want to start your own business? Learn how on  Yahoo! Small Business.
> <?php
>
>     /*
>
>         Yellow Duck Framework version 2.0
>         (c) Copyright 2002-2005 Pieter Claerhout
>
>         This library is free software; you can redistribute it and/or
>         modify it under the terms of the GNU Lesser General Public
>         License as published by the Free Software Foundation; either
>         version 2.1 of the License, or (at your option) any later version.
>
>         This library is distributed in the hope that it will be useful,
>         but WITHOUT ANY WARRANTY; without even the implied warranty of
>         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
>         Lesser General Public License for more details.
>
>         You should have received a copy of the GNU Lesser General Public
>         License along with this library; if not, write to the Free
> Software
>         Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
> 02111-1307 USA
>
>     */
>
>     // Check if the framework is loaded
>     if ( ! defined( 'YD_FW_NAME' ) ) {
>         die( 'Yellow Duck Framework is not loaded.' );
>     }
>
>     // Includes
>     include_once( YD_DIR_HOME_CLS . '/YDDatabase.php' );
>
>     /**
>      *  This class implements a database tree as described on:
>      *
> http://www.phpriot.com/d/articles/php/application-design/nested-trees-2/
>      */
>     class YDDatabaseTree2 extends YDBase {
>
>         /**
>          *  Constructor. Set the database table name and necessary field
> names
>          *
>          *  @param $db             The YDDatabase instance name or object
> pointing to the database
>          *  @param $table          Name of the tree database table
>          *  @param $idField        (optional) Name of the primary key ID
> field. Default is id.
>          *  @param $parentField    (optional) Name of the parent ID field.
> Default is parent_id.
>          *  @param $sortField      (optional) Name of the field to sort
> data. Default is position, title.
>          */
>         function YDDatabaseTree2( $db='default', $table, $idField='id',
> $parentField='parent_id', $sortField='position, title' ) {
>
>             $this->db = YDDatabase::getNamedInstance( $db );
>
>             $this->table = $table;
>             $this->fields = array(
>                 'id' => $idField, 'parent' => $parentField, 'sort' =>
> $sortField,
>                 'nleft' => 'nleft', 'nright' => 'nright', 'nlevel' =>
> 'nlevel', 'position' => 'position'
>             );
>             $this->_use_query_cache = true;
>             $this->_query_cache = array();
> 			$this->_use_filter = false;
> 			$this->_filter_criteria = '';
> 			$this->_add_defaults = array();
>         }
>
>         /**
>          *  A utility function to return an array of the fields that need
> to be selected in SQL select queries.
>          *
>          *  @returns array   An indexed array of fields to select
>          *
>          *  @internal
>          */
>         function _getFields() {
>             return array_values( $this->fields );
>         }
>
>         /**
>          *  Get the fields joined as single string.
>          *
>          *  @returns A single string with the fields joined as a string
>          *
>          *  @internal
>          */
>         function _getFieldsAsString() {
>             return join( ',', $this->_getFields() );
>         }
>
>         /*
>          *  Convert an array to an object.
>          *
>          *  @param The array to convert.
>          *
>          *  @returns The array as an object.
>          *
>          *  @internal
>          */
>         function _arrayToObj( $arr ) {
>             $obj = new YDBase();
>             foreach ( $arr as $key => $val ) {
>                 $obj->$key = $val;
>             }
>             return $obj;
>         }
>
>         /*
>          *  Function to convert an object to a node array
>          *
>          *  @param $node    The node to convert to a node array.
>          *
>          *  @return The node as a node array.
>          */
>         function _toNodeArray( $node ) {
>             $arr = array();
>
>             foreach ( $this->fields as $f )
>                 if ( isset( $node[ $f ] ) ) $arr[ $f ] = $node[ $f ];
>
>             return $arr;
>         }
>
>         /*
>          *  Function to convert a node array to a object
>          *
>          *  @param $node    The node to convert to an object.
>          *
>          *  @return The node as an object.
>          */
>         function _fromNodeArray( $node ) {
>             return $node;
>         }
>
>         /**
>          *  Function to clear the query cache.
>          *
>          *  @internal
>          */
>         function _clearCache() {
>             $this->_query_cache = array();
>         }
>
>         /**
>          *  This function is a cache-enabled version of the $db->getRecord
> function.
>          *
>          *  @internal
>          */
>         function _getRecord( $query ) {
>             if ( $this->_use_query_cache && isset( $this->_query_cache[
> '[_getRecord]' . $query ] ) ) {
>                 return $this->_query_cache[ '[_getRecord]' . $query ];
>             } else {
>                 $result = $this->db->getRecord( $query );
>                 $this->_query_cache[ '[_getRecord]' . $query ] = $result;
>                 return $result;
>             }
>         }
>
>         /**
>          *  This function is a cache-enabled version of the
> $db->getRecords function.
>          *
>          *  @internal
>          */
>         function _getRecords( $query ) {
>             if ( $this->_use_query_cache && isset( $this->_query_cache[
> '[_getRecords]' . $query ] ) ) {
>                 return $this->_query_cache[ '[_getRecords]' . $query ];
>             } else {
>                 $result = $this->db->getRecords( $query );
>                 $this->_query_cache[ '[_getRecords]' . $query ] = $result;
>                 return $result;
>             }
>         }
>
>         /**
>          *  Add a field to the list of fields to will get returned by this
> class.
>          *
>          *  @param  $name   The name of the field that should be added.
>          */
>         function addField( $name ) {
>             if ( ! in_array( $name, $this->fields ) ) {
>                 $this->fields[ $name ] = $name;
>             }
>         }
>
>         /**
>          *  Add a number of fields to the list of fields to will get
> returned by this class.
>          *
>          *  @param  $names   The name of the field that should be added.
>          */
>         function addFields( $names ) {
>             if ( is_array( $names ) ) {
>                 foreach ( $names as $name ) {
>                     $this->addField( $name );
>                 }
>             }
>         }
>
>         /**
>          *  Set the sort field.
>          *
>          *  @param $sortField      (optional) Name of the field to sort
> data. Default is title.
>          */
>         function setSortField( $sortField='title' ) {
>             $this->fields[ 'sort' ] = $sortField;
>         }
>
>
>
>         /**
>          *  Set the filter.
> 		 *  Conditions for the filter will be combined via AND with remainder of
> query.
>          *
>          *  @param $filter      Filter Conditions (as array).
>          */
>         function setFilterByArray( $filter ) {
>
> 			if ( is_array( $filter ) ) {
>
> 				// clear any existing filter / add defaults
> 				$this->_filter_criteria = '';
> 				$this->_add_defaults = array();
>
> 				// initialise filter and defaults
> 				foreach ( $filter as $field => $value ) {
>
>
> 					if ( $this->_filter_criteria != '' ) {
> 						$this->_filter_criteria .= 'and ( ' . $field . ' = \'' . $value .
> '\' ) ';
> 					} else {
> 						$this->_filter_criteria .= '( ' . $field . ' = \'' . $value . '\' )
> ';
> 					}
>
> 					$this->_add_defaults[ $field ] = $value;
> 				}
>
> 				$this->_use_filter = true;
>
> 			} else {
>
> 				$this->_use_filter = true;
> 				return false;
>
> 			}
>         }
>
> 		/**
> 		 *  Set the add default values.
> 		 *
> 		 *  These values will be set by default when a node is added.
> 		 *
> 		 *  @param $defaults	Array of keys and values.
> 		 */
> 		 function setAddDefaults( $defaults ) {
>
> 			// clear any existing add defaults
> 			$this->_add_defaults = array();
>
> 		 	if ( is_array( $defaults ) ) {
>
> 				// initialise defaults
> 				foreach ( $defaults as $key => $value ) {
> 					$this->_add_defaults[ $key ] = $value;
> 				}
>
> 				return true;
> 			} else {
>
> 				return false;
> 			}
> 		 }
>
>
> 		/**
> 		 *  Get the filter.
> 		 *
> 		 *  @returns			The filter conditions or empty string otherwise.
> 		 */
> 		function getFilter(  ) {
> 			return ( $this->_use_filter ) ? $this->_filter_criteria : '';
> 		}
>
> 		/**
> 		 *  Get the filter.
> 		 *
> 		 *  @internal
> 		 */
> 		function _getFilter( $use_and = true ) {
> 			if ( $use_and == true ) {
> 				return ( $this->_use_filter ) ? '( ' . $this->_filter_criteria . ')
> AND ' : '';
> 			} else {
> 				return ( $this->_use_filter ) ? '( ' . $this->_filter_criteria . ') '
> : '';
> 			}
> 		}
>
> 		function _getWhereFilter() {
> 				return ( $this->_use_filter ) ? 'where ( ' . $this->_filter_criteria .
> ') ' : '';
> 		}
>
>
>         /**
>          *  Fetch the node data for the node identified by $id.
>          *
>          *  @param $id      The ID of the node to fetch.
>          *  @param $field   The unique field to select on. Defaults to
> null, which means that the ID field specified
>          *                  when the object was instantiated will be used.
>          *
>          *  @returns An object containing the node's data, or false if
> node not found
>          */
>         function getNode( $id, $field=null ) {
>
>             // Get the name of the field
>             $field = is_null( $field ) ? $this->fields['id'] : $field;
>             $field = empty( $field )   ? $this->fields['id'] : $field;
>
>             // The query to execute
>             if ( is_int( $id ) ) {
>                 $query = sprintf(
>                     'select %s from %s where %s %s = %d',
> $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $field, $id
>                 );
>             } else {
>                 $query = sprintf(
>                     'select %s from %s where %s %s = \'%s\'',
> $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $field, $id
>                 );
>             }
>
>             // Execute the query and return the record
>             return $this->_fromNodeArray( $this->_getRecord( $query ) );
>
>         }
>
>         /**
>          *  Fetch the descendants of a node, or if no node is specified,
> fetch the entire tree. Optionally, only return
>          *  child data instead of all descendant data.
>          *
>          *  @param $id              (optional) The ID of the node to fetch
> descendant data for. Specify an  invalid ID
>          *                          (e.g. 0) to retrieve all data.
>          *  @param $includeSelf     (optional) Whether or not to include
> the passed node in the the results. This has no
>          *                          meaning if fetching entire tree.
>          *  @param $childrenOnly    (optional) True if only returning
> children data. False if returning all descendant
>          *                          data.
>          *  @param $max_level       (optional) Maximum level to retrieve.
> Default is all.
>          *  @param $order           (optional) The order of the records to
> return.
>          *  @param $specificPart    (optional) Return array should be
> not-associative (using a specific key to filter)
>          *
>          *  @returns The descendants of the passed now
>          */
>         function getDescendants( $id=0, $includeSelf=false,
> $childrenOnly=false, $max_level=null, $order=null,
> $specificPart=null ) {
>
>             // Get the ID field
>             $idField = $this->fields['id'];
>
>             // Get the node
>             $node = $this->_toNodeArray( $this->getNode( $id ) );
>
>             // Find nleft, nright and parent_id
>             if ( ! $node ) {
>                 $nleft = 0;
>                 $nright = 0;
>                 $parent_id = 0;
>             } else {
>                 $nleft = $node['nleft'];
>                 $nright = $node['nright'];
>                 $parent_id = $node[$idField];
>             }
>
>             // Get the order
>             if ( empty( $order ) ) {
>                 $order = 'order by nleft';
>             } else {
>                 $order = 'order by ' . $order . ', nleft';
>             }
>
>             // Children only
>             if ( $childrenOnly ) {
>
>                 // Include ourselves?
>                 if ( $includeSelf ) {
>                     $query = sprintf(
>                         'select %s from %s where %s %s = %d or %s = %d
> %s',
>                         $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $this->fields['id'],
> $parent_id, $this->fields['parent'], $parent_id,
> $order
>                     );
>                 } else {
>                     $query = sprintf(
>                         'select %s from %s where %s %s = %d %s',
>                         $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $this->fields['parent'],
> $parent_id, $order
>                     );
>                 }
>
>             } else {
>
>                 // Include all
>                 if ( $nleft > 0 && $includeSelf ) {
>                     $query = sprintf(
>                         'select %s from %s where %s nleft >= %d and nright
> <= %d %s',
>                          $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $nleft, $nright, $order
>                     );
>                 } else if ( $nleft > 0 ) {
>                     $query = sprintf(
>                         'select %s from %s where %s nleft > %d and nright
> < %d %s',
>                         $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $nleft, $nright, $order
>                     );
>                 } else {
>                     $query = sprintf( 'select %s from %s where %s id > 0
> %s', $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $order );
>                 }
>
>             }
>
>             // Add the level constraint
>             if ( ! is_null( $max_level ) ) {
>                 $max_level = ( $includeSelf ) ? $max_level : $max_level +
> 1;
>                 $max_level = ( $includeSelf ) ? $node['nlevel'] +
> $max_level - 1 : $node['nlevel'] + $max_level;
>                 $query = str_replace( 'where ', 'where nlevel <= ' .
> $max_level . ' and ', $query );
>             }
>
>             // Get the results as an array
>             $records = $this->_getRecords( $query );
>
>             // Reformat the array
>             $arr = array();
>             foreach ( $records as $record ) {
>                 $arr[ $record[$idField] ] = $this->_fromNodeArray( $record
> );
>             }
>
>             // check if we want a specific column
>             if ( !is_null( $specificPart ) ){
>
>                 // init temporary array
>                 $nodes = array();
>                 foreach ( $arr as $node )
>                     array_push( $nodes, $node[ $specificPart ] );
>
>                 return $nodes;
>             }
>
>             // Return the result
>             return $arr;
>
>         }
>
>         /**
>          *  Fetch the children of a node, or if no node is specified,
> fetch the top level items.
>          *
>          *  @param $id             (optional) The ID of the node to fetch
> child data for.
>          *  @param $includeSelf    (optional) Whether or not to include
> the passed node in the the results.
>          *  @param $order          (optional) The order of the records to
> return.
>          *
>          *  @returns The children of the passed node
>          */
>         function getChildren( $id=0, $includeSelf=false, $order=null ) {
>             return $this->getDescendants( $id, $includeSelf, true, null,
> $order );
>         }
>
>         /**
>          *  Fetch the path to a node. If an invalid node is passed, an
> empty array is returned. If a top level node is
>          *  passed, an array containing on that node is included (if
> 'includeSelf' is set to true, otherwise an empty
>          *  array).
>          *
>          *  @param $id             (optional) The ID of the node to fetch
> child data for.
>          *  @param $includeSelf    (optional) Whether or not to include
> the passed node in the the results.
>          *
>          *  @returns An array of each node to passed node
>          */
>         function getPath( $id=0, $includeSelf=false ) {
>
>             // Get the ID field
>             $idField = $this->fields['id'];
>
>             // Get the node
>             $node = $this->_toNodeArray( $this->getNode( $id ) );
>
>             // No node, return empty array
>             if ( ! $node ) {
>                 return array();
>             }
>
>             // Include ourselves?
>             if ( $includeSelf ) {
>                 $query = sprintf(
>                     'select %s from %s where %s nleft <= %d and nright >=
> %d order by nlevel',
>                     $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $node['nleft'], $node['nright']
>                 );
>             } else {
>                 $query = sprintf(
>                     'select %s from %s where %s nleft < %d and nright > %d
> order by nlevel',
>                     $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $node['nleft'], $node['nright']
>                 );
>             }
>
>             // Get the results as an array
>             $records = $this->_getRecords( $query );
>
>             // Reformat the array
>             $arr = array();
>             foreach ( $records as $record ) {
>                 $arr[ $record[$idField] ] = $this->_fromNodeArray( $record
> );
>             }
>
>             // Return the result
>             return $arr;
>
>         }
>
>         /**
>          *  Check if one node descends from another node. If either node
> is not found, then false is returned.
>          *
>          *  @param $descendant_id  The node that potentially descends
>          *  @param $ancestor_id    The node that is potentially descended
> from
>          *
>          *  @returns True if $descendant_id descends from $ancestor_id,
> false otherwise
>          */
>         function isDescendantOf( $descendant_id, $ancestor_id ) {
>
>             // Get the node
>             $node = $this->_toNodeArray( $this->getNode( $ancestor_id ) );
>
>             // No node, return empty array
>             if ( ! $node ) {
>                 return false;
>             }
>
>             // The query
>             $query = sprintf(
>                 'select count(*) as is_descendant from %s where %s %s = %d
> and nleft > %d and nright < %d',
>                 $this->table, $this->_getFilter(), $this->fields['id'],
> $descendant_id, $node['nleft'], $node['nright']
>             );
>
>             // Execute the query and get the record
>             $record = $this->_getRecord( $query );
>
>             // Return the result
>             if ( $record ) {
>                 return $record['is_descendant'] > 0;
>             } else {
>                 return false;
>             }
>
>         }
>
>         /**
>          *  Check if one node is a child of another node. If either node
> is not found, then false is returned.
>          *
>          * @param $child_id       The node that is possibly a child
>          * @param $parent_id      The node that is possibly a parent
>          *
>          * @returns True if $child_id is a child of $parent_id, false
> otherwise
>          */
>         function isChildOf( $child_id, $parent_id ) {
>
>             // The query
>             $query = sprintf(
>                 'select count(*) as is_child from %s where %s %s = %d and
> %s = %d',
>                 $this->table, $this->_getFilter(), $this->fields['id'],
> $child_id, $this->fields['parent'], $parent_id
>             );
>
>             // Execute the query and get the record
>             $record = $this->_getRecord( $query );
>
>             // Return the result
>             if ( $record ) {
>                 return $record['is_child'] > 0;
>             } else {
>                 return false;
>             }
>
>         }
>
>         /**
>          *  Find the number of descendants a node has
>          *
>          *  @param $id     The ID of the node to search for. Pass 0 to
> count all nodes in the tree.
>          *
>          *  @returns The number of descendants the node has, or -1 if the
> node isn't found.
>          */
>         function numDescendants( $id ) {
>
>             // Check for the ID
>             if ( $id == 0 ) {
>
>                 // The query
>                 $query = sprintf('select count(*) as num_descendants from
> %s where', $this->table, $this->_getFilter() );
>
>                 // Execute the query and get the record
>                 $record = $this->_getRecord( $query );
>
>                 // Return the number of descendants for the node
>                 if ( $record ) {
>                     return intval( $row['num_descendants'] );
>                 }
>
>             } else {
>
>                 // Get the node
>                 $node = $this->getNode( $id );
>
>                 // Return the number of descendants
>                 if ( $node ) {
>                     return ( $node['nright'] - $node['nleft'] - 1 ) / 2;
>                 }
>
>             }
>
>             // No descendants
>             return -1;
>
>         }
>
>         /**
>          *  Find the number of children a node has
>          *
>          *  @param $id     The ID of the node to search for. Pass 0 to
> count the first level items
>          *
>          *  @returns The number of descendants the node has, or -1 if the
> node isn't found.
>          */
>         function numChildren( $id ) {
>
>             // The query
>             $query = sprintf(
>                 'select count(*) as num_children from %s where %s %s =
> %d', $this->table, $this->_getFilter(),
> $this->fields['parent'], $id
>             );
>
>             // Execute the query and get the record
>             $record = $this->_getRecord( $query );
>
>             // Return the number of descendants for the node
>             if ( $record ) {
>                 return intval( $record['num_children'] );
>             }
>
>             // Return -1
>             return -1;
>
>         }
>
>         /**
>          *  Fetch the immediately family of a node. More specifically,
> fetch a node's parent, siblings and children. If
>          *  the node isn't valid, fetch the first level of nodes from the
> tree.
>          *
>          * @param $id   The ID of the node to fetch child data for.
>          *
>          * @returns An array of each node in the family
>          */
>         function getImmediateFamily( $id ) {
>
>             // Get the node
>             $node = $this->_toNodeArray( $this->getNode( $id ) );
>
>             // The ID and parent field
>             $idField = $this->fields['id'];
>             $parentField = $this->fields['parent'];
>
>             // Is the passed node valid?
>             if ( $node[$idField] > 0 ) {
>                 $query = sprintf(
>                     'select %s from %s where %s %s = %s or %s = %s or %s =
> %s order by nleft',
>                     $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $idField, $node[$parentField],
> $parentField,
>                     $node[$parentField], $parentField, $node[$idField]
>                 );
>
>             } else {
>                 $query = sprintf(
>                     'select %s from %s where %s %s = 0 order by nleft',
>                     $this->_getFieldsAsString(), $this->table,
> $this->_getFilter(), $parentField
>                 );
>             }
>
>             //  Get the result
>             $records = $this->_getRecords( $query );
>
>             // Get the result
>             $arr = array();
>             foreach ( $records as $record ) {
>                 $record['num_descendants'] = ( $record['nright'] -
> $record['nleft'] - 1 ) / 2;
>                 $arr[ $record[$idField] ] = $this->_fromNodeArray( $record
> );
>             }
>
>             // Return the result
>             return $arr;
>
>         }
>
>
>         /**
>          *  Fetch the tree data, nesting within each node references to
> the node's children
>          *
>          *  @returns The tree with the node's child data
>          */
>         function getTreeWithChildren() {
>
>             // The ID and parent field
>             $idField = $this->fields['id'];
>             $parentField = $this->fields['parent'];
>
>             // The query
>             $query = sprintf(
>                 'select %s from %s %s order by %s',
> $this->_getFieldsAsString(), $this->table,
> $this->_getWhereFilter(false), $this->fields['sort']
>             );
>
>             // Get the records
>             $records = $this->_getRecords( $query );
>
>             // create a root node to hold child data about first level
> items
>             $root = new YDBase();
>             $root->$idField = 0;
>             $root->children = array();
>             $arr = array( $root );
>
>             // populate the array and create an empty children array
>             foreach ( $records as $record ) {
>                 $record = $this->_arrayToObj( $record );
>                 $arr[ $record->$idField ] = $record;
>                 $arr[ $record->$idField ]->children = array();
>             }
>
>             // now process the array and build the child data
>             foreach ( $arr as $id => $row ) {
>                 if ( isset( $row->$parentField ) ) {
>                     $arr[ $row->$parentField ]->children[ $id ] = $id;
>                 }
>             }
>
>             // Return the array
>             return $arr;
>
>         }
>
>         /**
>          *  Rebuilds the tree data and saves it to the database
>          */
>         function rebuild() {
>
>             // Clear the cache
>             $this->_clearCache();
>
>             // Get the complete tree
>             $data = $this->getTreeWithChildren();
>
>             // Keep the original data (we need to optimize the updates)
>             $data_ori = array_merge( $data );
>
>             // Keep track of the number and level
>             $n     = 0; // Need a variable to hold the running n tally
>             $level = 0; // Need a variable to hold the running level tally
>
>             // Invoke the recursive function. Start it processing on the
> fake "root node" generated in
>             // getTreeWithChildren(). because this node doesn't really
> exist in the database, we give it an initial
>             // nleft value of 0 and an nlevel of 0.
>             $this->_generateTreeData( $data, 0, 0, $n );
>
>             // At this point the the root node will have nleft of 0,
> nlevel of 0 and nright of (tree size * 2 + 1)
>             foreach ( $data as $id=>$row ) {
>                 if ( $id == 0 ) {
>                     continue;
>                 }
>                 $query = sprintf(
>                     'update %s set nlevel = %d, nleft = %d, nright = %d
> where %s %s = %d',
>                     $this->table, $row->nlevel, $row->nleft, $row->nright,
> $this->_getFilter(), $this->fields['id'], $id
>                 );
>                 $this->db->executeSql( $query );
>             }
>
>         }
>
>         /**
>          *  Generate the tree data. A single call to this generates the
> n-values for 1 node in the tree. This function
>          *  assigns the passed in n value as the node's nleft value. It
> then processes all the node's children (which in
>          *  turn recursively processes that node's children and so on),
> and when it is finally done, it takes the update
>          *  n-value and assigns it as its nright value. Because it is
> passed as a reference, the subsequent changes in
>          *  subrequests are held over to when control is returned so the
> nright can be assigned.
>          *
>          *  @param &$arr   A reference to the data array, since we need to
> be able to update the data in it
>          *  @param $id     The ID of the current node to process
>          *  @param $level  The nlevel to assign to the current node
>          *  @param &$n     A reference to the running tally for the
> n-value
>          *
>          *  @internal
>          */
>         function _generateTreeData( &$arr, $id, $level, &$n ) {
>
>             // Assign nlevel and nleft
>             $arr[$id]->nlevel = $level;
>             $arr[$id]->nleft = $n++;
>
>             // Loop over the node's children and process their data before
> assigning the nright value
>             foreach ( $arr[$id]->children as $child_id ) {
>                 $this->_generateTreeData( $arr, $child_id, $level + 1, $n
> );
>             }
>
>             // Assign nright
>             $arr[$id]->nright = $n++;
>
>         }
>
>         /**
>          *  This function adds a node to the database.
>          *
>          *  @param $values      The field values of the node.
>          *  @param $parent_id   (optional) The parent ID of the node. The
> default takes it from the $values.
>          *
>          *  @returns    The ID of the newly inserted node.
>          */
>         function addNode( $values, $parent_id=null ) {
>
> 			// load the defaults first
> 			foreach ( $this->_add_defaults as $key => $value ) {
> 				$values[ $key ] = $value;
> 			}
>
>             // Convert the values from an ojbect to an array
>             $values = $this->_toNodeArray( $values );
>
> 			if ( $this->_use_filter == true ) {
> 				foreach ( $this->_filter_criteria as $key => $value ) {
> 					$values[ $key ] = $value;
> 				}
> 			}
>
>             // Clear the cache
>             $this->_clearCache();
>
>             // Add the parent field if needed
>             $parentField = $this->fields['parent'];
>             if ( ! is_null( $parent_id ) && ! isset( $values[ $parentField
> ] ) ) {
>                 $values[ $parentField ] = $parent_id;
>             }
>
>             // Use 0 if no parent ID specified (the root element)
>             if ( ! isset( $values[ $parentField ] ) ) {
>                 $values[ $parentField ] = 0;
>             }
>
>             // Check if the parent node exists
>             if ( isset( $values[ $parentField ] ) && intval( $values[
> $parentField ] ) != 0 ) {
>                 $node = $this->getNode( $values[ $parentField ] );
>                 if ( ! $node ) {
>                     trigger_error( 'Parent node (' . $values[ $parentField
> ] . ') does not exist in the tree!', YD_ERROR );
>                 }
>             }
>
>             // Perform the insert
>             $this->db->executeInsert( $this->table, $values );
>
>             // Get the ID of the new node
>             $id = $this->db->getLastInsertID();
>
>             // Rebuild the tree
>             $this->rebuild();
>
>             // Return the ID
>             return $id;
>
>         }
>
>         /**
>          *  This function updates a node in the database.
>          *
>          *  @param $values      The field values of the node.
>          *  @param $id          (optional) The ID of the node to update.
>          *
>          *  @returns    The values of the node that is updated.
>          */
>         function updateNode( $values, $id=null ) {
>
>             // The ID and parent field
>             $idField = $this->fields['id'];
>
>             // Convert the values from an ojbect to an array
>             $values = $this->_toNodeArray( $values );
>
>             // Clear the cache
>             $this->_clearCache();
>
>             // Get the ID of the node to update
>             $id = empty( $id ) ? $values['id'] : $id;
>
>             // Perform the insert
>             $this->db->executeUpdate(
>                 $this->table, $values, sprintf( '%s %s = %s',
> $this->_getFilter(), $idField, $this->db->escapeSql( $id )
> )
>             );
>
>             // Rebuild the tree
>             $this->rebuild();
>
>             // Return the node
>             return $values;
>
>         }
>
>         /**
>          *  Delete the node and it's children.
>          *
>          *  @param $id             The ID of the node to delete.
>          *  @param $includeParent  (Optional) Delete id and all children
> (true by default. if false, deletes children only)
>          */
>         function deleteNode( $id, $includeParent = true ) {
>
>             // Clear the cache
>             $this->_clearCache();
>
>             // Get the node details
>             $node = $this->getNode( $id );
>
>             // Return if unknown node
>             if ( ! $node ) {
>                 return;
>             }
>
>             // Get the list of IDs to delete
> 			$nodes_to_delete = $this->getDescendants( $id, $includeParent, false,
> null, null, $this->fields['id'] );
>
>             // Check if there is something to delete
>             if ( sizeof( $nodes_to_delete ) > 0 ) {
>
>                 // The query to execute
>                 $query = 'delete from ' . $this->table . ' where ' .
> $this->_getFilter() . ' ' . $this->fields['id'] . ' in ( '
> . join( ', ', $nodes_to_delete ) . ' )';
>
>                 // Delete the nodes
>                 $this->db->executeSql( $query );
>
>                 // Rebuild the tree
>                 $this->rebuild();
>
>             }
>
>         }
>
>         /**
>          *  Move a node to a different parent node.
>          *
>          *  @param  $id         The ID of the node to move.
>          *  @param  $parent_id  The ID of the new parent node
>          */
>         function moveNode( $id, $parent_id ) {
>
>             // Clear the cache
>             $this->_clearCache();
>
>             // The ID and parent field
>             $idField = $this->fields['id'];
>             $parentField = $this->fields['parent'];
>
>             // Update the new parent id
>             $values = array();
>             $values[ $parentField ] = $parent_id;
>
>             // Execute the update
>             $this->db->executeUpdate( $this->table, $values,
> $this->_getFilter() . ' ' . $idField . ' = ' . $id );
>
>             // Rebuild the tree
>             $this->rebuild();
>
>         }
>
>     }
>
> ?>
> --------------090008040201020508070901--_______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/ydframework-devel
>



