From pclaerhout at berlios.de  Wed Mar  1 13:23:56 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 1 Mar 2006 13:23:56 +0100
Subject: [ydf-devel] r1755 - YDFramework2.0/trunk/examples/weblog/manage
Message-ID: <200603011223.k21CNu6U000328@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-01 13:23:44 +0100 (Wed, 01 Mar 2006)
New Revision: 1755

Modified:
   YDFramework2.0/trunk/examples/weblog/manage/config.tpl
Log:
Added the missing form element "email_new_item".

Modified: YDFramework2.0/trunk/examples/weblog/manage/config.tpl
===================================================================
--- YDFramework2.0/trunk/examples/weblog/manage/config.tpl	2006-02-28 19:13:14 UTC (rev 1754)
+++ YDFramework2.0/trunk/examples/weblog/manage/config.tpl	2006-03-01 12:23:44 UTC (rev 1755)
@@ -240,6 +240,10 @@
                 <td class="adminRowL" width="300">{$form.email_new_comment.label_html}</td>
                 <td class="adminRowL" width="400">{$form.email_new_comment.html}</td>
             </tr>
+            <tr>
+                <td class="adminRowL" width="300">{$form.email_new_item.label_html}</td>
+                <td class="adminRowL" width="400">{$form.email_new_item.html}</td>
+            </tr>
         </table>
         <table width="700" cellspacing="0" cellpadding="0" border="0">
             <tr><td colspan="3">&nbsp;</td></tr>



From ydfpoi at gmail.com  Wed Mar  1 15:50:32 2006
From: ydfpoi at gmail.com (ydf poi)
Date: Wed, 1 Mar 2006 15:50:32 +0100
Subject: [ydf-devel] Typo in french translation
Message-ID: <306340e00603010650x7861de6ah@mail.gmail.com>

still a typo born in build 1742:

in file weblog/include/languages/language_fr.php:

$GLOBALS['t']['cfg_notification_email_item'] = 'Pr&eacute;venir par
email des nouveaux articles';
should be 'Pr&eacute;venir par email des nouvelles entr&eacute;es'

Kind regards
--
po?


From phmassa at gmail.com  Wed Mar  1 16:05:44 2006
From: phmassa at gmail.com (ph-m)
Date: Wed, 1 Mar 2006 16:05:44 +0100
Subject: [ydf-devel] Typo in french translation
In-Reply-To: <306340e00603010650x7861de6ah@mail.gmail.com>
References: <306340e00603010650x7861de6ah@mail.gmail.com>
Message-ID: <829084a60603010705s71867837r@mail.gmail.com>

hi,

il y a quand m?me des fran?ais ici :)

ph-m
PS: je peux aussi parler portugais

Le 01/03/06, ydf poi<ydfpoi at gmail.com> a ?crit :
> still a typo born in build 1742:
>
> in file weblog/include/languages/language_fr.php:
>
> $GLOBALS['t']['cfg_notification_email_item'] = 'Pr&eacute;venir par
> email des nouveaux articles';
> should be 'Pr&eacute;venir par email des nouvelles entr&eacute;es'
>
> Kind regards
> --
> po?
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>


From ydfpoi at gmail.com  Wed Mar  1 17:36:05 2006
From: ydfpoi at gmail.com (ydf poi)
Date: Wed, 1 Mar 2006 17:36:05 +0100
Subject: [ydf-devel] Useless variable in YDWeblogAPI::addItem
Message-ID: <306340e00603010836k22788915l@mail.gmail.com>

Hi Pieter,

in build 1742 you changed the YDWeblogAPI::addItem method to this one:

function addItem( $values ) {
    $result = $this->_executeInsert( '#_items', $values );
}

Are you sure you didn't want to return the value of $result?

Kind regards
--
po?


From pclaerhout at berlios.de  Wed Mar  1 19:32:06 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 1 Mar 2006 19:32:06 +0100
Subject: [ydf-devel] r1756 - YDFramework2.0/trunk/examples/weblog/include/languages
Message-ID: <200603011832.k21IW6Tk025224@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-01 19:31:52 +0100 (Wed, 01 Mar 2006)
New Revision: 1756

Modified:
   YDFramework2.0/trunk/examples/weblog/include/languages/language_fr.php
Log:
Fixed another wrong translation in the french translation for the weblog application.

Modified: YDFramework2.0/trunk/examples/weblog/include/languages/language_fr.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/languages/language_fr.php	2006-03-01 12:23:44 UTC (rev 1755)
+++ YDFramework2.0/trunk/examples/weblog/include/languages/language_fr.php	2006-03-01 18:31:52 UTC (rev 1756)
@@ -253,7 +253,7 @@
 $GLOBALS['t']['cfg_weblog_date_format'] = 'Format des dates';
 $GLOBALS['t']['cfg_notification'] = 'Options de notification';
 $GLOBALS['t']['cfg_notification_email_comment'] = 'Pr&eacute;venir par email des nouveaux commentaires';
-$GLOBALS['t']['cfg_notification_email_item'] = 'Pr&eacute;venir par email des nouveaux articles';
+$GLOBALS['t']['cfg_notification_email_item'] = 'Pr&eacute;venir par email des nouvelles entr&eacute;es';
 $GLOBALS['t']['cfg_rss'] = 'Options de syndication';
 $GLOBALS['t']['cfg_rss_max_syndicated_items'] = 'Nombre d\'entr&eacute;es syndiqu&eacute;es';
 $GLOBALS['t']['err_db_host'] = 'Le serveur (hostname) de la base de donn&eacute;es est requis';



From pieter at yellowduck.be  Wed Mar  1 19:32:38 2006
From: pieter at yellowduck.be (Pieter Claerhout)
Date: Wed, 1 Mar 2006 19:32:38 +0100
Subject: [ydf-devel] Typo in french translation
In-Reply-To: <829084a60603010705s71867837r@mail.gmail.com>
References: <306340e00603010650x7861de6ah@mail.gmail.com>
	 <829084a60603010705s71867837r@mail.gmail.com>
Message-ID: <4aef63030603011032h6532c72fy63bafc187a75bfd@mail.gmail.com>

Fixed in build 1756.

pieter

On 3/1/06, ph-m <phmassa at gmail.com> wrote:
>
> hi,
>
> il y a quand m?me des fran?ais ici :)
>
> ph-m
> PS: je peux aussi parler portugais
>
> Le 01/03/06, ydf poi<ydfpoi at gmail.com> a ?crit :
> > still a typo born in build 1742:
> >
> > in file weblog/include/languages/language_fr.php:
> >
> > $GLOBALS['t']['cfg_notification_email_item'] = 'Pr&eacute;venir par
> > email des nouveaux articles';
> > should be 'Pr&eacute;venir par email des nouvelles entr&eacute;es'
> >
> > Kind regards
> > --
> > po?
> > _______________________________________________
> > YDFramework-devel mailing list
> > YDFramework-devel at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/ydframework-devel
> >
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>



--
pieter claerhout . pieter at yellowduck.be . http://www.yellowduck.be/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060301/30684662/attachment.html>

From pieter at yellowduck.be  Wed Mar  1 19:35:40 2006
From: pieter at yellowduck.be (Pieter Claerhout)
Date: Wed, 1 Mar 2006 19:35:40 +0100
Subject: [ydf-devel] Useless variable in YDWeblogAPI::addItem
In-Reply-To: <306340e00603010836k22788915l@mail.gmail.com>
References: <306340e00603010836k22788915l@mail.gmail.com>
Message-ID: <4aef63030603011035x6cf8bae9vf07ce0e6bc42190e@mail.gmail.com>

Fixed in build 1757.

pieter

On 3/1/06, ydf poi <ydfpoi at gmail.com> wrote:
>
> Hi Pieter,
>
> in build 1742 you changed the YDWeblogAPI::addItem method to this one:
>
> function addItem( $values ) {
>    $result = $this->_executeInsert( '#_items', $values );
> }
>
> Are you sure you didn't want to return the value of $result?
>
> Kind regards
> --
> po?
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>



--
pieter claerhout . pieter at yellowduck.be . http://www.yellowduck.be/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060301/a8e2240f/attachment.html>

From pclaerhout at berlios.de  Wed Mar  1 19:35:19 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 1 Mar 2006 19:35:19 +0100
Subject: [ydf-devel] r1757 - YDFramework2.0/trunk/examples/weblog/include
Message-ID: <200603011835.k21IZJKL027181@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-01 19:35:15 +0100 (Wed, 01 Mar 2006)
New Revision: 1757

Modified:
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
Log:
Fixed the YDWeblogAPI::addItem method so that it returns the value again.

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-01 18:31:52 UTC (rev 1756)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-01 18:35:15 UTC (rev 1757)
@@ -327,7 +327,7 @@
 
         // Add an item
         function addItem( $values ) {
-            $result = $this->_executeInsert( '#_items', $values );
+            return $this->_executeInsert( '#_items', $values );
         }
 
         // Update an item



From ximian at berlios.de  Thu Mar  2 00:37:54 2006
From: ximian at berlios.de (ximian at BerliOS)
Date: Thu, 2 Mar 2006 00:37:54 +0100
Subject: [ydf-devel] r1758 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603012337.k21NbsZG019557@sheep.berlios.de>

Author: ximian
Date: 2006-03-02 00:37:51 +0100 (Thu, 02 Mar 2006)
New Revision: 1758

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
- on php4 it's not possible to assign a default value to reference parameters
- we need to find a way to make the YDForm object not required
  (and a way to define more than one YDForm to YDAjax)

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-01 18:35:15 UTC (rev 1757)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-01 23:37:51 UTC (rev 1758)
@@ -65,7 +65,7 @@
          *	@param $template		Template object.
          *	@param $form			Form object.
          */
-        function YDAjax( & $template, & $form = null){
+        function YDAjax( & $template, & $form ){
 
 			// prefix string used in js function names
 			$this->prefix = YDConfig::get( 'YD_AJAX_PREFIX' );



From pclaerhout at berlios.de  Thu Mar  2 09:35:41 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 2 Mar 2006 09:35:41 +0100
Subject: [ydf-devel] r1759 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200603020835.k228Zfla003260@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-02 09:34:43 +0100 (Thu, 02 Mar 2006)
New Revision: 1759

Modified:
   YDFramework2.0/trunk/examples/weblog/xml.php
Log:
Fixed the XML feeds of the weblog application. The bbcode template modifier function couldn't be found.

Modified: YDFramework2.0/trunk/examples/weblog/xml.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/xml.php	2006-03-01 23:37:51 UTC (rev 1758)
+++ YDFramework2.0/trunk/examples/weblog/xml.php	2006-03-02 08:34:43 UTC (rev 1759)
@@ -87,7 +87,7 @@
                 }
 
                 // Add it to the feed
-                $this->feed->addItem( $item['title'], YDTplModLinkItem( $item ), YDTplModBBCode( $body ) );
+                $this->feed->addItem( $item['title'], YDTplModLinkItem( $item ), YDTemplate_modifier_bbcode( $body ) );
 
             }
 
@@ -109,7 +109,7 @@
             foreach ( $comments as $comment ) {
                 $body = $comment['comment'] . "\n\n" . t('by') . ' ' . $comment['username'];
                 $this->feed->addItem(
-                    $comment['item_title'], YDTplModLinkItem( $comment['item_id'], '#comment' ), YDTplModBBCode( $body )
+                    $comment['item_title'], YDTplModLinkItem( $comment['item_id'], '#comment' ), YDTemplate_modifier_bbcode( $body )
                 );
             }
 
@@ -134,7 +134,7 @@
                     foreach ( $item['images'] as $image ) {
                         $body .= '<img src="' . YDTplModLinkThumb( $image ) . '"/> ';
                     }
-                    $this->feed->addItem( $item['title'], YDTplModLinkItemGallery( $item ), YDTplModBBCode( $body ) );
+                    $this->feed->addItem( $item['title'], YDTplModLinkItemGallery( $item ), YDTemplate_modifier_bbcode( $body ) );
                 }
             }
 



From pclaerhout at berlios.de  Thu Mar  2 20:23:49 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 2 Mar 2006 20:23:49 +0100
Subject: [ydf-devel] r1760 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200603021923.k22JNnrr029391@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-02 20:23:47 +0100 (Thu, 02 Mar 2006)
New Revision: 1760

Modified:
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
New comment emails now automatically get sent to the weblog authors as well.

Bug #6633

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-03-02 08:34:43 UTC (rev 1759)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-03-02 19:23:47 UTC (rev 1760)
@@ -109,6 +109,9 @@
                         // Get the list of subscriptions
                         $subscribers = $this->weblog->getCommentSubscribers( $id );
 
+                        // Get the list of subscriptions
+                        $users = $this->weblog->getUsers();
+
                         // Add the comment to the email template
                         $this->tpl->assign( 'eml_comment', $values );
 
@@ -124,6 +127,9 @@
                         foreach ( $subscribers as $subscriber ) {
                             $eml->addBcc( $subscriber );
                         }
+                        foreach ( $users as $user ) {
+                            $eml->addBcc( $user['email'], $user['name'] );
+                        }
                         $eml->setSubject( t('new_comment') . ': ' . strip_tags( $item['title'] ) );
                         $eml->setHtmlBody( $this->fetch( 'comment_email' ) );
                         $eml->send();



From david_db at berlios.de  Fri Mar  3 06:45:32 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Fri, 3 Mar 2006 06:45:32 +0100
Subject: [ydf-devel] r1761 - in YDFramework2.0/trunk/YDFramework2/addons: YDDatabaseObject YDDatabaseQuery YDDatabaseQuery/YDDatabaseQueryDrivers
Message-ID: <200603030545.k235jWFt019008@sheep.berlios.de>

Author: david_db
Date: 2006-03-03 06:44:42 +0100 (Fri, 03 Mar 2006)
New Revision: 1761

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_oracle.php
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_postgres.php
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_sqlite.php
Log:
Updated YDDatabaseObject and YDDatabaseQuery classes to be able to use YDDatabase named instances.

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-02 19:23:47 UTC (rev 1760)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-03 05:44:42 UTC (rev 1761)
@@ -104,7 +104,7 @@
 
             // Setup the module
             $this->_author = 'David Bittencourt';
-            $this->_version = '4.26';
+            $this->_version = '4.27';
             $this->_copyright = '(c) 2005 David Bittencourt, muitocomplicado at hotmail.com';
             $this->_description = 'This class defines a YDDatabaseObject object.';
 
@@ -171,14 +171,23 @@
         /**
          *  This function register the database connection.
          *
-         *  @param $db  Reference to the database abstraction layer.
+         *  @param $db  The YDDatabase object pointing to the database or the named instance.
          *
-         *  @returns    A reference to the database abstraction layer.
+         *  @returns    A reference to the YDDatabase object.
          */
-        function & registerDatabase( & $db ) {
-            $this->_db = & $db;
+        function & registerDatabase( $db=null ) {
+        
+            if ( is_null( $db ) ) {
+                $this->_db = YDDatabase::getNamedInstance();
+            } else if ( is_string( $db ) ) {
+                $this->_db = YDDatabase::getNamedInstance( $db );
+            } else {
+                $this->_db = $db;
+            }
+            
             $this->_query = YDDatabaseQuery::getInstance( $this->_db );
             return $this->_db;
+            
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php	2006-03-02 19:23:47 UTC (rev 1760)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php	2006-03-03 05:44:42 UTC (rev 1761)
@@ -41,7 +41,7 @@
 
             // Setup the module
             $this->_author = 'David Bittencourt';
-            $this->_version = '2.6';
+            $this->_version = '2.7';
             $this->_copyright = '(c) 2005 David Bittencourt, muitocomplicado at hotmail.com';
             $this->_description = 'This class defines a YDDatabaseQuery object.';
             
@@ -50,12 +50,18 @@
         /**
          *  This function creates a new YDDatabaseQuery class for the specified database engine.
          *
-         *  @param  $db The YDDatabaseDriver object to use.
+         *  @param  $db The YDDatabase object pointing to the database or the named instance.
          *
          *  @returns    Returns a new YDDatabaseQuery class.
          */
-        function getInstance( & $db ) {
+        function getInstance( $db=null ) {
 
+            if ( is_null( $db ) ) {
+                $db = YDDatabase::getNamedInstance();
+            } else if ( is_string( $db ) ) {
+                $db = YDDatabase::getNamedInstance( $db );
+            }
+            
             // Get the driver name
             $driver = $db->getDriver();
             
@@ -121,13 +127,21 @@
         var $filter   = true;
         
         /**
-         *  The class constructor can be used to set the action and optional options.
+         *  The class constructor.
+         *
+         *  @param $db  The YDDatabase object pointing to the database or the named instance.
          */
-         function YDDatabaseQueryDriver( & $db ) {
+         function YDDatabaseQueryDriver( $db=null ) {
             
             $this->YDBase();
             
-            $this->db = & $db;
+            if ( is_null( $db ) ) {
+                $this->db = YDDatabase::getNamedInstance();
+            } else if ( is_string( $db ) ) {
+                $this->db = YDDatabase::getNamedInstance( $db );
+            } else {
+                $this->db = $db;
+            }
             
             $this->reset();
             $this->action();
@@ -1051,7 +1065,7 @@
         /**
          *  The class constructor can be used to set the action and optional options.
          */
-        function YDDatabaseQueryDriver_mysql( & $db ) {
+        function YDDatabaseQueryDriver_mysql( $db=null ) {
             
             $this->YDDatabaseQueryDriver( $db );
             

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_oracle.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_oracle.php	2006-03-02 19:23:47 UTC (rev 1760)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_oracle.php	2006-03-03 05:44:42 UTC (rev 1761)
@@ -37,7 +37,7 @@
         /**
          *  The class constructor can be used to set the action and optional options.
          */
-        function YDDatabaseQueryDriver_oracle( & $db ) {
+        function YDDatabaseQueryDriver_oracle( $db=null ) {
             
             $this->YDDatabaseQueryDriver( $db );
             $this->reserved = '"';

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_postgres.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_postgres.php	2006-03-02 19:23:47 UTC (rev 1760)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_postgres.php	2006-03-03 05:44:42 UTC (rev 1761)
@@ -37,7 +37,7 @@
         /**
          *  The class constructor can be used to set the action and optional options.
          */
-        function YDDatabaseQueryDriver_postgres( & $db ) {
+        function YDDatabaseQueryDriver_postgres( $db=null ) {
             $this->YDDatabaseQueryDriver( $db );
             $this->reserved = '"';
         }

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_sqlite.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_sqlite.php	2006-03-02 19:23:47 UTC (rev 1760)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQueryDrivers/YDDatabaseQueryDriver_sqlite.php	2006-03-03 05:44:42 UTC (rev 1761)
@@ -37,7 +37,7 @@
         /**
          *  The class constructor can be used to set the action and optional options.
          */
-        function YDDatabaseQueryDriver_sqlite( & $db ) {
+        function YDDatabaseQueryDriver_sqlite( $db=null ) {
             $this->YDDatabaseQueryDriver( $db );
             $this->reserved = '"';
         }



From david_db at berlios.de  Fri Mar  3 07:09:09 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Fri, 3 Mar 2006 07:09:09 +0100
Subject: [ydf-devel] r1762 - in YDFramework2.0/trunk/YDFramework2/YDClasses: . YDFormRenderers
Message-ID: <200603030609.k236998a001655@sheep.berlios.de>

Author: david_db
Date: 2006-03-03 07:08:55 +0100 (Fri, 03 Mar 2006)
New Revision: 1762

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_array.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_html.php
Log:
Fixed YDFormElement::toArray to match the array returned by the array renderer. Users with custom renderers will have to check if they are using the "labelname" value from YDFormElement::toArray, and change it to "label".

Feature Request #1767

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-03-03 05:44:42 UTC (rev 1761)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-03-03 06:08:55 UTC (rev 1762)
@@ -1501,12 +1501,13 @@
             }
             return array(
                 'name'        => $this->_name,
+                'id'          => $this->_attributes['id'],
                 'value'       => $this->_value,
                 'default'     => $this->_default,
                 'type'        => $this->_type,
-                'labelname'   => $this->_label,
+                'label'       => $this->_label,
                 'attributes'  => $this->_attributes,
-                'label'       => '<label for="' . $this->_attributes['id'] . '">' . $this->_label . '</label>',
+                'label_html'  => '<label for="' . $this->_attributes['id'] . '">' . $this->_label . '</label>',
                 'options'     => $this->_options,
                 'placeLabel'  => $this->_placeLabel,
                 'html'        => $this->toHtml(),

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_array.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_array.php	2006-03-03 05:44:42 UTC (rev 1761)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_array.php	2006-03-03 06:08:55 UTC (rev 1762)
@@ -71,9 +71,9 @@
             $form['tag'] = '<form' . $form['attribs'] . '>';
             $form['requirednote'] = $this->_form->_requiredNote;
             $form['endtag'] = '</form>';
-
-            // Add the errors
             $form['name']   = $this->_form->_name;
+            
+            // Add the errors
             $form['errors'] = $this->_form->_errors;
             $form['errors_unique_messages' ] = array_unique( array_values( $this->_form->_errors ) );
 
@@ -105,39 +105,30 @@
                 }
                 $form[ $name ]['required'] = $required;
 
-                // Add the HTML labels
-                if ( $form[ $name ]['isButton'] === false ) {
-                    $form[ $name ]['label_html'] = '';
-                    if ( $form[ $name ]['placeLabel'] != 'none' ) {
-                        if ( ! empty( $form[ $name ]['label'] ) ) {
-                            $form[ $name ]['label_html'] .= $form[ $name ]['label'];
-                        }
-                        $obj = $this->_form->getElement( $name );
-                        if ( $form[ $name ]['required'] ) {
-                            $form[ $name ]['label_html'] = $this->_form->_htmlRequiredStart . $form[ $name ]['label_html'] . $this->_form->_htmlRequiredEnd;
-                        }
-                        if ( ! empty( $form[ $name ]['error'] ) ) {
-                            $form[ $name ]['error_html'] = $this->_form->_htmlErrorStart . $form[ $name ]['error'] . $this->_form->_htmlErrorEnd;
-                        }
+                // Add required and error HTML
+                if ( $form[ $name ]['isButton'] === false && $form[ $name ]['placeLabel'] != 'none' ) {
+                    if ( $form[ $name ]['required'] ) {
+                        $form[ $name ]['label_html'] = $this->_form->_htmlRequiredStart . $form[ $name ]['label_html'] . $this->_form->_htmlRequiredEnd;
                     }
+                    if ( ! empty( $form[ $name ]['error'] ) ) {
+                        $form[ $name ]['error_html'] = $this->_form->_htmlErrorStart . $form[ $name ]['error'] . $this->_form->_htmlErrorEnd;
+                    }
                 }
 
-                // Fix the labels
-                $form[ $name ]['label'] = $form[ $name ]['labelname'];
-                unset( $form[ $name ]['labelname'] );
-
             }
 
             // Add the do parameter if it's a get form
             if ( $this->_form->_method == 'get' ) {
                 $form['do'] = array();
                 $form['do']['name'] = 'do';
+                $form['do']['id'] = 'do';
                 $form['do']['value'] = YDRequest::getActionName();
                 $form['do']['type'] = 'hidden';
                 $form['do']['label'] = '';
+                $form['do']['label_html'] = '';
                 $form['do']['options'] = array();
                 $form['do']['placeLabel'] = 'none';
-                $form['do']['html'] = '<input type="hidden" name="do" value="' . YDRequest::getActionName() . '" />';
+                $form['do']['html'] = '<input type="hidden" name="do" id="do" value="' . YDRequest::getActionName() . '" />';
                 $form['do']['isButton'] = false;
                 $form['do']['error'] = '';
                 $form['do']['required'] = false;

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_html.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_html.php	2006-03-03 05:44:42 UTC (rev 1761)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_html.php	2006-03-03 06:08:55 UTC (rev 1762)
@@ -71,7 +71,10 @@
             unset( $form['errors'] );
             unset( $form['errors_unique_messages'] );
             unset( $form['requirednote'] );
-            unset( $form['name'] );
+            
+            if ( ! is_array( $form['name'] ) ) {
+                unset( $form['name'] );
+            }
 
             // Add the required note if there are required items
             if ( ! empty( $this->_form->_requiredNote ) ) {



From pclaerhout at berlios.de  Fri Mar  3 14:08:41 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Fri, 3 Mar 2006 14:08:41 +0100
Subject: [ydf-devel] r1763 - YDFramework2.0/trunk/examples/weblog/include
Message-ID: <200603031308.k23D8fOs012536@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-03 14:08:31 +0100 (Fri, 03 Mar 2006)
New Revision: 1763

Modified:
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php
Log:
The new item email are now using the correct URLs.

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php	2006-03-03 06:08:55 UTC (rev 1762)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php	2006-03-03 13:08:31 UTC (rev 1763)
@@ -317,8 +317,15 @@
             $this->tpl->assign( 'weblog_title',       YDConfig::get( 'weblog_title', 'Untitled Weblog' ) );
             $this->tpl->assign( 'weblog_description', YDConfig::get( 'weblog_description', 'Untitled Weblog Description' ) );
 
+            // Get the link to the different directories
+            $uploads_dir = YDUrl::makeLinkAbsolute( $this->dir_uploads );
+            $skin_dir    = YDUrl::makeLinkAbsolute( $this->dir_skins . $this->skin );
+            $image_dir   = YDUrl::makeLinkAbsolute( $skin_dir . '/images' );
+
             // Add the different directories to the template
-            $this->tpl->assign( 'uploads_dir', $this->dir_uploads );
+            $this->tpl->assign( 'uploads_dir', $uploads_dir );
+            $this->tpl->assign( 'skin_dir',    $skin_dir );
+            $this->tpl->assign( 'image_dir',   $image_dir );
 
         }
 



From david_db at berlios.de  Sat Mar  4 06:25:24 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Sat, 4 Mar 2006 06:25:24 +0100
Subject: [ydf-devel] r1764 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603040525.k245POs4017962@sheep.berlios.de>

Author: david_db
Date: 2006-03-04 06:25:12 +0100 (Sat, 04 Mar 2006)
New Revision: 1764

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php
Log:
Removed the cache in YDXml when loading a XML file from an url.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php	2006-03-03 13:08:31 UTC (rev 1763)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php	2006-03-04 05:25:12 UTC (rev 1764)
@@ -110,7 +110,7 @@
                     include_once( YD_DIR_HOME_CLS . '/YDUrl.php' );
                     
                     $url = new YDUrl( $mixed );
-                    $contents = $url->getContents(); // false cache?
+                    $contents = $url->getContents( false );
                     break;
             
                 case YD_XML_FILE:



From david_db at berlios.de  Sat Mar  4 06:38:08 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Sat, 4 Mar 2006 06:38:08 +0100
Subject: [ydf-devel] r1765 - YDFramework2.0/trunk/examples
Message-ID: <200603040538.k245c8M3023141@sheep.berlios.de>

Author: david_db
Date: 2006-03-04 06:37:55 +0100 (Sat, 04 Mar 2006)
New Revision: 1765

Modified:
   YDFramework2.0/trunk/examples/database_tree.php
Log:
Fixed a small thing in the database tree example that wasn't showing the sitemap path correctly.

Modified: YDFramework2.0/trunk/examples/database_tree.php
===================================================================
--- YDFramework2.0/trunk/examples/database_tree.php	2006-03-04 05:25:12 UTC (rev 1764)
+++ YDFramework2.0/trunk/examples/database_tree.php	2006-03-04 05:37:55 UTC (rev 1765)
@@ -232,7 +232,6 @@
             
             // Show the map
             echo( '<h2>Sitemap Tree Example</h2>' );
-            $path = array();
             foreach ( $tree->getDescendants( 1, true, false, $max_level ) as $child ) {
                 
                 /*



From francisco at fusemail.com  Sun Mar  5 17:29:58 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Sun, 5 Mar 2006 10:29:58 -0600 (CST)
Subject: [ydf-devel] YDAjax v2.4
Message-ID:      <1082.84.39.86.68.1141576198.fusewebmail-15630@webmail.fusemail.com>

Hi all

A new YDAjax release is out. All your YDAjax implementations should  be
upgraded, otherwise they wouldn't work.
So far, we defined the YDAjax constructor as: YDAjax( $template, $form ).

Now, only the template is required so, YDAjax only accepts the $template: 
YDAjax( $template ).

This means that, not only we can use YDAjax without forms but we can
define one, two... and up to 10 forms. We only need to use the new method
YDAjax::addForm( $formObject ).

So, you should upgrade you implementations from:
$ajax = new YDAjax( $template, $form );

to:
$ajax = new YDAjax( $template );
$ajax->addForm( $form );

.. and everything else should be transparent.

Btw, YDAjax is faster too. Some internal impruvements were made.

Francisco A


From ximian at berlios.de  Sun Mar  5 18:13:09 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 5 Mar 2006 18:13:09 +0100
Subject: [ydf-devel] r1767 - in YDFramework2.0/trunk: YDFramework2/addons/YDAjax examples examples/ajax
Message-ID: <200603051713.k25HD9Cv017828@sheep.berlios.de>

Author: ximian
Date: 2006-03-05 18:12:40 +0100 (Sun, 05 Mar 2006)
New Revision: 1767

Added:
   YDFramework2.0/trunk/examples/ajax/functions.tpl
Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
   YDFramework2.0/trunk/examples/ajax/functions.php
   YDFramework2.0/trunk/examples/index.tpl
Log:
release 2.4(1) :)
- added a new example that demonstrates YDAjax without a YDForm
- simple YDAjax clean up


Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-05 02:02:00 UTC (rev 1766)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-05 17:12:40 UTC (rev 1767)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.4';
+            $this->_version = '2.41';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -243,7 +243,7 @@
 			$options['style.zindex']   = 9999;
 
 			// create js for html element creation
-			$this->waitingMessageCode  = "\n\tvar " . $this->wtID . " = document.createElement('div');";
+			$this->waitingMessageCode  = "var " . $this->wtID . " = document.createElement('div');";
 			
 			// add custom options
 			foreach( $options as $name => $value )

Modified: YDFramework2.0/trunk/examples/ajax/functions.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/functions.php	2006-03-05 02:02:00 UTC (rev 1766)
+++ YDFramework2.0/trunk/examples/ajax/functions.php	2006-03-05 17:12:40 UTC (rev 1767)
@@ -6,7 +6,6 @@
 	// Includes
 	YDInclude( 'YDRequest.php' );
 	YDInclude( 'YDTemplate.php' );
-	YDInclude( 'YDForm.php' );
 	YDInclude( 'YDAjax.php' );
 
 	// Class definition
@@ -15,43 +14,36 @@
 		function functions() {
 
 			$this->YDRequest();
-			$this->tpl = new YDTemplate();
 		}
 
 
 		// Default action
 		function actionDefault() {
 
-			// create a form with a span and a button
-			$form = new YDForm('myform');
-			$form->addElement('span',   'myspanresult', '&nbsp;', array('style' => 'BACKGROUND-COLOR:#ccccff') );
+			// create template object
+			$tpl = new YDTemplate();
 
-			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl );
-			$this->ajax->addForm( $form );
+			// create ajax object with waiting message
+			$this->ajax = new YDAjax( $tpl );
+			$this->ajax->useWaitingMessage();
 
-			// register custom function
-			$this->ajax->addEvent( 'customFunction()', array( & $this, 'getversion' ) );
+			// add custom event
+			$this->ajax->addEvent( 'customFunction(x)', array( & $this, 'getResult' ), 'var x' );
 
 			// process ajax events
 			$this->ajax->processEvents();
 
-
-			// assign form and display template
-			$this->tpl->assign( 'title', 'This is a simple ajax example');
-			$this->tpl->assign( 'form',  $form->tohtml() );
-			$this->tpl->display();
+			// assign title and display template
+			$tpl->assign( 'title', 'This example demonstrates YDAjax without YDForm');
+			$tpl->display();
 		}
 
 
-		// getversion invoked by ajax client
-		function getversion(){
+		// getResult invoked by ajax client
+		function getResult( $var ){
  
-			// assign result to 'myspanresult'
-			$this->ajax->addResult('myspanresult', YD_FW_NAMEVERS);
-
-			// return response to client browser
-			return $this->ajax->processResults();
+			// message to client browser
+			return YDAjax::message( 'Argument submitted : ' . $var );
 		}
 
 	}

Added: YDFramework2.0/trunk/examples/ajax/functions.tpl
===================================================================
--- YDFramework2.0/trunk/examples/ajax/functions.tpl	2006-03-05 02:02:00 UTC (rev 1766)
+++ YDFramework2.0/trunk/examples/ajax/functions.tpl	2006-03-05 17:12:40 UTC (rev 1767)
@@ -0,0 +1,12 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN">
+<html>
+<head><title></title>
+</head>
+<body>
+<p>{$title}</p>
+<p>Custom buttons : 
+  <input name="b1" type="button" id="b1" onclick="customFunction(1);" value="customFunction(1)" />
+  <input name="b2" type="button" id="b2" onclick="customFunction('Hello World');" value="customFunction('Hello World')" />
+</p>
+</body>
+</html>

Modified: YDFramework2.0/trunk/examples/index.tpl
===================================================================
--- YDFramework2.0/trunk/examples/index.tpl	2006-03-05 02:02:00 UTC (rev 1766)
+++ YDFramework2.0/trunk/examples/index.tpl	2006-03-05 17:12:40 UTC (rev 1767)
@@ -614,7 +614,7 @@
           <td><b>&nbsp;</b></td>
         </tr>
         <tr>
-          <td valign="top" rowspan="16">&nbsp;</td>
+          <td valign="top" rowspan="17">&nbsp;</td>
           <td valign="top"><a href="ajax/version.php">Simple ajax example</a><br/>
           </td>
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/version.php">ajax/version.php</a> </td>
@@ -686,6 +686,10 @@
           <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/autocompleter.php">ajax/autocompleter.php</a> </td>
         </tr>
         <tr>
+          <td valign="top"><a href="ajax/functions.php">Without a YDForm </a></td>
+          <td valign="top"><a href="{$YD_SELF_SCRIPT}?do=source&id=ajax/functions.php">ajax/functions.php</a> </td>
+        </tr>
+        <tr>
             <td colspan="2"><b>&nbsp;<br/>YDXml</b></td>
             <td width="43%"><b>&nbsp;</b></td>
         </tr>



From ximian at berlios.de  Sun Mar  5 03:03:40 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 5 Mar 2006 03:03:40 +0100
Subject: [ydf-devel] r1766 - in YDFramework2.0/trunk: YDFramework2/YDClasses/YDFormElements YDFramework2/addons/YDAjax examples/ajax
Message-ID: <200603050203.k2523eUS004272@sheep.berlios.de>

Author: ximian
Date: 2006-03-05 03:02:00 +0100 (Sun, 05 Mar 2006)
New Revision: 1766

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/xajax.inc.php
   YDFramework2.0/trunk/examples/ajax/autocompleter.php
   YDFramework2.0/trunk/examples/ajax/calculator.php
   YDFramework2.0/trunk/examples/ajax/calculator_dynamic.php
   YDFramework2.0/trunk/examples/ajax/cars.php
   YDFramework2.0/trunk/examples/ajax/confirmation.php
   YDFramework2.0/trunk/examples/ajax/date_calculator.php
   YDFramework2.0/trunk/examples/ajax/form.php
   YDFramework2.0/trunk/examples/ajax/functions.php
   YDFramework2.0/trunk/examples/ajax/image.php
   YDFramework2.0/trunk/examples/ajax/image2.php
   YDFramework2.0/trunk/examples/ajax/list_dynamic.php
   YDFramework2.0/trunk/examples/ajax/list_options.php
   YDFramework2.0/trunk/examples/ajax/persistent_store.php
   YDFramework2.0/trunk/examples/ajax/select_option.php
   YDFramework2.0/trunk/examples/ajax/two_buttons.php
   YDFramework2.0/trunk/examples/ajax/version.php
   YDFramework2.0/trunk/examples/ajax/waiting.php
Log:
new YDAjax version 2.4
- support up to 10 forms
- the form object is not required anymore
- big optimizations (no more cycling form autocompleters search)
- examples updated

Now, YDAjax only accepts the template object as argument in constructor.
All forms must be added with method YDAjax::addForm( $formObject )

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -50,7 +50,9 @@
 
             // Set the type
             $this->_type = 'autocompleter';
-
+			
+			// add this autocompleter to the list of autocompleters
+			$GLOBALS['YD_AJAX_AUTOCOMPLETERS'][] = $name; 
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -63,18 +63,27 @@
          *	This is the class constructor for the YDAjax class.
          *
          *	@param $template		Template object.
-         *	@param $form			Form object.
          */
-        function YDAjax( & $template, & $form ){
+        function YDAjax( & $template ){
 
+            // Setup the module
+            $this->_author = 'Francisco Azevedo';
+            $this->_version = '2.4';
+            $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
+            $this->_description = 'This class makes ajax easy for YDF developers';
+
 			// prefix string used in js function names
 			$this->prefix = YDConfig::get( 'YD_AJAX_PREFIX' );
 
 			// initialize xajax object
 			$this->xajax( "", $this->prefix, YDConfig::get( 'YD_AJAX_ENCODING' ) );
 			
-			// initilize form
-			$this->form = & $form;
+			// initilize all possible forms (10)
+			$this->form_0 = null; $this->form_1 = null;
+			$this->form_2 = null; $this->form_3 = null;
+			$this->form_4 = null; $this->form_5 = null;
+			$this->form_6 = null; $this->form_7 = null;
+			$this->form_8 = null; $this->form_9 = null;
 
 			// initilize template
 			$this->template = & $template;
@@ -142,7 +151,7 @@
 					$onload  .= "\t" . implode( "\n\t", $this->autocompleterCodeFunctions ) . "\n";
 
 			// if there are on load js just export it
-			if ( $onload != '' ) $html .= "window.onload = function() {" . $onload . "}\n";
+			if ( $onload != '' ) $html .= "window.onload = function() {\n" . $onload . "}\n";
 
 			// send js function to hide waiting message
 			$html .= $this->waitingMessageCodeFunction;
@@ -279,7 +288,61 @@
 		}
 
 
+		// internal method to get a form of an element
+		function __getForm( $name ){
+
+			if ( !is_null( $this->form_0 ) && $this->form_0->isElement( $name ) ) return $this->form_0;
+			if ( !is_null( $this->form_1 ) && $this->form_1->isElement( $name ) ) return $this->form_1;
+			if ( !is_null( $this->form_2 ) && $this->form_2->isElement( $name ) ) return $this->form_2;
+			if ( !is_null( $this->form_3 ) && $this->form_3->isElement( $name ) ) return $this->form_3;
+			if ( !is_null( $this->form_4 ) && $this->form_4->isElement( $name ) ) return $this->form_4;
+			if ( !is_null( $this->form_5 ) && $this->form_5->isElement( $name ) ) return $this->form_5;
+			if ( !is_null( $this->form_6 ) && $this->form_6->isElement( $name ) ) return $this->form_6;
+			if ( !is_null( $this->form_7 ) && $this->form_7->isElement( $name ) ) return $this->form_7;
+			if ( !is_null( $this->form_8 ) && $this->form_8->isElement( $name ) ) return $this->form_8;
+			if ( !is_null( $this->form_9 ) && $this->form_9->isElement( $name ) ) return $this->form_9;
+
+			return null;
+		}
+
+		// internal method to check if a form exist
+		function __isForm( $formName ){
+		
+			if ( !is_null( $this->form_0 ) && $this->form_0->getName() == $formName ) return true;
+			if ( !is_null( $this->form_1 ) && $this->form_1->getName() == $formName ) return true;
+			if ( !is_null( $this->form_2 ) && $this->form_2->getName() == $formName ) return true;
+			if ( !is_null( $this->form_3 ) && $this->form_3->getName() == $formName ) return true;
+			if ( !is_null( $this->form_4 ) && $this->form_4->getName() == $formName ) return true;
+			if ( !is_null( $this->form_5 ) && $this->form_5->getName() == $formName ) return true;
+			if ( !is_null( $this->form_6 ) && $this->form_6->getName() == $formName ) return true;
+			if ( !is_null( $this->form_7 ) && $this->form_7->getName() == $formName ) return true;
+			if ( !is_null( $this->form_8 ) && $this->form_8->getName() == $formName ) return true;
+			if ( !is_null( $this->form_9 ) && $this->form_9->getName() == $formName ) return true;
+			
+			return false;
+		}
+		
         /**
+         *	This method adds a form
+         *
+         *	@param $form		YDForm object
+         */		
+		function addForm( & $form ){
+		
+			if ( is_null( $this->form_0 ) ){ $this->form_0 = & $form; return; }
+			if ( is_null( $this->form_1 ) ){ $this->form_1 = & $form; return; }
+			if ( is_null( $this->form_2 ) ){ $this->form_2 = & $form; return; }
+			if ( is_null( $this->form_3 ) ){ $this->form_3 = & $form; return; }
+			if ( is_null( $this->form_4 ) ){ $this->form_4 = & $form; return; }
+			if ( is_null( $this->form_5 ) ){ $this->form_5 = & $form; return; }
+			if ( is_null( $this->form_6 ) ){ $this->form_6 = & $form; return; }
+			if ( is_null( $this->form_7 ) ){ $this->form_7 = & $form; return; }
+			if ( is_null( $this->form_8 ) ){ $this->form_8 = & $form; return; }
+			if ( is_null( $this->form_9 ) ){ $this->form_9 = & $form; return; }	
+		}
+
+
+        /**
          *	This method assigns the current autocompleter with a result array
          *
          *	@param $result		Autocompleter results array
@@ -320,12 +383,14 @@
 			// serverFunction must be an array with a class and the method (get function name)
 			$functionName = $this->computeFunction( $formElementName, $serverFunction, $arguments, $options, $effects );
 
-			// if form is not defined or element is not a form element we must return
-			if( is_null( $this->form ) || !$this->form->isElement( $formElementName ) ) return;
+			// if element don't have a form we must return
+			$form = $this->__getForm( $formElementName );
 
-			// get element object
-			$formElement = & $this->form->getElement( $formElementName );
-			
+			if( is_null( $form ) ) return;
+
+			// get form element
+			$formElement = & $form->getElement( $formElementName );
+
 			// if event is null we must check the form element type to compute the default event
 			if( is_null( $event ) ) $event = $this->_getDefaultEvent( $formElement->getType() );
 
@@ -367,17 +432,28 @@
 				// if is one effect, we should create an array of effects
 				if ( !is_array( $effects ) ) $effects = array( $effects );
 
-				// cycle effects (from last to first) and create js				
+				// cycle effects and create js
 				foreach( $effects as $effect ){
-
-					// element id
-					$id = $this->form->getName() . '_' . $effect->getId();
 				
 					if ( !in_array( $effect->getVariable(), $this->effects ) ){
+
+						// get form of the element
+						$form = $this->__getForm( $effect->getId() );
+
+						// check if element is a form element
+						if ( !is_null ( $form ) ){
+
+							// compute element id
+							$element = & $form->getElement( $effect->getId() );
 					
-						// check if element is a form element
-						if ( $this->form->isElement( $effect->getId() ) )	$this->effects[ $effect->getVariable() ] = $effect->getJSHead( $id );
-						else												$this->effects[ $effect->getVariable() ] = $effect->getJSHead();
+							// get id
+							$id = $element->getAttribute( 'id' );
+						
+							$this->effects[ $effect->getVariable() ] = $effect->getJSHead( $id );
+						
+						}
+						else
+							$this->effects[ $effect->getVariable() ] = $effect->getJSHead();
 				
 					}
 
@@ -406,11 +482,14 @@
 			// initialize js to send
 			$js = '';
 
+			// get form of the element where effect is applyied
+			$form = $this->__getForm( $effect->getId() );
+
 			// test if effect id is a form element
-			if ( $this->form->isElement( $effect->getId() ) ){
+			if ( !is_null( $form ) ){
 				
 				// get element
-				$elem = & $this->form->getElement( $effect->getId() );		
+				$elem = & $form->getElement( $effect->getId() );		
 
 				// element id
 				$id = $elem->getAttribute( 'id' );
@@ -435,8 +514,8 @@
 			// if there are not arguments return empty string
 			if ( is_null( $arguments ) ) return "";
 
-			// if is one argument and it's the form name, we want the form values
-			if ( is_string( $arguments ) && !is_null( $this->form ) && $this->form->getName() == $arguments) return "xajax.getFormValues('" . $arguments . "')";
+			// if is one argument and it's a form name, we want the form values
+			if ( is_string( $arguments ) && $this->__isForm( $arguments ) ) return "xajax.getFormValues('" . $arguments . "')";
 
 			// if there's only one argument or option, create arrays
 			if ( !is_array( $arguments ) ) $arguments = array( $arguments );
@@ -451,11 +530,14 @@
 				// if argument is numeric just add it and continue
 				if ( is_numeric( $arg ) ) { $args[] = $arg; continue; }
 					
-				// if there's a form defined, test if this argument belongs to it
-				if ( !is_null( $this->form ) && $this->form->isElement( $arg ) ){
+				// get the form of this argument
+				$form = $this->__getForm( $arg );
+
+				// if there's a form defined it's because the argument is a form element
+				if ( !is_null( $form ) ){
 						
 					// get element object
-					$elem = & $this->form->getElement( $arg );
+					$elem = & $form->getElement( $arg );
 
 					// get element type to invoke the custom js to get the value
 					switch( $elem->getType() ){
@@ -515,8 +597,14 @@
 				return;				
 			}
 
+			// get form of this element
+			$form = $this->__getForm( $formElementName );
+
+			// if form is null, it's because formElementName doesn't exist
+			if ( is_null( $form ) ) die( '"' . $formElementName . '" is not a element of any defined form.' ); 
+
 			// get element
-			$elem = & $this->form->getElement( $formElementName );
+			$elem = & $form->getElement( $formElementName );
 
 			// check default event
 			if ( is_null( $event ) ) $event = $this->_getDefaultEvent( $elem->getType() );
@@ -606,8 +694,11 @@
 				return;				
 			}
 
+			// get form of this element
+			$form = $this->__getForm( $formElementName );
+			
 			// get element object
-			$elem = & $this->form->getElement( $formElementName );
+			$elem = & $form->getElement( $formElementName );
 			
 			// if we don't define a event we must check default one
 			if ( is_null( $event ) ) $event = $this->_getDefaultEvent( $elem->getType() );
@@ -627,49 +718,60 @@
          */	
 		function processEvents(){
 
-			// find autocompleters
-			if ( !is_null( $this->form ) )
-				foreach( $this->form->_elements as $formElement ){
+			// check autocompleters
+			$this->__computeAutocompletersCode();
 			
-					if ( $formElement->getType() != 'autocompleter' ) continue;
-				
-					if ( empty( $this->autocompleterCodeFunctions ) ){
+			// add js code
+			$this->__assignTemplateCode();
 
-						// load js code
-						$this->autocompleterCode = "\n" . file_get_contents( dirname( __FILE__ ) . '/js/autocompleter.js' );
+			// process all requests and exit
+			return $this->processRequests();
+		}
 
-						// add css to template
-						$this->template->addCss( file_get_contents( dirname( __FILE__ ) . '/js/autocompleter.css' ) );
-					}
-		
-					// compute variable name for this autocompleter
-					$variable = $this->prefix . "at" . $formElement->getName();
 
-					// compute html text id
-					$textID = $formElement->getAttribute( 'id' );
+		// internal method to add all autocompleter code
+		function __computeAutocompletersCode(){
+
+			// check global flag that defines if there are autocompleters in all forms
+			if ( !isset( $GLOBALS['YD_AJAX_AUTOCOMPLETERS'] ) ) return;
+
+			// load js code
+			$this->autocompleterCode = file_get_contents( dirname( __FILE__ ) . '/js/autocompleter.js' ) . "\n";
+
+			// add css to template
+			$this->template->addCss( file_get_contents( dirname( __FILE__ ) . '/js/autocompleter.css' ) );
+
+			// find autocompleters
+			foreach( $GLOBALS['YD_AJAX_AUTOCOMPLETERS'] as $formElementName ){
 			
-					// compute div id
-					$divID = $textID . '_div';
+				// get form of this element
+				$form = $this->__getForm( $formElementName );
 
-					// get function call
-					$serverFunctionName = $formElement->getAjaxCall();
+				// get element
+				$formElement = & $form->getElement( $formElementName );
 
-					// get ajax arguments
-					$arguments = $formElement->getAjaxArguments();
+				// compute variable name for this autocompleter
+				$variable = $this->prefix . "at" . $formElement->getName();
 
-					// get ajax effects
-					$effects = $formElement->getAjaxEffects();
+				// compute html text id
+				$textID = $formElement->getAttribute( 'id' );
+			
+				// compute div id
+				$divID = $textID . '_div';
 
-					// add js code for autocompleter
-					$this->autocompleterCodeFunctions[] = $variable . " = new AutoSuggest('" . $textID . "','" . $divID . "', null);";
-					$this->autocompleterCodeFunctions[] = $variable . ".ajax = function(){currentAjaxAutocompleter=this;" . $this->computeFunction( $textID, $serverFunctionName, $arguments, $effects ) . "}";
-				}
+				// get function call
+				$serverFunctionName = $formElement->getAjaxCall();
 
-			// add js code
-			$this->__assignTemplateCode();
+				// get ajax arguments
+				$arguments = $formElement->getAjaxArguments();
 
-			// process all requests and exit
-			return $this->processRequests();
+				// get ajax effects
+				$effects = $formElement->getAjaxEffects();
+
+				// add js code for autocompleter
+				$this->autocompleterCodeFunctions[] = $variable . " = new AutoSuggest('" . $textID . "','" . $divID . "', null);";
+				$this->autocompleterCodeFunctions[] = $variable . ".ajax = function(){currentAjaxAutocompleter=this;" . $this->computeFunction( $textID, $serverFunctionName, $arguments, $effects ) . "}";
+			}
 		}
 
 
@@ -684,11 +786,13 @@
 		function addResult( $formElementName, $result, $attribute = null, $options = array() ){
 		
 			// if is not a form element, assign result to a html id
-			if ( !$this->form->isElement( $formElementName ) )
+			$form = $this->__getForm( $formElementName );
+
+			if ( is_null( $form ) )
 				return $this->response->assignId( $formElementName, $result, $attribute, $options );
 
 			// if is a form element, get element
-			$elem = & $this->form->getElement( $formElementName );
+			$elem = & $form->getElement( $formElementName );
 
 			// assign result to element
 			return $this->response->assignResult( $elem, $result, $attribute, $options);

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/xajax.inc.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/xajax.inc.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/xajax.inc.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -1,857 +1,861 @@
-<?php
-///////////////////////////////////////////////////////////////////////////////
-// xajax.inc.php :: Main xajax class and setup file
-//
-// xajax version 0.2
-// copyright (c) 2005 by Jared White & J. Max Wilson
-// http://xajax.sourceforge.net
-//
-// xajax is an open source PHP class library for easily creating powerful
-// PHP-driven, web-based AJAX Applications. Using xajax, you can asynchronously
-// call PHP functions and update the content of your your webpage without
-// reloading the page.
-//
-// xajax is released under the terms of the LGPL license
-// http://www.gnu.org/copyleft/lesser.html#SEC3
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Lesser General Public
-// License as published by the Free Software Foundation; either
-// version 2.1 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Lesser General Public License for more details.
-// 
-// You should have received a copy of the GNU Lesser General Public
-// License along with this library; if not, write to the Free Software
-// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-///////////////////////////////////////////////////////////////////////////////
-
-// Define XAJAX_DEFAULT_CHAR_ENCODING that is used by both
-// the xajax and xajaxResponse classes
-if (!defined ('XAJAX_DEFAULT_CHAR_ENCODING'))
-{
-	define ('XAJAX_DEFAULT_CHAR_ENCODING', 'utf-8' );
-}
-
-require_once("xajaxResponse.inc.php");
-
-// Communication Method Defines
-if (!defined ('XAJAX_GET'))
-{
-	define ('XAJAX_GET', 0);
-}
-if (!defined ('XAJAX_POST'))
-{
-	define ('XAJAX_POST', 1);
-}
-
-// the xajax class generates the xajax javascript for your page including the 
-// javascript wrappers for the PHP functions that you want to call from your page.
-// It also handles processing and executing the command messages in the xml responses
-// sent back to your page from your PHP functions.
-class xajax
-{
-	var $aFunctions;				// Array of PHP functions that will be callable through javascript wrappers
-	var $aObjects;				// Array of object callbacks that will allow Javascript to call PHP methods (key=function name)
-	var $aFunctionRequestTypes;	// Array of RequestTypes to be used with each function (key=function name)
-	var $aFunctionIncludeFiles;	// Array of Include Files for any external functions (key=function name)
-	var $sCatchAllFunction;		// Name of the PHP function to call if no callable function was found
-	var $sPreFunction;			// Name of the PHP function to call before any other function
-	var $sRequestURI;			// The URI for making requests to the xajax object
-	var $bDebug;					// Show debug messages (true/false)
-	var $bExitAllowed;			// Allow xajax to exit after processing a request (true/false)
-	var $bErrorHandler;			// Use an special xajax error handler so the errors are sent to the browser properly
-	var $sLogFile;				// Specify if xajax should log errors (and more information in a future release)
-	var $sWrapperPrefix;			// The prefix to prepend to the javascript wraper function name
-	var $bStatusMessages;			// Show debug messages (true/false)
-	var $bWaitCursor;			// Use wait cursor in browser (true/false)
-	var $bCleanBuffer;			// Clean all output buffers before outputting response (true/false)
-	var $aObjArray;				// Array for parsing complex objects
-	var $iPos;					// Position in $aObjArray
-	var $sEncoding;				// The Character Encoding to use
-	
-	// Contructor
-	// $sRequestURI - defaults to the current page
-	// $sWrapperPrefix - defaults to "xajax_";
-	// $sEncoding - defaults to XAJAX_DEFAULT_CHAR_ENCODING defined above
-	// $bDebug Mode - defaults to false
-	// usage: $xajax = new xajax();
-	function xajax($sRequestURI="",$sWrapperPrefix="xajax_",$sEncoding=XAJAX_DEFAULT_CHAR_ENCODING,$bDebug=false)
-	{
-		$this->aFunctions = array();
-		$this->aObjects = array();
-		$this->aFunctionIncludeFiles = array();
-		$this->sRequestURI = $sRequestURI;
-		if ($this->sRequestURI == "")
-			$this->sRequestURI = $this->_detectURI();
-		$this->sWrapperPrefix = $sWrapperPrefix;
-		$this->setCharEncoding($sEncoding);
-		$this->bDebug = $bDebug;
-		$this->bWaitCursor = true;
-		$this->bExitAllowed = true;
-		$this->bErrorHandler = false;
-		$this->sLogFile = "";
-		$this->bCleanBuffer = true;
-	}
-		
-	// setRequestURI() sets the URI to which requests will be made
-	// usage: $xajax->setRequestURI("http://xajax.sourceforge.net");
-	function setRequestURI($sRequestURI)
-	{
-		$this->sRequestURI = $sRequestURI;
-	}
-	
-	// debugOn() enables debug messages for xajax
-	function debugOn()
-	{
-		$this->bDebug = true;
-	}
-	
-	// debugOff() disables debug messages for xajax (default behavior)
-	function debugOff()
-	{
-		$this->bDebug = false;
-	}
-	
-	// statusMessagesOn() enables messages in the statusbar for xajax
-	function statusMessagesOn()
-	{
-		$this->bStatusMessages = true;
-	}
-	
-	// statusMessagesOff() disables messages in the statusbar for xajax (default behavior)
-	function statusMessagesOff()
-	{
-		$this->bStatusMessages = false;
-	}
-	
-	// waitCursor() enables the wait cursor to be displayed in the browser (default behavior)
-	function waitCursorOn()
-	{
-		$this->bWaitCursor = true;
-	}
-	
-	// waitCursorOff() disables the wait cursor to be displayed in the browser
-	function waitCursorOff()
-	{
-		$this->bWaitCursor = false;
-	}	
-	
-	// exitAllowedOn() enables xajax to exit immediately after processing a request
-	// and sending the response back to the browser (default behavior)
-	function exitAllowedOn()
-	{
-		$this->bExitAllowed = true;
-	}
-	
-	// exitAllowedOff() disables xajax's default behavior of exiting immediately
-	// after processing a request and sending the response back to the browser
-	function exitAllowedOff()
-	{
-		$this->bExitAllowed = false;
-	}
-	
-	// errorHandlerOn() turns on xajax's error handling system so that PHP errors
-	// that occur during a request are trapped and pushed to the browser in the
-	// form of a Javascript alert
-	function errorHandlerOn()
-	{
-		$this->bErrorHandler = true;
-	}
-	// errorHandlerOff() turns off xajax's error handling system (default behavior)
-	function errorHandlerOff()
-	{
-		$this->bErrorHandler = false;
-	}
-	
-	// setLogFile() specifies a log file that will be written to by xajax during
-	// a request (used only by the error handling system at present). If you don't
-	// invoke this method, or you pass in "", then no log file will be written to.
-	// usage: $xajax->setLogFile("/xajax_logs/errors.log");
-	function setLogFile($sFilename)
-	{
-		$this->sLogFile = $sFilename;
-	}
-
-	// cleanBufferOn() causes xajax to clean out all output buffers before outputting
-	// a response (default behavior)
-	function cleanBufferOn()
-	{
-		$this->bCleanBuffer = true;
-	}
-	// cleanBufferOff() turns off xajax's output buffer cleaning
-	function cleanBufferOff()
-	{
-		$this->bCleanBuffer = false;
-	}
-	
-	// setWrapperPrefix() sets the prefix that will be appended to the Javascript
-	// wrapper functions (default is "xajax_").
-	function setWrapperPrefix($sPrefix)
-	{
-		$this->sWrapperPrefix = $sPrefix;
-	}
-	
-	// setCharEncoding() sets the character encoding to be used by xajax
-	// usage: $xajax->setCharEncoding("utf-8");
-	// *Note: to change the default character encoding for all xajax responses, set 
-	// the XAJAX_DEFAULT_CHAR_ENCODING constant near the beginning of the xajax.inc.php file
-	function setCharEncoding($sEncoding)
-	{
-		$this->sEncoding = $sEncoding;
-	}
-	
-	// registerFunction() registers a PHP function or method to be callable through
-	// xajax in your Javascript. If you want to register a function, pass in the name
-	// of that function. If you want to register a static class method, pass in an array
-	// like so:
-	// array("myFunctionName", "myClass", "myMethod")
-	// For an object instance method, use an object variable for the second array element
-	// (and in PHP 4 make sure you put an & before the variable to pass the object by
-	// reference). Note: the function name is what you call via Javascript, so it can be
-	// anything as long as it doesn't conflict with any other registered function name.
-	// 
-	// $mFunction is a string containing the function name or an object callback array
-	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
-	//		for this function.  Defaults to XAJAX_POST.
-	// usage: $xajax->registerFunction("myFunction");
-	//    or: $xajax->registerFunction(array("myFunctionName", &$myObject, "myMethod"));
-	function registerFunction($mFunction,$sRequestType=XAJAX_POST)
-	{
-		if (is_array($mFunction)) {
-			$this->aFunctions[$mFunction[0]] = 1;
-			$this->aFunctionRequestTypes[$mFunction[0]] = $sRequestType;
-			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
-		}	
-		else {
-			$this->aFunctions[$mFunction] = 1;
-			$this->aFunctionRequestTypes[$mFunction] = $sRequestType;
-		}
-	}
-	
-	// registerExternalFunction() registers a PHP function to be callable through xajax
-	// which is located in some other file.  If the function is requested the external
-	// file will be included to define the function before the function is called
-	// $mFunction is a string containing the function name or an object callback array
-	//   see registerFunction() for more info on object callback arrays
-	// $sIncludeFile is a string containing the path and filename of the include file
-	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
-	//		for this function.  Defaults to XAJAX_POST.
-	// usage: $xajax->registerExternalFunction("myFunction","myFunction.inc.php",XAJAX_POST);
-	function registerExternalFunction($mFunction,$sIncludeFile,$sRequestType=XAJAX_POST)
-	{
-		$this->registerFunction($mFunction, $sRequestType);
-		
-		if (is_array($mFunction)) {
-			$this->aFunctionIncludeFiles[$mFunction[0]] = $sIncludeFile;
-		}
-		else {
-			$this->aFunctionIncludeFiles[$mFunction] = $sIncludeFile;
-		}
-	}
-	
-	// registerCatchAllFunction() registers a PHP function to be called when xajax cannot
-	// find the function being called via Javascript. Because this is technically
-	// impossible when using "wrapped" functions, the catch-all feature is only useful
-	// when you're directly using the xajax.call() Javascript method. Use the catch-all
-	// feature when you want more dynamic ability to intercept unknown calls and handle
-	// them in a custom way.
-	// $mFunction is a string containing the function name or an object callback array
-	//   see registerFunction() for more info on object callback arrays
-	// usage: $xajax->registerCatchAllFunction("myCatchAllFunction");
-	function registerCatchAllFunction($mFunction)
-	{
-		if (is_array($mFunction)) {
-			$this->sCatchAllFunction = $mFunction[0];
-			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
-		}
-		else {
-			$this->sCatchAllFunction = $mFunction;
-		}
-	}
-	
-	// registerPreFunction() registers a PHP function to be called before xajax calls
-	// the requested function. xajax will automatically add the request function's response
-	// to the pre-function's response to create a single response. Another feature is
-	// the ability to return not just a response, but an array with the first element
-	// being false (a boolean) and the second being the response. In this case, the
-	// pre-function's response will be returned to the browser without xajax calling
-	// the requested function.
-	// $mFunction is a string containing the function name or an object callback array
-	//   see registerFunction() for more info on object callback arrays
-	// usage $xajax->registerPreFunction("myPreFunction");
-	function registerPreFunction($mFunction)
-	{
-		if (is_array($mFunction)) {
-			$this->sPreFunction = $mFunction[0];
-			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
-		}
-		else {
-			$this->sPreFunction = $mFunction;
-		}
-	}
-	
-	// returns true if xajax can process the request, false if otherwise
-	// you can use this to determine if xajax needs to process the request or not
-	function canProcessRequests()
-	{
-		if ($this->getRequestMode() != -1) return true;
-		return false;
-	}
-	
-	// returns the current request mode, or -1 if there is none
-	function getRequestMode()
-	{
-		if (!empty($_GET["xajax"]))
-			return XAJAX_GET;
-		
-		if (!empty($_POST["xajax"]))
-			return XAJAX_POST;
-			
-		return -1;
-	}
-	
-	// processRequests() is the main communications engine of xajax
-	// The engine handles all incoming xajax requests, calls the apporiate PHP functions
-	// and passes the xml responses back to the javascript response handler
-	// if your RequestURI is the same as your web page then this function should
-	// be called before any headers or html has been sent.
-	// usage: $xajax->processRequests()
-	function processRequests()
-	{	
-		
-		$requestMode = -1;
-		$sFunctionName = "";
-		$bFoundFunction = true;
-		$bFunctionIsCatchAll = false;
-		$sFunctionNameForSpecial = "";
-		$aArgs = array();
-		$sPreResponse = "";
-		$bEndRequest = false;
-		$sResponse = "";
-		
-		$requestMode = $this->getRequestMode();
-		if ($requestMode == -1) return;
-	
-		if ($requestMode == XAJAX_POST)
-		{
-			$sFunctionName = $_POST["xajax"];
-			
-			if (!empty($_POST["xajaxargs"])) 
-				$aArgs = $_POST["xajaxargs"];
-		}
-		else
-		{	
-			header ("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
-			header ("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
-			header ("Cache-Control: no-cache, must-revalidate");
-			header ("Pragma: no-cache");
-			header("Content-type: text/xml");
-			
-			$sFunctionName = $_GET["xajax"];
-			
-			if (!empty($_GET["xajaxargs"])) 
-				$aArgs = $_GET["xajaxargs"];
-		}
-		
-		// Use xajax error handler if necessary
-		if ($this->bErrorHandler) {
-			$GLOBALS['xajaxErrorHandlerText'] = "";
-			set_error_handler("xajaxErrorHandler");
-		}
-		
-		if ($this->sPreFunction) {
-			if (!$this->_isFunctionCallable($this->sPreFunction)) {
-				$bFoundFunction = false;
-				$objResponse = new xajaxResponse();
-				$objResponse->addAlert("Unknown Pre-Function ". $this->sPreFunction);
-				$sResponse = $objResponse->getXML();
-			}
-		}
-		//include any external dependencies associated with this function name
-		if (array_key_exists($sFunctionName,$this->aFunctionIncludeFiles))
-		{
-			ob_start();
-			include_once($this->aFunctionIncludeFiles[$sFunctionName]);
-			ob_end_clean();
-		}
-		
-		if ($bFoundFunction) {
-			$sFunctionNameForSpecial = $sFunctionName;
-			if (!array_key_exists($sFunctionName, $this->aFunctions))
-			{
-				if ($this->sCatchAllFunction) {
-					$sFunctionName = $this->sCatchAllFunction;
-					$bFunctionIsCatchAll = true;
-				}
-				else {
-					$bFoundFunction = false;
-					$objResponse = new xajaxResponse();
-					$objResponse->addAlert("Unknown Function $sFunctionName.");
-					$sResponse = $objResponse->getXML();
-				}
-			}
-			else if ($this->aFunctionRequestTypes[$sFunctionName] != $requestMode)
-			{
-				$bFoundFunction = false;
-				$objResponse = new xajaxResponse();
-				$objResponse->addAlert("Incorrect Request Type.");
-				$sResponse = $objResponse->getXML();
-			}
-		}
-		
-		if ($bFoundFunction)
-		{
-			for ($i = 0; $i < sizeof($aArgs); $i++)
-			{
-				// If magic quotes is on, then we need to strip the slashes from the args
-				if (get_magic_quotes_gpc() == 1 && is_string($aArgs[$i])) {
-				
-					$aArgs[$i] = stripslashes($aArgs[$i]);
-				}
-				if (stristr($aArgs[$i],"<xjxobj>") != false)
-				{
-					$aArgs[$i] = $this->_xmlToArray("xjxobj",$aArgs[$i]);	
-				}
-				else if (stristr($aArgs[$i],"<xjxquery>") != false)
-				{
-					$aArgs[$i] = $this->_xmlToArray("xjxquery",$aArgs[$i]);	
-				}
-			}
-
-			if ($this->sPreFunction) {
-				$mPreResponse = $this->_callFunction($this->sPreFunction, array($sFunctionNameForSpecial, $aArgs));
-				if (is_array($mPreResponse) && $mPreResponse[0] === false) {
-					$bEndRequest = true;
-					$sPreResponse = $mPreResponse[1];
-				}
-				else {
-					$sPreResponse = $mPreResponse;
-				}
-				if (is_a($sPreResponse, "xajaxResponse")) {
-					$sPreResponse = $sPreResponse->getXML();
-				}
-				if ($bEndRequest) $sResponse = $sPreResponse;
-			}
-			
-			if (!$bEndRequest) {
-				if (!$this->_isFunctionCallable($sFunctionName)) {
-					$objResponse = new xajaxResponse();
-					$objResponse->addAlert("The Registered Function $sFunctionName Could Not Be Found.");
-					$sResponse = $objResponse->getXML();
-				}
-				else {
-					if ($bFunctionIsCatchAll) {
-						$aArgs = array($sFunctionNameForSpecial, $aArgs);
-					}
-					$sResponse = $this->_callFunction($sFunctionName, $aArgs);
-				}
-				if (is_a($sResponse, "xajaxResponse")) {
-					$sResponse = $sResponse->getXML();
-				}
-				if (!is_string($sResponse) || strpos($sResponse, "<xjx>") === FALSE) {
-					$objResponse = new xajaxResponse();
-					$objResponse->addAlert("No XML Response Was Returned By Function $sFunctionName.");
-					$sResponse = $objResponse->getXML();
-				}
-				else if ($sPreResponse != "") {
-					$sNewResponse = new xajaxResponse();
-					$sNewResponse->loadXML($sPreResponse);
-					$sNewResponse->loadXML($sResponse);
-					$sResponse = $sNewResponse->getXML();
-				}
-			}
-		}
-		
-		$sContentHeader = "Content-type: text/xml;";
-		if ($this->sEncoding && strlen(trim($this->sEncoding)) > 0)
-			$sContentHeader .= " charset=".$this->sEncoding;
-		header($sContentHeader);
-		if ($this->bErrorHandler && !empty( $GLOBALS['xajaxErrorHandlerText'] )) {
-			$sErrorResponse = new xajaxResponse();
-			$sErrorResponse->addAlert("** PHP Error Messages: **" . $GLOBALS['xajaxErrorHandlerText']);
-			if ($this->sLogFile) {
-				$fH = @fopen($this->sLogFile, "a");
-				if (!$fH) {
-					$sErrorResponse->addAlert("** Logging Error **\n\nxajax was unable to write to the error log file:\n" . $this->sLogFile);
-				}
-				else {
-					fwrite($fH, "** xajax Error Log - " . strftime("%b %e %Y %I:%M:%S %p") . " **" . $GLOBALS['xajaxErrorHandlerText'] . "\n\n\n");
-					fclose($fH);
-				}
-			}
-
-			$sErrorResponse->loadXML($sResponse);
-			$sResponse = $sErrorResponse->getXML();
-			
-		}
-		if ($this->bCleanBuffer) while (@ob_end_clean());
-		print $sResponse;
-		if ($this->bErrorHandler) restore_error_handler();
-		
-		if ($this->bExitAllowed)
-			exit();
-	}
-			
-	// printJavascript() prints the xajax javascript code into your page by printing
-	// the output of the getJavascript() method. It should only be called between the
-	// <head> </head> tags in your HTML page. Remember, if you only want to obtain the
-	// result of this function, use getJavascript() instead.
-	// $sJsURI is the relative address of the folder where xajax has been installed.
-	//   For instance, if your PHP file is "http://www.myserver.com/myfolder/mypage.php"
-	//   and xajax was installed in "http://www.myserver.com/anotherfolder", then
-	//   $sJsURI should be set to "../anotherfolder". Defaults to assuming xajax is in
-	//   the same folder as your PHP file.
-	// $sJsFile is the relative folder/file pair of the xajax Javascript engine located
-	// within the xajax installation folder. Defaults to xajax_js/xajax.js.
-	// usage:
-	//	<head>
-	//		...
-	//		< ?php $xajax->printJavascript(); ? >
-	function printJavascript($sJsURI="", $sJsFile=NULL, $sJsFullFilename=NULL)
-	{
-		print $this->getJavascript($sJsURI, $sJsFile, $sJsFullFilename);
-	}
-	
-	// getJavascript() returns the xajax javascript code that should be added to
-	// your HTML page between the <head> </head> tags. See printJavascript()
-	// for information about the function arguments.
-	// usage:
-	//  < ?php $xajaxJSHead = $xajax->getJavascript(); ? >
-	//	<head>
-	//		...
-	//		< ?php echo $xajaxJSHead; ? >
-	function getJavascript($sJsURI="", $sJsFile=NULL, $sJsFullFilename=NULL)
-	{	
-		if ($sJsFile == NULL) $sJsFile = "xajax_js/xajax.js";
-			
-		if ($sJsURI != "" && substr($sJsURI, -1) != "/") $sJsURI .= "/";
-		
-		$html  = "\t<script type=\"text/javascript\">\n";
-		$html .= "var xajaxRequestUri=\"".$this->sRequestURI."\";\n";
-		$html .= "var xajaxDebug=".($this->bDebug?"true":"false").";\n";
-		$html .= "var xajaxStatusMessages=".($this->bStatusMessages?"true":"false").";\n";
-		$html .= "var xajaxWaitCursor=".($this->bWaitCursor?"true":"false").";\n";
-		$html .= "var xajaxDefinedGet=".XAJAX_GET.";\n";
-		$html .= "var xajaxDefinedPost=".XAJAX_POST.";\n";
-
-		foreach($this->aFunctions as $sFunction => $bExists) {
-			$html .= $this->_wrap($sFunction,$this->aFunctionRequestTypes[$sFunction]);
-		}
-
-		$html .= "</script>\n";
-		
-		// Create a compressed file if necessary
-		if ($sJsFullFilename) {
-			$realJsFile = $sJsFullFilename;
-		}
-		else {
-			$realPath = realpath(dirname(__FILE__));
-			$realJsFile = $realPath . "/". $sJsFile;
-		}
-		$srcFile = str_replace(".js", "_uncompressed.js", $realJsFile);
-		if (!file_exists($srcFile)) {
-			trigger_error("The xajax uncompressed Javascript file could not be found in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);	
-		}
-		
-		if ($this->bDebug) {
-			if (!@copy($srcFile, $realJsFile)) {
-				trigger_error("The xajax uncompressed javascript file could not be copied to the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);
-			}
-		}
-		else if (!file_exists($realJsFile)) {
-			require(dirname($realJsFile) . "/xajaxCompress.php");
-			$javaScript = implode('', file($srcFile));
-			$compressedScript = xajaxCompressJavascript($javaScript);
-			$fH = @fopen($realJsFile, "w");
-			if (!$fH) {
-				trigger_error("The xajax compressed javascript file could not be written in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);
-			}
-			else {
-				fwrite($fH, $compressedScript);
-				fclose($fH);
-			}
-		}
-
-		$html .= "\t<script type=\"text/javascript\" src=\"" . $sJsURI . $sJsFile . "\"></script>\n";		
-		
-		return $html;
-	}
-	
-	// _detectURL() returns the current URL based upon the SERVER vars
-	// used internally
-	function _detectURI() {
-		$aURL = array();
-
-		// Try to get the request URL
-		if (!empty($_SERVER['REQUEST_URI'])) {
-			$aURL = parse_url($_SERVER['REQUEST_URI']);
-		}
-
-		// Fill in the empty values
-		if (empty($aURL['scheme'])) {
-			if (!empty($_SERVER['HTTP_SCHEME'])) {
-				$aURL['scheme'] = $_SERVER['HTTP_SCHEME'];
-			} else {
-				$aURL['scheme'] = (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off') ? 'https' : 'http';
-			}
-		}
-
-		if (empty($aURL['host'])) {
-			if (!empty($_SERVER['HTTP_HOST'])) {
-				if (strpos($_SERVER['HTTP_HOST'], ':') > 0) {
-					list($aURL['host'], $aURL['port']) = explode(':', $_SERVER['HTTP_HOST']);
-				} else {
-					$aURL['host'] = $_SERVER['HTTP_HOST'];
-				}
-			} else if (!empty($_SERVER['SERVER_NAME'])) {
-				$aURL['host'] = $_SERVER['SERVER_NAME'];
-			} else {
-				print "xajax Error: xajax failed to automatically identify your Request URI.";
-				print "Please set the Request URI explicitly when you instantiate the xajax object.";
-				exit();
-			}
-		}
-
-		if (empty($aURL['port']) && !empty($_SERVER['SERVER_PORT'])) {
-			$aURL['port'] = $_SERVER['SERVER_PORT'];
-		}
-
-		if (empty($aURL['path'])) {
-			if (!empty($_SERVER['PATH_INFO'])) {
-				$sPath = parse_url($_SERVER['PATH_INFO']);
-			} else {
-				$sPath = parse_url($_SERVER['PHP_SELF']);
-			}
-			$aURL['path'] = $sPath['path'];
-			unset($sPath);
-		}
-
-		if (!empty($aURL['query'])) {
-			$aURL['query'] = '?'.$aURL['query'];
-		}
-
-		// Build the URL: Start with scheme, user and pass
-		$sURL = $aURL['scheme'].'://';
-		if (!empty($aURL['user'])) {
-			$sURL.= $aURL['user'];
-			if (!empty($aURL['pass'])) {
-				$sURL.= ':'.$aURL['pass'];
-			}
-			$sURL.= '@';
-		}
-
-		// Add the host
-		$sURL.= $aURL['host'];
-
-		// Add the port if needed
-		if (!empty($aURL['port']) && (($aURL['scheme'] == 'http' && $aURL['port'] != 80) || ($aURL['scheme'] == 'https' && $aURL['port'] != 443))) {
-			$sURL.= ':'.$aURL['port'];
-		}
-
-		// Add the path and the query string
-		$sURL.= $aURL['path'].@$aURL['query'];
-
-		// Clean up
-		unset($aURL);
-		return $sURL;
-	}
-	
-	// returns true if the function name is associated with an object callback,
-	// false if not.
-	// user internally
-	function _isObjectCallback($sFunction)
-	{
-		if (array_key_exists($sFunction, $this->aObjects)) return true;
-		return false;
-	}
-	
-	// return true if the function or object callback can be called, false if not
-	// user internally
-	function _isFunctionCallable($sFunction)
-	{
-		if ($this->_isObjectCallback($sFunction)) {
-			if (is_object($this->aObjects[$sFunction][0])) {
-				return method_exists($this->aObjects[$sFunction][0], $this->aObjects[$sFunction][1]);
-			}
-			else {
-				return is_callable($this->aObjects[$sFunction]);
-			}
-		}
-		else {
-			return function_exists($sFunction);
-		}	
-	}
-	
-	// calls the function, class method, or object method with the supplied arguments
-	// user internally
-	function _callFunction($sFunction, $aArgs)
-	{
-		if ($this->_isObjectCallback($sFunction)) {
-			$mReturn = call_user_func_array($this->aObjects[$sFunction], $aArgs);
-		}
-		else {
-			$mReturn = call_user_func_array($sFunction, $aArgs);
-		}
-		return $mReturn;
-	}
-	
-	// generates the javascript wrapper for the specified PHP function
-	// used internally
-	function _wrap($sFunction,$sRequestType=XAJAX_POST)
-	{
-		$js = "function ".$this->sWrapperPrefix."$sFunction(){return xajax.call(\"$sFunction\", arguments, ".$sRequestType.");}\n";		
-		return $js;
-	}
-
-	// _xmlToArray() takes a string containing xajax xjxobj xml or xjxquery xml
-	// and builds an array representation of it to pass as an argument to
-	// the php function being called. Returns an array.
-	// used internally
-	function _xmlToArray($rootTag, $sXml)
-	{
-		$aArray = array();
-		$sXml = str_replace("<$rootTag>","<$rootTag>|~|",$sXml);
-		$sXml = str_replace("</$rootTag>","</$rootTag>|~|",$sXml);
-		$sXml = str_replace("<e>","<e>|~|",$sXml);
-		$sXml = str_replace("</e>","</e>|~|",$sXml);
-		$sXml = str_replace("<k>","<k>|~|",$sXml);
-		$sXml = str_replace("</k>","|~|</k>|~|",$sXml);
-		$sXml = str_replace("<v>","<v>|~|",$sXml);
-		$sXml = str_replace("</v>","|~|</v>|~|",$sXml);
-		$sXml = str_replace("<q>","<q>|~|",$sXml);
-		$sXml = str_replace("</q>","|~|</q>|~|",$sXml);
-		
-		$this->aObjArray = explode("|~|",$sXml);
-		
-		$this->iPos = 0;
-		$aArray = $this->_parseObjXml($rootTag);
-		
-		return $aArray;
-	}
-	
-	// _parseObjXml() is a recursive function that generates an array from the
-	// contents of $this->aObjArray. Returns an array.
-	// used internally
-	function _parseObjXml($rootTag)
-	{
-		$aArray = array();
-		
-		if ($rootTag == "xjxobj")
-		{
-			while(!stristr($this->aObjArray[$this->iPos],"</xjxobj>"))
-			{
-				$this->iPos++;
-				if(stristr($this->aObjArray[$this->iPos],"<e>"))
-				{
-					$key = "";
-					$value = null;
-						
-					$this->iPos++;
-					while(!stristr($this->aObjArray[$this->iPos],"</e>"))
-					{
-						if(stristr($this->aObjArray[$this->iPos],"<k>"))
-						{
-							$this->iPos++;
-							while(!stristr($this->aObjArray[$this->iPos],"</k>"))
-							{
-								$key .= $this->aObjArray[$this->iPos];
-								$this->iPos++;
-							}
-						}
-						if(stristr($this->aObjArray[$this->iPos],"<v>"))
-						{
-							$this->iPos++;
-							while(!stristr($this->aObjArray[$this->iPos],"</v>"))
-							{
-								if(stristr($this->aObjArray[$this->iPos],"<xjxobj>"))
-								{
-									$value = $this->_parseObjXml("xjxobj");
-									$this->iPos++;
-								}
-								else
-								{
-									$value .= $this->aObjArray[$this->iPos];
-								}
-								$this->iPos++;
-							}
-						}
-						$this->iPos++;
-					}
-					
-					$aArray[$key]=$value;
-				}
-			}
-		}
-		
-		if ($rootTag == "xjxquery")
-		{
-			$sQuery = "";
-			$this->iPos++;
-			while(!stristr($this->aObjArray[$this->iPos],"</xjxquery>"))
-			{
-				if (stristr($this->aObjArray[$this->iPos],"<q>") || stristr($this->aObjArray[$this->iPos],"</q>"))
-				{
-					$this->iPos++;
-					continue;
-				}
-				$sQuery	.= $this->aObjArray[$this->iPos];
-				$this->iPos++;
-			}
-			
-			parse_str($sQuery, $aArray);
-			// If magic quotes is on, then we need to strip the slashes from the
-			// array values because of the parse_str pass which adds slashes
-			if (get_magic_quotes_gpc() == 1) {
-				$newArray = array();
-				foreach ($aArray as $sKey => $sValue) {
-					if (is_string($sValue))
-						$newArray[$sKey] = stripslashes($sValue);
-					else
-						$newArray[$sKey] = $sValue;
-				}
-				$aArray = $newArray;
-			}
-		}
-		
-		return $aArray;
-	}
-		
-}// end class xajax 
-
-// xajaxErrorHandler() is registered with PHP's set_error_handler() function if
-// the xajax error handling system is turned on
-// used by the xajax class
-function xajaxErrorHandler($errno, $errstr, $errfile, $errline)
-{
-	$errorReporting = error_reporting();
-	if ($errorReporting == 0) return;
-	
-	if ($errno == E_NOTICE) {
-		$errTypeStr = "NOTICE";
-	}
-	else if ($errno == E_WARNING) {
-		$errTypeStr = "WARNING";
-	}
-	else if ($errno == E_USER_NOTICE) {
-		$errTypeStr = "USER NOTICE";
-	}
-	else if ($errno == E_USER_WARNING) {
-		$errTypeStr = "USER WARNING";
-	}
-	else if ($errno == E_USER_ERROR) {
-		$errTypeStr = "USER FATAL ERROR";
-	}
-	else if ($errno == E_STRICT) {
-		return;
-	}
-	else {
-		$errTypeStr = "UNKNOWN: $errno";
-	}
-	$GLOBALS['xajaxErrorHandlerText'] .= "\n----\n[$errTypeStr] $errstr\nerror in line $errline of file $errfile";
-}
-
+<?php
+///////////////////////////////////////////////////////////////////////////////
+// xajax.inc.php :: Main xajax class and setup file
+//
+// xajax version 0.2
+// copyright (c) 2005 by Jared White & J. Max Wilson
+// http://xajax.sourceforge.net
+//
+// xajax is an open source PHP class library for easily creating powerful
+// PHP-driven, web-based AJAX Applications. Using xajax, you can asynchronously
+// call PHP functions and update the content of your your webpage without
+// reloading the page.
+//
+// xajax is released under the terms of the LGPL license
+// http://www.gnu.org/copyleft/lesser.html#SEC3
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+// 
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+///////////////////////////////////////////////////////////////////////////////
+
+// Define XAJAX_DEFAULT_CHAR_ENCODING that is used by both
+// the xajax and xajaxResponse classes
+if (!defined ('XAJAX_DEFAULT_CHAR_ENCODING'))
+{
+	define ('XAJAX_DEFAULT_CHAR_ENCODING', 'utf-8' );
+}
+
+require_once("xajaxResponse.inc.php");
+
+// Communication Method Defines
+if (!defined ('XAJAX_GET'))
+{
+	define ('XAJAX_GET', 0);
+}
+if (!defined ('XAJAX_POST'))
+{
+	define ('XAJAX_POST', 1);
+}
+
+// the xajax class generates the xajax javascript for your page including the 
+// javascript wrappers for the PHP functions that you want to call from your page.
+// It also handles processing and executing the command messages in the xml responses
+// sent back to your page from your PHP functions.
+class xajax extends YDAddOnModule
+{
+	var $aFunctions;				// Array of PHP functions that will be callable through javascript wrappers
+	var $aObjects;				// Array of object callbacks that will allow Javascript to call PHP methods (key=function name)
+	var $aFunctionRequestTypes;	// Array of RequestTypes to be used with each function (key=function name)
+	var $aFunctionIncludeFiles;	// Array of Include Files for any external functions (key=function name)
+	var $sCatchAllFunction;		// Name of the PHP function to call if no callable function was found
+	var $sPreFunction;			// Name of the PHP function to call before any other function
+	var $sRequestURI;			// The URI for making requests to the xajax object
+	var $bDebug;					// Show debug messages (true/false)
+	var $bExitAllowed;			// Allow xajax to exit after processing a request (true/false)
+	var $bErrorHandler;			// Use an special xajax error handler so the errors are sent to the browser properly
+	var $sLogFile;				// Specify if xajax should log errors (and more information in a future release)
+	var $sWrapperPrefix;			// The prefix to prepend to the javascript wraper function name
+	var $bStatusMessages;			// Show debug messages (true/false)
+	var $bWaitCursor;			// Use wait cursor in browser (true/false)
+	var $bCleanBuffer;			// Clean all output buffers before outputting response (true/false)
+	var $aObjArray;				// Array for parsing complex objects
+	var $iPos;					// Position in $aObjArray
+	var $sEncoding;				// The Character Encoding to use
+	
+	// Contructor
+	// $sRequestURI - defaults to the current page
+	// $sWrapperPrefix - defaults to "xajax_";
+	// $sEncoding - defaults to XAJAX_DEFAULT_CHAR_ENCODING defined above
+	// $bDebug Mode - defaults to false
+	// usage: $xajax = new xajax();
+	function xajax($sRequestURI="",$sWrapperPrefix="xajax_",$sEncoding=XAJAX_DEFAULT_CHAR_ENCODING,$bDebug=false)
+	{
+	        // Initialize the parent class
+            $this->YDAddOnModule();
+
+
+		$this->aFunctions = array();
+		$this->aObjects = array();
+		$this->aFunctionIncludeFiles = array();
+		$this->sRequestURI = $sRequestURI;
+		if ($this->sRequestURI == "")
+			$this->sRequestURI = $this->_detectURI();
+		$this->sWrapperPrefix = $sWrapperPrefix;
+		$this->setCharEncoding($sEncoding);
+		$this->bDebug = $bDebug;
+		$this->bWaitCursor = true;
+		$this->bExitAllowed = true;
+		$this->bErrorHandler = false;
+		$this->sLogFile = "";
+		$this->bCleanBuffer = true;
+	}
+		
+	// setRequestURI() sets the URI to which requests will be made
+	// usage: $xajax->setRequestURI("http://xajax.sourceforge.net");
+	function setRequestURI($sRequestURI)
+	{
+		$this->sRequestURI = $sRequestURI;
+	}
+	
+	// debugOn() enables debug messages for xajax
+	function debugOn()
+	{
+		$this->bDebug = true;
+	}
+	
+	// debugOff() disables debug messages for xajax (default behavior)
+	function debugOff()
+	{
+		$this->bDebug = false;
+	}
+	
+	// statusMessagesOn() enables messages in the statusbar for xajax
+	function statusMessagesOn()
+	{
+		$this->bStatusMessages = true;
+	}
+	
+	// statusMessagesOff() disables messages in the statusbar for xajax (default behavior)
+	function statusMessagesOff()
+	{
+		$this->bStatusMessages = false;
+	}
+	
+	// waitCursor() enables the wait cursor to be displayed in the browser (default behavior)
+	function waitCursorOn()
+	{
+		$this->bWaitCursor = true;
+	}
+	
+	// waitCursorOff() disables the wait cursor to be displayed in the browser
+	function waitCursorOff()
+	{
+		$this->bWaitCursor = false;
+	}	
+	
+	// exitAllowedOn() enables xajax to exit immediately after processing a request
+	// and sending the response back to the browser (default behavior)
+	function exitAllowedOn()
+	{
+		$this->bExitAllowed = true;
+	}
+	
+	// exitAllowedOff() disables xajax's default behavior of exiting immediately
+	// after processing a request and sending the response back to the browser
+	function exitAllowedOff()
+	{
+		$this->bExitAllowed = false;
+	}
+	
+	// errorHandlerOn() turns on xajax's error handling system so that PHP errors
+	// that occur during a request are trapped and pushed to the browser in the
+	// form of a Javascript alert
+	function errorHandlerOn()
+	{
+		$this->bErrorHandler = true;
+	}
+	// errorHandlerOff() turns off xajax's error handling system (default behavior)
+	function errorHandlerOff()
+	{
+		$this->bErrorHandler = false;
+	}
+	
+	// setLogFile() specifies a log file that will be written to by xajax during
+	// a request (used only by the error handling system at present). If you don't
+	// invoke this method, or you pass in "", then no log file will be written to.
+	// usage: $xajax->setLogFile("/xajax_logs/errors.log");
+	function setLogFile($sFilename)
+	{
+		$this->sLogFile = $sFilename;
+	}
+
+	// cleanBufferOn() causes xajax to clean out all output buffers before outputting
+	// a response (default behavior)
+	function cleanBufferOn()
+	{
+		$this->bCleanBuffer = true;
+	}
+	// cleanBufferOff() turns off xajax's output buffer cleaning
+	function cleanBufferOff()
+	{
+		$this->bCleanBuffer = false;
+	}
+	
+	// setWrapperPrefix() sets the prefix that will be appended to the Javascript
+	// wrapper functions (default is "xajax_").
+	function setWrapperPrefix($sPrefix)
+	{
+		$this->sWrapperPrefix = $sPrefix;
+	}
+	
+	// setCharEncoding() sets the character encoding to be used by xajax
+	// usage: $xajax->setCharEncoding("utf-8");
+	// *Note: to change the default character encoding for all xajax responses, set 
+	// the XAJAX_DEFAULT_CHAR_ENCODING constant near the beginning of the xajax.inc.php file
+	function setCharEncoding($sEncoding)
+	{
+		$this->sEncoding = $sEncoding;
+	}
+	
+	// registerFunction() registers a PHP function or method to be callable through
+	// xajax in your Javascript. If you want to register a function, pass in the name
+	// of that function. If you want to register a static class method, pass in an array
+	// like so:
+	// array("myFunctionName", "myClass", "myMethod")
+	// For an object instance method, use an object variable for the second array element
+	// (and in PHP 4 make sure you put an & before the variable to pass the object by
+	// reference). Note: the function name is what you call via Javascript, so it can be
+	// anything as long as it doesn't conflict with any other registered function name.
+	// 
+	// $mFunction is a string containing the function name or an object callback array
+	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
+	//		for this function.  Defaults to XAJAX_POST.
+	// usage: $xajax->registerFunction("myFunction");
+	//    or: $xajax->registerFunction(array("myFunctionName", &$myObject, "myMethod"));
+	function registerFunction($mFunction,$sRequestType=XAJAX_POST)
+	{
+		if (is_array($mFunction)) {
+			$this->aFunctions[$mFunction[0]] = 1;
+			$this->aFunctionRequestTypes[$mFunction[0]] = $sRequestType;
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}	
+		else {
+			$this->aFunctions[$mFunction] = 1;
+			$this->aFunctionRequestTypes[$mFunction] = $sRequestType;
+		}
+	}
+	
+	// registerExternalFunction() registers a PHP function to be callable through xajax
+	// which is located in some other file.  If the function is requested the external
+	// file will be included to define the function before the function is called
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// $sIncludeFile is a string containing the path and filename of the include file
+	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
+	//		for this function.  Defaults to XAJAX_POST.
+	// usage: $xajax->registerExternalFunction("myFunction","myFunction.inc.php",XAJAX_POST);
+	function registerExternalFunction($mFunction,$sIncludeFile,$sRequestType=XAJAX_POST)
+	{
+		$this->registerFunction($mFunction, $sRequestType);
+		
+		if (is_array($mFunction)) {
+			$this->aFunctionIncludeFiles[$mFunction[0]] = $sIncludeFile;
+		}
+		else {
+			$this->aFunctionIncludeFiles[$mFunction] = $sIncludeFile;
+		}
+	}
+	
+	// registerCatchAllFunction() registers a PHP function to be called when xajax cannot
+	// find the function being called via Javascript. Because this is technically
+	// impossible when using "wrapped" functions, the catch-all feature is only useful
+	// when you're directly using the xajax.call() Javascript method. Use the catch-all
+	// feature when you want more dynamic ability to intercept unknown calls and handle
+	// them in a custom way.
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// usage: $xajax->registerCatchAllFunction("myCatchAllFunction");
+	function registerCatchAllFunction($mFunction)
+	{
+		if (is_array($mFunction)) {
+			$this->sCatchAllFunction = $mFunction[0];
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}
+		else {
+			$this->sCatchAllFunction = $mFunction;
+		}
+	}
+	
+	// registerPreFunction() registers a PHP function to be called before xajax calls
+	// the requested function. xajax will automatically add the request function's response
+	// to the pre-function's response to create a single response. Another feature is
+	// the ability to return not just a response, but an array with the first element
+	// being false (a boolean) and the second being the response. In this case, the
+	// pre-function's response will be returned to the browser without xajax calling
+	// the requested function.
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// usage $xajax->registerPreFunction("myPreFunction");
+	function registerPreFunction($mFunction)
+	{
+		if (is_array($mFunction)) {
+			$this->sPreFunction = $mFunction[0];
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}
+		else {
+			$this->sPreFunction = $mFunction;
+		}
+	}
+	
+	// returns true if xajax can process the request, false if otherwise
+	// you can use this to determine if xajax needs to process the request or not
+	function canProcessRequests()
+	{
+		if ($this->getRequestMode() != -1) return true;
+		return false;
+	}
+	
+	// returns the current request mode, or -1 if there is none
+	function getRequestMode()
+	{
+		if (!empty($_GET["xajax"]))
+			return XAJAX_GET;
+		
+		if (!empty($_POST["xajax"]))
+			return XAJAX_POST;
+			
+		return -1;
+	}
+	
+	// processRequests() is the main communications engine of xajax
+	// The engine handles all incoming xajax requests, calls the apporiate PHP functions
+	// and passes the xml responses back to the javascript response handler
+	// if your RequestURI is the same as your web page then this function should
+	// be called before any headers or html has been sent.
+	// usage: $xajax->processRequests()
+	function processRequests()
+	{	
+		
+		$requestMode = -1;
+		$sFunctionName = "";
+		$bFoundFunction = true;
+		$bFunctionIsCatchAll = false;
+		$sFunctionNameForSpecial = "";
+		$aArgs = array();
+		$sPreResponse = "";
+		$bEndRequest = false;
+		$sResponse = "";
+		
+		$requestMode = $this->getRequestMode();
+		if ($requestMode == -1) return;
+	
+		if ($requestMode == XAJAX_POST)
+		{
+			$sFunctionName = $_POST["xajax"];
+			
+			if (!empty($_POST["xajaxargs"])) 
+				$aArgs = $_POST["xajaxargs"];
+		}
+		else
+		{	
+			header ("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
+			header ("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
+			header ("Cache-Control: no-cache, must-revalidate");
+			header ("Pragma: no-cache");
+			header("Content-type: text/xml");
+			
+			$sFunctionName = $_GET["xajax"];
+			
+			if (!empty($_GET["xajaxargs"])) 
+				$aArgs = $_GET["xajaxargs"];
+		}
+		
+		// Use xajax error handler if necessary
+		if ($this->bErrorHandler) {
+			$GLOBALS['xajaxErrorHandlerText'] = "";
+			set_error_handler("xajaxErrorHandler");
+		}
+		
+		if ($this->sPreFunction) {
+			if (!$this->_isFunctionCallable($this->sPreFunction)) {
+				$bFoundFunction = false;
+				$objResponse = new xajaxResponse();
+				$objResponse->addAlert("Unknown Pre-Function ". $this->sPreFunction);
+				$sResponse = $objResponse->getXML();
+			}
+		}
+		//include any external dependencies associated with this function name
+		if (array_key_exists($sFunctionName,$this->aFunctionIncludeFiles))
+		{
+			ob_start();
+			include_once($this->aFunctionIncludeFiles[$sFunctionName]);
+			ob_end_clean();
+		}
+		
+		if ($bFoundFunction) {
+			$sFunctionNameForSpecial = $sFunctionName;
+			if (!array_key_exists($sFunctionName, $this->aFunctions))
+			{
+				if ($this->sCatchAllFunction) {
+					$sFunctionName = $this->sCatchAllFunction;
+					$bFunctionIsCatchAll = true;
+				}
+				else {
+					$bFoundFunction = false;
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("Unknown Function $sFunctionName.");
+					$sResponse = $objResponse->getXML();
+				}
+			}
+			else if ($this->aFunctionRequestTypes[$sFunctionName] != $requestMode)
+			{
+				$bFoundFunction = false;
+				$objResponse = new xajaxResponse();
+				$objResponse->addAlert("Incorrect Request Type.");
+				$sResponse = $objResponse->getXML();
+			}
+		}
+		
+		if ($bFoundFunction)
+		{
+			for ($i = 0; $i < sizeof($aArgs); $i++)
+			{
+				// If magic quotes is on, then we need to strip the slashes from the args
+				if (get_magic_quotes_gpc() == 1 && is_string($aArgs[$i])) {
+				
+					$aArgs[$i] = stripslashes($aArgs[$i]);
+				}
+				if (stristr($aArgs[$i],"<xjxobj>") != false)
+				{
+					$aArgs[$i] = $this->_xmlToArray("xjxobj",$aArgs[$i]);	
+				}
+				else if (stristr($aArgs[$i],"<xjxquery>") != false)
+				{
+					$aArgs[$i] = $this->_xmlToArray("xjxquery",$aArgs[$i]);	
+				}
+			}
+
+			if ($this->sPreFunction) {
+				$mPreResponse = $this->_callFunction($this->sPreFunction, array($sFunctionNameForSpecial, $aArgs));
+				if (is_array($mPreResponse) && $mPreResponse[0] === false) {
+					$bEndRequest = true;
+					$sPreResponse = $mPreResponse[1];
+				}
+				else {
+					$sPreResponse = $mPreResponse;
+				}
+				if (is_a($sPreResponse, "xajaxResponse")) {
+					$sPreResponse = $sPreResponse->getXML();
+				}
+				if ($bEndRequest) $sResponse = $sPreResponse;
+			}
+			
+			if (!$bEndRequest) {
+				if (!$this->_isFunctionCallable($sFunctionName)) {
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("The Registered Function $sFunctionName Could Not Be Found.");
+					$sResponse = $objResponse->getXML();
+				}
+				else {
+					if ($bFunctionIsCatchAll) {
+						$aArgs = array($sFunctionNameForSpecial, $aArgs);
+					}
+					$sResponse = $this->_callFunction($sFunctionName, $aArgs);
+				}
+				if (is_a($sResponse, "xajaxResponse")) {
+					$sResponse = $sResponse->getXML();
+				}
+				if (!is_string($sResponse) || strpos($sResponse, "<xjx>") === FALSE) {
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("No XML Response Was Returned By Function $sFunctionName.");
+					$sResponse = $objResponse->getXML();
+				}
+				else if ($sPreResponse != "") {
+					$sNewResponse = new xajaxResponse();
+					$sNewResponse->loadXML($sPreResponse);
+					$sNewResponse->loadXML($sResponse);
+					$sResponse = $sNewResponse->getXML();
+				}
+			}
+		}
+		
+		$sContentHeader = "Content-type: text/xml;";
+		if ($this->sEncoding && strlen(trim($this->sEncoding)) > 0)
+			$sContentHeader .= " charset=".$this->sEncoding;
+		header($sContentHeader);
+		if ($this->bErrorHandler && !empty( $GLOBALS['xajaxErrorHandlerText'] )) {
+			$sErrorResponse = new xajaxResponse();
+			$sErrorResponse->addAlert("** PHP Error Messages: **" . $GLOBALS['xajaxErrorHandlerText']);
+			if ($this->sLogFile) {
+				$fH = @fopen($this->sLogFile, "a");
+				if (!$fH) {
+					$sErrorResponse->addAlert("** Logging Error **\n\nxajax was unable to write to the error log file:\n" . $this->sLogFile);
+				}
+				else {
+					fwrite($fH, "** xajax Error Log - " . strftime("%b %e %Y %I:%M:%S %p") . " **" . $GLOBALS['xajaxErrorHandlerText'] . "\n\n\n");
+					fclose($fH);
+				}
+			}
+
+			$sErrorResponse->loadXML($sResponse);
+			$sResponse = $sErrorResponse->getXML();
+			
+		}
+		if ($this->bCleanBuffer) while (@ob_end_clean());
+		print $sResponse;
+		if ($this->bErrorHandler) restore_error_handler();
+		
+		if ($this->bExitAllowed)
+			exit();
+	}
+			
+	// printJavascript() prints the xajax javascript code into your page by printing
+	// the output of the getJavascript() method. It should only be called between the
+	// <head> </head> tags in your HTML page. Remember, if you only want to obtain the
+	// result of this function, use getJavascript() instead.
+	// $sJsURI is the relative address of the folder where xajax has been installed.
+	//   For instance, if your PHP file is "http://www.myserver.com/myfolder/mypage.php"
+	//   and xajax was installed in "http://www.myserver.com/anotherfolder", then
+	//   $sJsURI should be set to "../anotherfolder". Defaults to assuming xajax is in
+	//   the same folder as your PHP file.
+	// $sJsFile is the relative folder/file pair of the xajax Javascript engine located
+	// within the xajax installation folder. Defaults to xajax_js/xajax.js.
+	// usage:
+	//	<head>
+	//		...
+	//		< ?php $xajax->printJavascript(); ? >
+	function printJavascript($sJsURI="", $sJsFile=NULL, $sJsFullFilename=NULL)
+	{
+		print $this->getJavascript($sJsURI, $sJsFile, $sJsFullFilename);
+	}
+	
+	// getJavascript() returns the xajax javascript code that should be added to
+	// your HTML page between the <head> </head> tags. See printJavascript()
+	// for information about the function arguments.
+	// usage:
+	//  < ?php $xajaxJSHead = $xajax->getJavascript(); ? >
+	//	<head>
+	//		...
+	//		< ?php echo $xajaxJSHead; ? >
+	function getJavascript($sJsURI="", $sJsFile=NULL, $sJsFullFilename=NULL)
+	{	
+		if ($sJsFile == NULL) $sJsFile = "xajax_js/xajax.js";
+			
+		if ($sJsURI != "" && substr($sJsURI, -1) != "/") $sJsURI .= "/";
+		
+		$html  = "\t<script type=\"text/javascript\">\n";
+		$html .= "var xajaxRequestUri=\"".$this->sRequestURI."\";\n";
+		$html .= "var xajaxDebug=".($this->bDebug?"true":"false").";\n";
+		$html .= "var xajaxStatusMessages=".($this->bStatusMessages?"true":"false").";\n";
+		$html .= "var xajaxWaitCursor=".($this->bWaitCursor?"true":"false").";\n";
+		$html .= "var xajaxDefinedGet=".XAJAX_GET.";\n";
+		$html .= "var xajaxDefinedPost=".XAJAX_POST.";\n";
+
+		foreach($this->aFunctions as $sFunction => $bExists) {
+			$html .= $this->_wrap($sFunction,$this->aFunctionRequestTypes[$sFunction]);
+		}
+
+		$html .= "</script>\n";
+		
+		// Create a compressed file if necessary
+		if ($sJsFullFilename) {
+			$realJsFile = $sJsFullFilename;
+		}
+		else {
+			$realPath = realpath(dirname(__FILE__));
+			$realJsFile = $realPath . "/". $sJsFile;
+		}
+		$srcFile = str_replace(".js", "_uncompressed.js", $realJsFile);
+		if (!file_exists($srcFile)) {
+			trigger_error("The xajax uncompressed Javascript file could not be found in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);	
+		}
+		
+		if ($this->bDebug) {
+			if (!@copy($srcFile, $realJsFile)) {
+				trigger_error("The xajax uncompressed javascript file could not be copied to the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);
+			}
+		}
+		else if (!file_exists($realJsFile)) {
+			require(dirname($realJsFile) . "/xajaxCompress.php");
+			$javaScript = implode('', file($srcFile));
+			$compressedScript = xajaxCompressJavascript($javaScript);
+			$fH = @fopen($realJsFile, "w");
+			if (!$fH) {
+				trigger_error("The xajax compressed javascript file could not be written in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);
+			}
+			else {
+				fwrite($fH, $compressedScript);
+				fclose($fH);
+			}
+		}
+
+		$html .= "\t<script type=\"text/javascript\" src=\"" . $sJsURI . $sJsFile . "\"></script>\n";		
+		
+		return $html;
+	}
+	
+	// _detectURL() returns the current URL based upon the SERVER vars
+	// used internally
+	function _detectURI() {
+		$aURL = array();
+
+		// Try to get the request URL
+		if (!empty($_SERVER['REQUEST_URI'])) {
+			$aURL = parse_url($_SERVER['REQUEST_URI']);
+		}
+
+		// Fill in the empty values
+		if (empty($aURL['scheme'])) {
+			if (!empty($_SERVER['HTTP_SCHEME'])) {
+				$aURL['scheme'] = $_SERVER['HTTP_SCHEME'];
+			} else {
+				$aURL['scheme'] = (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off') ? 'https' : 'http';
+			}
+		}
+
+		if (empty($aURL['host'])) {
+			if (!empty($_SERVER['HTTP_HOST'])) {
+				if (strpos($_SERVER['HTTP_HOST'], ':') > 0) {
+					list($aURL['host'], $aURL['port']) = explode(':', $_SERVER['HTTP_HOST']);
+				} else {
+					$aURL['host'] = $_SERVER['HTTP_HOST'];
+				}
+			} else if (!empty($_SERVER['SERVER_NAME'])) {
+				$aURL['host'] = $_SERVER['SERVER_NAME'];
+			} else {
+				print "xajax Error: xajax failed to automatically identify your Request URI.";
+				print "Please set the Request URI explicitly when you instantiate the xajax object.";
+				exit();
+			}
+		}
+
+		if (empty($aURL['port']) && !empty($_SERVER['SERVER_PORT'])) {
+			$aURL['port'] = $_SERVER['SERVER_PORT'];
+		}
+
+		if (empty($aURL['path'])) {
+			if (!empty($_SERVER['PATH_INFO'])) {
+				$sPath = parse_url($_SERVER['PATH_INFO']);
+			} else {
+				$sPath = parse_url($_SERVER['PHP_SELF']);
+			}
+			$aURL['path'] = $sPath['path'];
+			unset($sPath);
+		}
+
+		if (!empty($aURL['query'])) {
+			$aURL['query'] = '?'.$aURL['query'];
+		}
+
+		// Build the URL: Start with scheme, user and pass
+		$sURL = $aURL['scheme'].'://';
+		if (!empty($aURL['user'])) {
+			$sURL.= $aURL['user'];
+			if (!empty($aURL['pass'])) {
+				$sURL.= ':'.$aURL['pass'];
+			}
+			$sURL.= '@';
+		}
+
+		// Add the host
+		$sURL.= $aURL['host'];
+
+		// Add the port if needed
+		if (!empty($aURL['port']) && (($aURL['scheme'] == 'http' && $aURL['port'] != 80) || ($aURL['scheme'] == 'https' && $aURL['port'] != 443))) {
+			$sURL.= ':'.$aURL['port'];
+		}
+
+		// Add the path and the query string
+		$sURL.= $aURL['path'].@$aURL['query'];
+
+		// Clean up
+		unset($aURL);
+		return $sURL;
+	}
+	
+	// returns true if the function name is associated with an object callback,
+	// false if not.
+	// user internally
+	function _isObjectCallback($sFunction)
+	{
+		if (array_key_exists($sFunction, $this->aObjects)) return true;
+		return false;
+	}
+	
+	// return true if the function or object callback can be called, false if not
+	// user internally
+	function _isFunctionCallable($sFunction)
+	{
+		if ($this->_isObjectCallback($sFunction)) {
+			if (is_object($this->aObjects[$sFunction][0])) {
+				return method_exists($this->aObjects[$sFunction][0], $this->aObjects[$sFunction][1]);
+			}
+			else {
+				return is_callable($this->aObjects[$sFunction]);
+			}
+		}
+		else {
+			return function_exists($sFunction);
+		}	
+	}
+	
+	// calls the function, class method, or object method with the supplied arguments
+	// user internally
+	function _callFunction($sFunction, $aArgs)
+	{
+		if ($this->_isObjectCallback($sFunction)) {
+			$mReturn = call_user_func_array($this->aObjects[$sFunction], $aArgs);
+		}
+		else {
+			$mReturn = call_user_func_array($sFunction, $aArgs);
+		}
+		return $mReturn;
+	}
+	
+	// generates the javascript wrapper for the specified PHP function
+	// used internally
+	function _wrap($sFunction,$sRequestType=XAJAX_POST)
+	{
+		$js = "function ".$this->sWrapperPrefix."$sFunction(){return xajax.call(\"$sFunction\", arguments, ".$sRequestType.");}\n";		
+		return $js;
+	}
+
+	// _xmlToArray() takes a string containing xajax xjxobj xml or xjxquery xml
+	// and builds an array representation of it to pass as an argument to
+	// the php function being called. Returns an array.
+	// used internally
+	function _xmlToArray($rootTag, $sXml)
+	{
+		$aArray = array();
+		$sXml = str_replace("<$rootTag>","<$rootTag>|~|",$sXml);
+		$sXml = str_replace("</$rootTag>","</$rootTag>|~|",$sXml);
+		$sXml = str_replace("<e>","<e>|~|",$sXml);
+		$sXml = str_replace("</e>","</e>|~|",$sXml);
+		$sXml = str_replace("<k>","<k>|~|",$sXml);
+		$sXml = str_replace("</k>","|~|</k>|~|",$sXml);
+		$sXml = str_replace("<v>","<v>|~|",$sXml);
+		$sXml = str_replace("</v>","|~|</v>|~|",$sXml);
+		$sXml = str_replace("<q>","<q>|~|",$sXml);
+		$sXml = str_replace("</q>","|~|</q>|~|",$sXml);
+		
+		$this->aObjArray = explode("|~|",$sXml);
+		
+		$this->iPos = 0;
+		$aArray = $this->_parseObjXml($rootTag);
+		
+		return $aArray;
+	}
+	
+	// _parseObjXml() is a recursive function that generates an array from the
+	// contents of $this->aObjArray. Returns an array.
+	// used internally
+	function _parseObjXml($rootTag)
+	{
+		$aArray = array();
+		
+		if ($rootTag == "xjxobj")
+		{
+			while(!stristr($this->aObjArray[$this->iPos],"</xjxobj>"))
+			{
+				$this->iPos++;
+				if(stristr($this->aObjArray[$this->iPos],"<e>"))
+				{
+					$key = "";
+					$value = null;
+						
+					$this->iPos++;
+					while(!stristr($this->aObjArray[$this->iPos],"</e>"))
+					{
+						if(stristr($this->aObjArray[$this->iPos],"<k>"))
+						{
+							$this->iPos++;
+							while(!stristr($this->aObjArray[$this->iPos],"</k>"))
+							{
+								$key .= $this->aObjArray[$this->iPos];
+								$this->iPos++;
+							}
+						}
+						if(stristr($this->aObjArray[$this->iPos],"<v>"))
+						{
+							$this->iPos++;
+							while(!stristr($this->aObjArray[$this->iPos],"</v>"))
+							{
+								if(stristr($this->aObjArray[$this->iPos],"<xjxobj>"))
+								{
+									$value = $this->_parseObjXml("xjxobj");
+									$this->iPos++;
+								}
+								else
+								{
+									$value .= $this->aObjArray[$this->iPos];
+								}
+								$this->iPos++;
+							}
+						}
+						$this->iPos++;
+					}
+					
+					$aArray[$key]=$value;
+				}
+			}
+		}
+		
+		if ($rootTag == "xjxquery")
+		{
+			$sQuery = "";
+			$this->iPos++;
+			while(!stristr($this->aObjArray[$this->iPos],"</xjxquery>"))
+			{
+				if (stristr($this->aObjArray[$this->iPos],"<q>") || stristr($this->aObjArray[$this->iPos],"</q>"))
+				{
+					$this->iPos++;
+					continue;
+				}
+				$sQuery	.= $this->aObjArray[$this->iPos];
+				$this->iPos++;
+			}
+			
+			parse_str($sQuery, $aArray);
+			// If magic quotes is on, then we need to strip the slashes from the
+			// array values because of the parse_str pass which adds slashes
+			if (get_magic_quotes_gpc() == 1) {
+				$newArray = array();
+				foreach ($aArray as $sKey => $sValue) {
+					if (is_string($sValue))
+						$newArray[$sKey] = stripslashes($sValue);
+					else
+						$newArray[$sKey] = $sValue;
+				}
+				$aArray = $newArray;
+			}
+		}
+		
+		return $aArray;
+	}
+		
+}// end class xajax 
+
+// xajaxErrorHandler() is registered with PHP's set_error_handler() function if
+// the xajax error handling system is turned on
+// used by the xajax class
+function xajaxErrorHandler($errno, $errstr, $errfile, $errline)
+{
+	$errorReporting = error_reporting();
+	if ($errorReporting == 0) return;
+	
+	if ($errno == E_NOTICE) {
+		$errTypeStr = "NOTICE";
+	}
+	else if ($errno == E_WARNING) {
+		$errTypeStr = "WARNING";
+	}
+	else if ($errno == E_USER_NOTICE) {
+		$errTypeStr = "USER NOTICE";
+	}
+	else if ($errno == E_USER_WARNING) {
+		$errTypeStr = "USER WARNING";
+	}
+	else if ($errno == E_USER_ERROR) {
+		$errTypeStr = "USER FATAL ERROR";
+	}
+	else if ($errno == E_STRICT) {
+		return;
+	}
+	else {
+		$errTypeStr = "UNKNOWN: $errno";
+	}
+	$GLOBALS['xajaxErrorHandlerText'] .= "\n----\n[$errTypeStr] $errstr\nerror in line $errline of file $errfile";
+}
+
 ?>
\ No newline at end of file

Modified: YDFramework2.0/trunk/examples/ajax/autocompleter.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/autocompleter.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/autocompleter.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -23,21 +23,26 @@
 		// Default action
 		function actionDefault() {
 
-			// create a form with a 2 autocompleters and a simple text element
-			$form = new YDForm('myform');
-			$form->addElement('autocompleter', 'arg1', 'Country with standard style:', '', array( &$this, 'getCountry' ) );
-			$form->addElement('text',          'arg2', 'Just a simple text box without autocompleter');
-			$form->addElement('autocompleter', 'arg3', 'Country with custom style:', array('style' => 'width:300px; background-color:#CCFFFF;'), array( &$this, 'getCountry' ) );
+			// create 2 forms with a 1 autocompleters each and a simple text element
+			$form1 = new YDForm('myform1');
+			$form1->addElement('autocompleter', 'arg1', 'Country with standard style:', '', array( &$this, 'getCountry' ) );
+			$form1->addElement('text',          'arg2', 'Just a simple text box without autocompleter');
 
+			$form2 = new YDForm('myform2');
+			$form2->addElement('autocompleter', 'arg3', 'Country with custom style:', array('style' => 'width:300px; background-color:#CCFFFF;'), array( &$this, 'getCountry' ) );
+			$form2->addElement('text',          'arg4', 'Just another text box' );
+
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form1 );
+			$this->ajax->addForm( $form2 );
 
 			// process events added
 			$this->ajax->processEvents();
 
 			// assign form and display template
 			$this->tpl->assign( 'title', 'Just start typing a coutry name in the box to see the effect' );
-			$this->tpl->assign( 'form',  $form->tohtml() );
+			$this->tpl->assign( 'form',  $form1->tohtml() . $form2->tohtml() );
 			$this->tpl->display();
 		}
 

Modified: YDFramework2.0/trunk/examples/ajax/calculator.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/calculator.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/calculator.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -31,7 +31,8 @@
 			$form->addElement('span',   'myspanresult', '&nbsp;');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// assign 'mybutton' with 'compute' call with dynamic values from form elements 'arg1' and 'arg2'
 			$this->ajax->addEvent( 'mybutton', array( & $this, 'compute' ), array('arg1', 'arg2') );

Modified: YDFramework2.0/trunk/examples/ajax/calculator_dynamic.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/calculator_dynamic.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/calculator_dynamic.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -32,7 +32,8 @@
 			$form->addElement('button', 'mybutton',     'Calc');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// assign 'mybutton' with 'compute' call with dynamic values from form elements 'arg1', 'arg2' and 'operation'
 			$this->ajax->addEvent( 'mybutton', array( & $this, 'compute' ), array('arg1', 'arg2', 'operation') );

Modified: YDFramework2.0/trunk/examples/ajax/cars.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/cars.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/cars.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -28,7 +28,8 @@
 			$form->addElement( 'select', 'model', '', array() );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 			
 			// register event to element 'car' and send to 'getmodel' method its dynamic value
 			$this->ajax->addEvent( 'car', array( & $this, 'getmodel' ), array( 'car' ) );

Modified: YDFramework2.0/trunk/examples/ajax/confirmation.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/confirmation.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/confirmation.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -29,7 +29,8 @@
 			$form->addElement('button', 'mybutton',     'Get YDFramework version');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// register element mybutton (mybutton will be assigned with 'getversion' call in the client side)
 			$this->ajax->addEvent( 'mybutton', array( & $this, 'getversion' ) );

Modified: YDFramework2.0/trunk/examples/ajax/date_calculator.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/date_calculator.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/date_calculator.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -35,7 +35,8 @@
 			$form->addElement('button',         'mybutton',      '=');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form);
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// register button 'mybutton' with event 'result' and arguments form elements
 			$this->ajax->addEvent( 'mybutton',  array( & $this, 'result' ), array( 'currentdate', 'operation', 'number', 'type' ) );

Modified: YDFramework2.0/trunk/examples/ajax/form.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/form.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/form.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -36,7 +36,8 @@
 			$this->form->addRule( 'myemail', 'email',    'Email is not valid' );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form);
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// assign element 'mybutton' with method 'processform' with 'myform' values as argument
 			$this->ajax->addEvent( 'mybutton', array( & $this, 'processform' ), 'myform' );

Modified: YDFramework2.0/trunk/examples/ajax/functions.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/functions.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/functions.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -27,7 +27,8 @@
 			$form->addElement('span',   'myspanresult', '&nbsp;', array('style' => 'BACKGROUND-COLOR:#ccccff') );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// register custom function
 			$this->ajax->addEvent( 'customFunction()', array( & $this, 'getversion' ) );

Modified: YDFramework2.0/trunk/examples/ajax/image.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/image.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/image.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -34,7 +34,8 @@
 			$this->form->addElement( 'img',     'myimage2', '', array( 'width' => 550, 'height' => 250) );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// create events for each span using call 'generatechart' but with different static arguments
 			$this->ajax->addEvent( 'myspan1', array( & $this, 'generatechart' ), 1 );

Modified: YDFramework2.0/trunk/examples/ajax/image2.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/image2.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/image2.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -37,7 +37,8 @@
 			$this->form->addElement( 'img',     'myimage2', '', array( 'width' => 550, 'height' => 250 ) );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// create effect
 			$ef1 = new YDAjaxEffect( 'myimage2', 'resize',   "modify(50, 100)" );

Modified: YDFramework2.0/trunk/examples/ajax/list_dynamic.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/list_dynamic.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/list_dynamic.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -28,7 +28,8 @@
 			$this->form->addElement( 'span', 'myspan', 'Click here to load contry list' );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// assign element 'mybutton' with method 'getcontries'
 			$this->ajax->addEvent( 'myspan', array( & $this, 'getcontries' ) );

Modified: YDFramework2.0/trunk/examples/ajax/list_options.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/list_options.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/list_options.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -28,7 +28,8 @@
 			$this->form->addElement( 'select', 'items',  '', array(), array( 'Click on the link above' ) );
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// assign element 'mybutton' with method 'getcontries'. 
 			// option 'all' means that the argument 'items' must send all values (to 'addentry') and not only the current selected value

Modified: YDFramework2.0/trunk/examples/ajax/persistent_store.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/persistent_store.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/persistent_store.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -33,7 +33,8 @@
  			$this->form->setDefault( 'variable', 'example' );
 			
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $this->form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $this->form );
 
 			// add write and read events
 			$this->ajax->addEvent( 'write', array( & $this, 'write' ), 'variable' );

Modified: YDFramework2.0/trunk/examples/ajax/select_option.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/select_option.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/select_option.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -23,23 +23,30 @@
 		// Default action
 		function actionDefault() {
 
-			// create form
-			$form = new YDForm('myform');
-			$form->addElement( 'text',   'mytext', 'Write something, eg: "David" (case sensitive)' );
-			$form->addElement( 'select', 'items',  '', array(), array( 'Francisco' => 'Francisco', 'Pieter' => 'Pieter', 'David' => 'David' ) );
+			// create first form form
+			$form1 = new YDForm( 'myform' );
+			$form1->addElement( 'text',   'text1', 'Write something, eg: "David" (case sensitive)' );
+			$form1->addElement( 'select', 'items',  '', array(), array( 'Francisco' => 'Francisco', 'Pieter' => 'Pieter', 'David' => 'David' ) );
 
+			// second form
+			$form2 = new YDForm( 'second' );
+			$form2->addElement( 'text',   'text2', 'Write something, eg: "Pieter" (case sensitive)' );
+
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form1 );
+			$this->ajax->addForm( $form2 );
 
 			// assign event to mytext
-			$this->ajax->addEvent( 'mytext', array( & $this, 'setSelect' ), 'mytext', 'onkeyup' );
+			$this->ajax->addEvent( 'text1', array( & $this, 'setSelect' ), 'text1', 'onkeyup' );
+			$this->ajax->addEvent( 'text2', array( & $this, 'setSelect' ), 'text2', 'onkeyup' );
 
 			// process all events
 			$this->ajax->processEvents();
 
 			// assign title, form and display template
 			$this->tpl->assign( 'title', 'Change selected value on-the-fly example' );
-			$this->tpl->assign( 'form',  $form->render('html') );
+			$this->tpl->assign( 'form',  $form1->toHtml() . $form2->toHtml() );
 			$this->tpl->display( 'general' );
 		}
 

Modified: YDFramework2.0/trunk/examples/ajax/two_buttons.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/two_buttons.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/two_buttons.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -30,7 +30,8 @@
 			$form->addElement('button',	'mybutton2',    'Get time');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// register element mybutton with event result and fixed argument '1' and mybutton2 with event 'result' with argument 2
 			$this->ajax->addEvent( 'mybutton',  array( & $this, 'result' ), 1 );

Modified: YDFramework2.0/trunk/examples/ajax/version.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/version.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/version.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -28,7 +28,8 @@
 			$form->addElement('button', 'mybutton',     'Get YDFramework version');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// register element mybutton (mybutton will be assigned with 'getversion' call in the client side)
 			$this->ajax->addEvent( 'mybutton', array( & $this, 'getversion' ) );

Modified: YDFramework2.0/trunk/examples/ajax/waiting.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/waiting.php	2006-03-04 05:37:55 UTC (rev 1765)
+++ YDFramework2.0/trunk/examples/ajax/waiting.php	2006-03-05 02:02:00 UTC (rev 1766)
@@ -28,7 +28,8 @@
 			$form->addElement('button', 'mybutton',     'Get version');
 
 			// create ajax object
-			$this->ajax = new YDAjax( $this->tpl, $form );
+			$this->ajax = new YDAjax( $this->tpl );
+			$this->ajax->addForm( $form );
 
 			// create custom effects for waiting message
 			$onStart = new YDAjaxEffect('', 'opacity', 'hide()', 0 );
@@ -48,7 +49,7 @@
 			$this->ajax->processEvents();
 
 			// assign form and display template
-			$this->tpl->assign( 'title', 'This example demonstrates the waiting message with custom parameters');
+			$this->tpl->assign( 'title', 'This example demonstrates the waiting message with custom parameters on a slow server');
 			$this->tpl->assign( 'form',  $form->tohtml() );
 			$this->tpl->display( 'general' );
 		}



From david_db at berlios.de  Mon Mar  6 14:12:05 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Mon, 6 Mar 2006 14:12:05 +0100
Subject: [ydf-devel] r1768 - YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject
Message-ID: <200603061312.k26DC5Ri001816@sheep.berlios.de>

Author: david_db
Date: 2006-03-06 14:11:54 +0100 (Mon, 06 Mar 2006)
New Revision: 1768

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
Log:
If YDDatabaseObject callbacks return anything else than true or null, the action is halted and an array with information about the error is returned.

Feature Request # 1753

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-05 17:12:40 UTC (rev 1767)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-06 13:11:54 UTC (rev 1768)
@@ -998,7 +998,11 @@
         function insert( $auto=true ) {
 
             // before insert callbacks
-            $this->_executeCallbacks( 'insert', true );
+            $res = $this->_executeCallbacks( 'insert', true );
+            
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
 
             $values = $this->getValues( true, true, true );
 
@@ -1032,8 +1036,12 @@
             }
             
             // after insert callbacks
-            $this->_executeCallbacks( 'insert', false, $success );
+            $res = $this->_executeCallbacks( 'insert', false, $success );
             
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
+            
             $this->resetQuery();
 
             return $result;
@@ -1049,8 +1057,12 @@
         function update() {
 
             // before update callbacks
-            $this->_executeCallbacks( 'update', true );
+            $res = $this->_executeCallbacks( 'update', true );
             
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
+            
             $this->_prepareQuery( true, true );
 
             $keys   = $this->_getFieldsByMethod( 'isKey' );
@@ -1090,8 +1102,12 @@
             $success = ( $result == -1 || $result === false ) ? false : true;
             
             // after update callbacks
-            $this->_executeCallbacks( 'update', false, $success );
+            $res = $this->_executeCallbacks( 'update', false, $success );
             
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
+            
             $this->resetQuery();
 
             return $this->_count = (int) $result;
@@ -1106,7 +1122,11 @@
         function delete() {
 
             // before delete callbacks
-            $this->_executeCallbacks( 'delete', true );
+            $res = $this->_executeCallbacks( 'delete', true );
+            
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
 
             $this->_prepareQuery();
             
@@ -1132,7 +1152,11 @@
             $success = ( $result == -1 || $result === false ) ? false : true;
 
             // after delete callbacks
-            $this->_executeCallbacks( 'delete', false, $success );
+            $res = $this->_executeCallbacks( 'delete', false, $success );
+            
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
 
             $this->resetQuery();
 
@@ -1167,7 +1191,11 @@
             $this->_last = $relations;
             
             // before find callbacks
-            $this->_executeCallbacks( 'find', true );
+            $res = $this->_executeCallbacks( 'find', true );
+            
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
 
             $r = $this->_query->getReserved();
             $this->_query->select();
@@ -1359,8 +1387,12 @@
             $success = ( $result == -1 || $result === false ) ? false : true;
             
             // after find callbacks
-            $this->_executeCallbacks( 'find', false, $success );
+            $res = $this->_executeCallbacks( 'find', false, $success );
             
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
+            
             return $result;
 
         }
@@ -1661,15 +1693,23 @@
         function reset() {
             
             // before reset callbacks
-            $this->_executeCallbacks( 'reset', true );
+            $res = $this->_executeCallbacks( 'reset', true );
             
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
+            
             $this->resetObject();
             $this->resetQuery();
             $this->resetResults();
             $this->resetCount();
             
             // after reset callbacks
-            $this->_executeCallbacks( 'reset', false );
+            $res = $this->_executeCallbacks( 'reset', false );
+            
+            if ( $res !== true && $res !== null ) {
+                return $res;
+            }
         }
 
         /**
@@ -1993,10 +2033,23 @@
                     trigger_error(  $this->getClassName() . ' -
                                     The ' . $action . ' callback method "' . $callback . '" is not defined.', YD_ERROR );
                 }
-                call_user_func( array( & $this, $callback ), $action, $before, $success );
+                $res = call_user_func( array( & $this, $callback ), $action, $before, $success );
                 
+                if ( $res !== true && $res !== null ) {
+                    return array( 
+                        'class'    => $this->getClassName(),
+                        'callback' => $callback,
+                        'action'   => $action,
+                        'before'   => $before,
+                        'success'  => $success,
+                        'return'   => $res
+                    );
+                }
+                
             }
             
+            return true;
+            
         }
         
         /**



From david_db at berlios.de  Mon Mar  6 22:00:25 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Mon, 6 Mar 2006 22:00:25 +0100
Subject: [ydf-devel] r1769 - in YDFramework2.0/trunk/YDFramework2/addons: YDDatabaseObject YDDatabaseQuery
Message-ID: <200603062100.k26L0PeN030038@sheep.berlios.de>

Author: david_db
Date: 2006-03-06 22:00:16 +0100 (Mon, 06 Mar 2006)
New Revision: 1769

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
   YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php
Log:
Added to YDDatabaseObject the possibility of updating and inserting values as expressions, like NOW(), not interpreted as strings.

Feature Request # 1944

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-06 13:11:54 UTC (rev 1768)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseObject/YDDatabaseObject.php	2006-03-06 21:00:16 UTC (rev 1769)
@@ -990,12 +990,12 @@
         /**
          *  This function executes an INSERT query based on the values of the object.
          *
-         *  @param $auto  (optional) Defines if the auto increment field (if any)
-         *                should be kept in the query. Default: true.
+         *  @param $values_noquote  (optional) Associative array that defines values that
+         *                          will not be quoted as strings, e.g. NOW().
          *
          *  @returns  The last autoincrement value if any.
          */
-        function insert( $auto=true ) {
+        function insert( $values_noquote=array() ) {
 
             // before insert callbacks
             $res = $this->_executeCallbacks( 'insert', true );
@@ -1006,19 +1006,14 @@
 
             $values = $this->getValues( true, true, true );
 
-            $auto_field = current( $this->_getFieldsByMethod( 'isAutoIncrement' ) );
-            
-            if ( ! $auto && $auto_field ) {
-                unset( $values[ $auto_field->getColumn() ] );
-            }
-
-            if ( ! sizeof( $values ) ) {
+            if ( ! sizeof( $values ) && ! sizeof( $values_noquote ) ) {
                 return;
             }
 
             $this->_query->insert();
             $this->_query->into( $this->getTable() );
             $this->_query->values( $values );
+            $this->_query->values( $values_noquote, true, false );
             $sql = $this->_query->getQuery();
 
             YDDebugUtil::debug( YDStringUtil::removeWhiteSpace( $sql ) );
@@ -1030,6 +1025,8 @@
             $result = $this->_db->executeSql( $sql );
             $success = ( $result == -1 || $result === false ) ? false : true;
             
+            $auto_field = current( $this->_getFieldsByMethod( 'isAutoIncrement' ) );
+            
             if ( is_numeric( $result ) && $auto_field ) {
                 $result = $this->_db->getLastInsertID();
                 $this->set( $auto_field->getName(), $result );
@@ -1052,9 +1049,12 @@
          *  This function executes an UPDATE query based on the values of the object
          *  and any value set by where.
          *
+         *  @param $values_noquote  (optional) Associative array that defines values that
+         *                          will not be quoted as strings, e.g. NOW().
+         *
          *  @returns  The number of rows affected.
          */
-        function update() {
+        function update( $values_noquote=array() ) {
 
             // before update callbacks
             $res = $this->_executeCallbacks( 'update', true );
@@ -1077,7 +1077,7 @@
             }
             
             // return if no values to set
-            if ( ! sizeof( $values ) ) {
+            if ( ! sizeof( $values ) && ! sizeof( $values_noquote ) ) {
                 return;
             }
 
@@ -1090,6 +1090,7 @@
             $this->_query->update();
             $this->_query->table( $this->getTable() );
             $this->_query->set( $values );
+            $this->_query->set( $values_noquote, true, false );
             $sql = $this->_query->getQuery();
 
             YDDebugUtil::debug( YDStringUtil::removeWhiteSpace( $sql ) );

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php	2006-03-06 13:11:54 UTC (rev 1768)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDDatabaseQuery/YDDatabaseQuery.php	2006-03-06 21:00:16 UTC (rev 1769)
@@ -125,6 +125,8 @@
         var $reserved = '`';
         var $quote    = "'";
         var $filter   = true;
+        var $values_noquote = array();
+        var $filter_noquote = true;
         
         /**
          *  The class constructor.
@@ -464,10 +466,16 @@
          *                   as keys and it's values.
          *  @param $filter   (optional) Don't include columns that start with underscore.
          *                   Default: true.
+         *  @param $quote    (optional) If false, don't quote the value as a string. Default: true.
          */
-        function set( $values, $filter=true ) {
-            $this->values = $values;
-            $this->filter = $filter;
+        function set( $values, $filter=true, $quote=true ) {
+            if ( ! $quote ) {
+                $this->values_noquote = $values;
+                $this->filter_noquote = $filter;
+            } else {
+                $this->values = $values;
+                $this->filter = $filter;
+            }
         }
 
         /**
@@ -477,9 +485,10 @@
          *                   as keys and it's values.
          *  @param $filter   (optional) Don't include columns that start with underscore.
          *                   Default: true.
+         *  @param $quote    (optional) If false, don't quote the value as a string. Default: true.
          */
-        function values( $values, $filter=true ) {
-            $this->set( $values, $filter );
+        function values( $values, $filter=true, $quote=true ) {
+            $this->set( $values, $filter, $quote );
         }
         
         /**
@@ -716,20 +725,24 @@
          */
         function getInsert() {
 
-            if ( ! sizeof( $this->values ) ) {
+            if ( ! sizeof( $this->values ) && ! sizeof( $this->values_noquote ) ) {
                 trigger_error( 'No values were added for the INSERT query.', YD_ERROR );
             }
 
-            $columns = array();
             $values = array();
             foreach ( $this->values as $key => $value ) {
                 if ( $this->filter && substr( $key, 0, 1 ) == '_' ) {
                     continue;
                 }
-                $columns[] = $this->reserved( $key );
-                $values[]  = $this->escapeSql( $value );
+                $values[ $this->reserved( $key ) ] = $this->escapeSql( $value );
             }
-            return ' ( ' . implode( ', ', $columns ) . ' ) VALUES ( ' . implode( ', ', $values ) . ' )';
+            foreach ( $this->values_noquote as $key => $value ) {
+                if ( $this->filter_noquote && substr( $key, 0, 1 ) == '_' ) {
+                    continue;
+                }
+                $values[ $this->reserved( $key ) ] = $this->escape( $value );
+            }
+            return ' ( ' . implode( ', ', array_keys( $values ) ) . ' ) VALUES ( ' . implode( ', ', array_values( $values ) ) . ' )';
         }
 
         /**
@@ -739,7 +752,7 @@
          */
         function getUpdate() {
 
-            if ( ! sizeof( $this->values ) ) {
+            if ( ! sizeof( $this->values ) && ! sizeof( $this->values_noquote ) ) {
                 trigger_error( 'No values were added for the UPDATE query.', YD_ERROR );
             }
 
@@ -748,9 +761,15 @@
                 if ( $this->filter && substr( $key, 0, 1 ) == '_' ) {
                     continue;
                 }
-                $update[] = $this->reserved( $key ) . " = " . $this->escapeSql( $value );
+                $update[ $this->reserved( $key ) ] = $this->reserved( $key ) . " = " . $this->escapeSql( $value );
             }
-            return ' SET ' . implode( ', ', $update );
+            foreach ( $this->values_noquote as $key => $value ) {
+                if ( $this->filter_noquote && substr( $key, 0, 1 ) == '_' ) {
+                    continue;
+                }
+                $update[ $this->reserved( $key ) ] = $this->reserved( $key ) . " = " . $this->escape( $value );
+            }
+            return ' SET ' . implode( ', ', array_values( $update ) );
         }
 
         /**



From muitocomplicado at gmail.com  Tue Mar  7 13:38:32 2006
From: muitocomplicado at gmail.com (David Bittencourt)
Date: Tue, 7 Mar 2006 09:38:32 -0300
Subject: [ydf-devel] YDDatabaseObject indirect relations
In-Reply-To: <12260be20602191258i43f55d3dx3d582d2b24bae14f@mail.gmail.com>
References: <43F79DC0.6080900@fusemail.com>
	 <12260be20602181504p35c5af88ga6276069057996a3@mail.gmail.com>
	 <43F7AD97.4050002@fusemail.com>
	 <12260be20602181716r6c8c39ccj4c636ab91e4b0a4@mail.gmail.com>
	 <43F89A2A.4050809@fusemail.com>
	 <12260be20602191258i43f55d3dx3d582d2b24bae14f@mail.gmail.com>
Message-ID: <12260be20603070438k7d53f7d9w20a3be8751ff734e@mail.gmail.com>

I thought a lot about this and the only way of doing it is to change the
class usage a bit.

This will break our current codes.

I'm thinking more about it and will get back to you later.

-db


On 2/19/06, David Bittencourt <muitocomplicado at gmail.com> wrote:
>
> You are right.
>
> This would be really better.
>
> I'm gonna take a look at this.
>
> -db
>
>
> On 2/19/06, Francisco Azevedo < francisco at fusemail.com> wrote:
> >
> > > Maybe my last commit yesterday can help you. You can do this now:
> > >
> > > // phones class
> > >
> > > $rel =& $this->registerRelation( 'people', false, 'people' );
> > > $rel->setLocalKey( 'id_people' );
> > > $rel->setForeignKey( 'id_people' );
> > > $rel->setForeignVar( 'people' );
> > >
> > > $rel =& $this->registerRelation( 'car', false, 'car' );
> > > $rel->setLocalKey( 'people.id_car' ); // note: this is not a field
> > from
> > > phones class but from people relation
> > > $rel->setForeignKey( 'id_car' );
> > > $rel->setForeignVar( 'car' );
> > > $rel->setForeignConditions( 'people.active = car.active' ); // more
> > > conditions with other relations
> >
> > Db, sorry but this is a ugly solution. I have defined all relations and
> > the internal state of all classes. The problem is on find() and
> > findAll(). These methods don't care about loaded classes. Imho, find()
> > should search all arguments and find inside each if they are defined.
> > In this case:
> > $phone->find('people','car');
> > find would:
> > - get relations to 'people' and 'car' inside 'phone' class.
> > // would find 1 relation
> > - get relations to 'car' and 'phone' inside 'people' class.
> > // would find 2 relations
> > - get relations to 'phone' and 'people' inside 'car' class.
> > // would find 1 relation
> >
> > .. and then make the query.
> >
> > This has one more BIG advantage. All the internal states of the classes
> > will be used. If you define inside 'cars':
> > $this->registerProtected( 'active', 1 )
> > The $phone::find() will use it and we don't need to define it _again_.
> >
> > Imagine that, if we have 10 tables that are indirectly related to 'cars'
> > we don't need to create _another_ 10 relations and in _each_ find the
> > internal state of cars.
> >
> >
> > >
> > > $rel =& $this->registerRelation( 'garage', false, 'garage' );
> > > $rel->setLocalKey( 'car.id_garage' );
> > > $rel->setForeignKey( 'id_garage' );
> > > $rel->setForeignVar( 'garage' );
> > >
> > > // making the query
> > >
> > > $phone = YDDatabaseObject::getInstance( 'phones' );
> > >
> > > $phone->load( 'people', 'car', 'garage' );
> > > $phone->people->beautiful = 1;
> > > $phone->car->active = 1;
> > > $phone->garage->where( 'garage.size > 10' );
> > >
> > > $phone->find( 'people', 'car', 'garage' );
> > >
> > > I think this can help you.
> > >
> > > -db
> > >
> > > On 2/18/06, *Francisco Azevedo* < francisco at fusemail.com
> > > <mailto:francisco at fusemail.com>> wrote:
> > >
> > >
> > >      > Another way is treating the people table as a cross table using
> > a
> > >      > many-to-many relation.
> > >      >
> > >      > $rel =& $this->registerRelation( 'people_car', true, 'car',
> > >     'people' );
> > >      > $rel->setLocalKey( 'id_people' );
> > >      > $rel->setCrossLocalKey( 'id_people' );
> > >      > $rel->setCrossForeignKey( 'id_car' );
> > >      > $rel->setForeignKey( 'id_car' );
> > >      > $rel->setCrossVar( 'people' );
> > >      > $rel->setForeignVar( 'car' );
> > >
> > >     Yes, but many-to-many is not an option. It works in this example
> > but i
> > >     have db schemes much more complex with more than 6 tables.
> > >
> > >     If findAll cannot find indirect relations it's not possible to
> > handle
> > >     this. Imagine that, if you define that a class has a column (eg:
> > >     'active') that must be 1 to be selected.. any table that it's not
> > >     directly related with this table will ignore those values and
> > select
> > >     everything.
> > >
> > >     So, with current way, it's not possible to use relations that are
> > >     defined with a class that it's related with current class and many
> > to
> > >     many cannot be used always.
> > >
> > >     Is there any way to make findAll check relations that are loaded?
> > >
> > >      >
> > >      > $phone = YDDatabaseObject::getInstance( 'Phones' );
> > >      >
> > >      > $phone->load( 'people_car' );
> > >      > $phone->people->beautiful = 1;
> > >      > $phone->car->active = 1;
> > >      >
> > >      > $phone->find( 'people_car' );
> > >      >
> > >      > The structure in the object isn't exactly the structure
> > >     described, but
> > >      > does the trick.
> > >      >
> > >      > -db
> > >      >
> > >      >
> > >      > On 2/18/06, *Francisco Azevedo* < francisco at fusemail.com
> > >     <mailto:francisco at fusemail.com>
> > >      > <mailto: francisco at fusemail.com <mailto:francisco at fusemail.com
> > >>>
> > >     wrote:
> > >      >
> > >      >     Hi
> > >      >
> > >      >     Imagine this "strange" example: I have an db scheme that
> > have
> > >     3 tables:
> > >      >     Cars, People, Phones.
> > >      >     Table Cars has:  id_car (int key), description (string),
> > >     active (0 or 1)
> > >      >     Table People has:  id_people (int key), id_car (points to
> > >     table Cars),
> > >      >     name (string), beautiful (0 or 1)
> > >      >     Table Phones has:  id_phone (int key), id_people  (points
> > to
> > >     table
> > >      >     People), description (string)
> > >      >
> > >      >     This means that: we can define phones, each phone belongs
> > to
> > >     just one
> > >      >     person, each person belongs to one car and each car can be
> > >     active or
> > >      >     not.
> > >      >
> > >      >     So we have the next relations:
> > >      >
> > >      >     relation "phone" in class Phones and in class People:
> > >      >     * Table Phones (id_phone) <-----> Table People (id_people)
> > >      >
> > >      >     relation "car" in class People and class Cars:
> > >      >     * Table People (id_people) -----> Table Cars (id_car)
> > >      >
> > >      >     Now, how can we get all Phones that belong to beautiful
> > >     persons that are
> > >      >     in an "active" cars?
> > >      >
> > >      >     I have tryied the next solution, but YDDatabaseObject seems
> >
> > >     ignoring
> > >      >     relations that are indirectly connected to Phones table:
> > >      >
> > >      >     $phone = YDDatabaseObject::getInstance( 'Phones' );
> > >      >
> > >      >     $phone->load('people');
> > >      >     $phone->people->beautiful = 1;
> > >      >     $phone->people->load('car');
> > >      >     $phone->people->car->active = 1;
> > >      >
> > >      >     $phone->findAll();
> > >      >
> > >      >     Is this possible or just a bug?
> > >      >
> > >      >     Francisco Azevedo
> > >      >
> >
> > _______________________________________________
> > YDFramework-devel mailing list
> > YDFramework-devel at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/ydframework-devel
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060307/1bb18fd2/attachment.html>

From pclaerhout at berlios.de  Tue Mar  7 14:12:24 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 7 Mar 2006 14:12:24 +0100
Subject: [ydf-devel] r1770 - YDFramework2.0/trunk/YDFramework2
Message-ID: <200603071312.k27DCOGl031222@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-07 14:12:20 +0100 (Tue, 07 Mar 2006)
New Revision: 1770

Modified:
   YDFramework2.0/trunk/YDFramework2/YDF2_init.php
Log:
Updated the copyright statement for the framework to include the year 2006.

Modified: YDFramework2.0/trunk/YDFramework2/YDF2_init.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2006-03-06 21:00:16 UTC (rev 1769)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_init.php	2006-03-07 13:12:20 UTC (rev 1770)
@@ -57,7 +57,7 @@
     @define( 'YD_FW_VERSION', '2.0 (build ' . YD_FW_REVISION . ')' );
     @define( 'YD_FW_NAMEVERS', YD_FW_NAME . ' ' . YD_FW_VERSION );
     @define( 'YD_FW_HOMEPAGE', 'http://ydframework.berlios.de/' );
-    @define( 'YD_FW_COPYRIGHT', '(c) 2002-2005 Pieter Claerhout, pieter at yellowduck.be' );
+    @define( 'YD_FW_COPYRIGHT', '(c) 2002-2006 Pieter Claerhout, pieter at yellowduck.be' );
 
     // Directory paths
     @define( 'YD_DIR_HOME', dirname( __FILE__ ) );



From pclaerhout at berlios.de  Tue Mar  7 14:13:40 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 7 Mar 2006 14:13:40 +0100
Subject: [ydf-devel] r1771 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200603071313.k27DDeUo031852@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-07 14:13:32 +0100 (Tue, 07 Mar 2006)
New Revision: 1771

Modified:
   YDFramework2.0/trunk/examples/weblog/install.php
Log:
The installer now correctly includes the YDDatabaseMetaData class.

Bug #6647

Modified: YDFramework2.0/trunk/examples/weblog/install.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/install.php	2006-03-07 13:12:20 UTC (rev 1770)
+++ YDFramework2.0/trunk/examples/weblog/install.php	2006-03-07 13:13:32 UTC (rev 1771)
@@ -8,6 +8,7 @@
     YDInclude( 'YDTemplate.php' );
     YDInclude( 'YDRequest.php' );
     YDInclude( 'YDDatabase.php' );
+    YDInclude( 'YDDatabaseMetaData.php' );
     YDInclude( 'YDFileSystem.php' );
     YDInclude( dirname( __FILE__ ) . '/include/YDWeblogAPI.php' );
 



From pclaerhout at berlios.de  Tue Mar  7 14:15:12 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 7 Mar 2006 14:15:12 +0100
Subject: [ydf-devel] r1772 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200603071315.k27DFCJl032268@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-07 14:15:05 +0100 (Tue, 07 Mar 2006)
New Revision: 1772

Modified:
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
The comment emails are now only send if the comment is added to the database.

Bug #6693

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-03-07 13:13:32 UTC (rev 1771)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-03-07 13:15:05 UTC (rev 1772)
@@ -101,7 +101,7 @@
                     $comment_id = $this->weblog->addComment( $values );
 
                     // Send an email if configured
-                    if ( YDConfig::get( 'email_new_comment', true ) ) {
+                    if ( $comment_id && YDConfig::get( 'email_new_comment', true ) ) {
 
                         // Include the YDEmail library
                         YDInclude( 'YDEmail.php' );



From pclaerhout at berlios.de  Tue Mar  7 15:09:07 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 7 Mar 2006 15:09:07 +0100
Subject: [ydf-devel] r1773 - YDFramework2.0/trunk/examples/weblog
Message-ID: <200603071409.k27E97r5025600@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-07 15:09:06 +0100 (Tue, 07 Mar 2006)
New Revision: 1773

Modified:
   YDFramework2.0/trunk/examples/weblog/item.php
Log:
Fixed some more stuff in the comment email stuff.

Modified: YDFramework2.0/trunk/examples/weblog/item.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/item.php	2006-03-07 13:15:05 UTC (rev 1772)
+++ YDFramework2.0/trunk/examples/weblog/item.php	2006-03-07 14:09:06 UTC (rev 1773)
@@ -101,7 +101,7 @@
                     $comment_id = $this->weblog->addComment( $values );
 
                     // Send an email if configured
-                    if ( $comment_id && YDConfig::get( 'email_new_comment', true ) ) {
+                    if ( $comment_id > 0 && YDConfig::get( 'email_new_comment', true ) ) {
 
                         // Include the YDEmail library
                         YDInclude( 'YDEmail.php' );



From ximian at berlios.de  Sun Mar 12 19:28:46 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 12 Mar 2006 19:28:46 +0100
Subject: [ydf-devel] r1774 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603121828.k2CISkgb012056@sheep.berlios.de>

Author: ximian
Date: 2006-03-12 19:28:27 +0100 (Sun, 12 Mar 2006)
New Revision: 1774

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_SwitchMenu.php
Log:
added:
- SwitchMenu predefined constructor arguments
- SwitchMenu::addCss() method to include predefined css in a template

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_SwitchMenu.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_SwitchMenu.php	2006-03-07 14:09:06 UTC (rev 1773)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_SwitchMenu.php	2006-03-12 18:28:27 UTC (rev 1774)
@@ -43,7 +43,7 @@
          *	@param $attributes	(optional) The attributes for the form element.
          *	@param $options		(optional) The menu elements.
          */
-        function YDFormElement_SwitchMenu( $form, $name, $label='', $attributes=array(), $options=array() ) {
+        function YDFormElement_SwitchMenu( $form = 'YDForm', $name = 'SMenu', $label='', $attributes=array(), $options=array() ) {
 
             // Initialize the parent
             $this->YDFormElement( $form, $name, $label, $attributes, $options );
@@ -122,6 +122,19 @@
 
 
         /**
+         *	This function adds custom css to the template
+         *
+         *	@param $template		The template object 
+         */
+		function addCss( & $template ){
+
+			$template->addCss( '.menutitle{ cursor:pointer;margin-bottom: 5px;background-color:#ECECFF;color:#000000;width:140px;padding:2px;text-align:center;font-weight:bold;border:1px solid #000000; }' );
+			$template->addCss( '.submenu{ margin-bottom: 0.5em; }' );
+			
+		}
+
+
+        /**
          *	This function adds a new menu item
          *
          *	@param $menu		The name of the menu



From ximian at berlios.de  Sun Mar 12 19:39:09 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 12 Mar 2006 19:39:09 +0100
Subject: [ydf-devel] r1775 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603121839.k2CId91J017195@sheep.berlios.de>

Author: ximian
Date: 2006-03-12 19:38:48 +0100 (Sun, 12 Mar 2006)
New Revision: 1775

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
added a simple border to the autocompleter box

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-12 18:28:27 UTC (rev 1774)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-12 18:38:48 UTC (rev 1775)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.41';
+            $this->_version = '2.42';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -235,6 +235,7 @@
 			if ( !isset( $options['style.backgroundColor'] ) ) $options['style.backgroundColor'] = '#cccccc';
 			if ( !isset( $options['style.top'] ) )             $options['style.top']             = '40%';
 			if ( !isset( $options['style.left'] ) )            $options['style.left']            = '44%';
+			if ( !isset( $options['style.border'] ) )          $options['style.border']          = '1px solid #110000';
 
 			// static values
 			$options['id']             = $this->wtID ."id";



From francisco at fusemail.com  Sun Mar 12 20:12:37 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Sun, 12 Mar 2006 19:12:37 +0000
Subject: [ydf-devel] 2 new methods for YDFormElements
Message-ID: <441472A5.2070702@fusemail.com>

Hi all

YDAjax is not easy to handle. One feature that can simplify YDAjax (a 
lot!) and other classes that use js is to include specific 
YDFormElements properties inside YDFormsElements.

Currently, YDAjax checks all elements and make the correspondent js to 
get and set js values.

I propose to include these methods inside each form element. This way, 
eg, the text element would have method getJS/setJS like:


function getJS( $options = null ){
		
      return 'return document.getElementById("' . 
$this->getAttribute('id') . '").value;';

}



function setJS( $result, $attribute = null, $options = null ){

      // if atribute is not defined we must create the default one
      if ( is_null( $attribute ) ) $attribute = 'value';
		
      // convert $result
      $result = htmlspecialchars( $result );

      // assign result
      return 'document.getElementById("' . $this->getAttribute( 'id' ) . 
'").' . $attribute . ' = "' . $result . '";';

}


Almost all methods of all elements are done in YDAjax. All we need is 
just a copy/paste from YDAjax to the correspondent YDFormElement.

What do you think?

Francisco A


From ximian at berlios.de  Sun Mar 12 20:45:41 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 12 Mar 2006 20:45:41 +0100
Subject: [ydf-devel] r1776 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603121945.k2CJjfHs014356@sheep.berlios.de>

Author: ximian
Date: 2006-03-12 20:45:22 +0100 (Sun, 12 Mar 2006)
New Revision: 1776

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
- Added 'focus' effect
- YDAjax::addEffect can now be used in the start (and not only as a response)
- Deleted YDAjax::addJavascript. You can use YDTemplate::addJavascript instead
- Huge cleanups (less 50 lines of code)

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-12 18:38:48 UTC (rev 1775)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-12 19:45:22 UTC (rev 1776)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.42';
+            $this->_version = '2.5';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -108,9 +108,12 @@
 			$this->autocompleterCode = '';
 			$this->autocompleterCss  = '';
 			$this->autocompleterCodeFunctions = array();
+
+			// we are not on response
+			$this->onResponse = false;
 		}
-		
 
+
 		// internal method to add js to the template
 		function __assignTemplateCode(){
 			
@@ -182,28 +185,6 @@
 
 
         /**
-         *	This function adds custom javascript to YDAjax specific js.
-         *
-         *	@param $js      Javascript code.
-         *	@param $order   Zone to place code (top, bottom, topBefore, topAfter, bottomBefore, bottomAfer)
-         */
-		function addJavascript( $js, $order = 'top' ){
-		
-			switch( strtolower( $order ) ){
-				case 'top' :
-				case 'topafter' :  array_push( $this->customjsTop, $js ); break;
-				case 'topbefore' : array_unshift( $this->customjsTop, $js ); break;
-				
-				case 'bottom' :    
-				case 'bottomafter' :  array_push( $this->customjsBottom, $js ); break;
-				case 'bottombefore' : array_unshift( $this->customjsBottom, $js ); break;
-				
-				default : die( "Order " . $order . " is not supported" );
-			}
-		}
-
-
-        /**
          *	This function adds custom javascript to a response.
          *
          *	@param $js		Javascript code.
@@ -238,27 +219,29 @@
 			if ( !isset( $options['style.border'] ) )          $options['style.border']          = '1px solid #110000';
 
 			// static values
-			$options['id']             = $this->wtID ."id";
 			$options['innerHTML']      = $html;
 			$options['style.position'] = "absolute";
 			$options['style.zindex']   = 9999;
 
 			// create js for html element creation
 			$this->waitingMessageCode  = "var " . $this->wtID . " = document.createElement('div');";
-			
-			// add custom options
-			foreach( $options as $name => $value )
-				$this->waitingMessageCode .= $this->wtID . "." . $name . " = '" . $value . "';";
-			
+
 			// append div box to document body
 			$this->waitingMessageCode .= "document.body.appendChild(" . $this->wtID . ");";
-
+			
+			// add id
+			$this->waitingMessageCode .= $this->wtID . ".id = '" . $this->wtID ."id';";
+			
 			// create start effect
 			if ( is_null( $effectStart ) )
 				$effectStart = new YDAjaxEffect( '', 'hide', '', 0 );
 
 			// append start code
 			$this->waitingMessageCode .= $effectStart->getJSHead( $this->wtID ."id" ) . $effectStart->getJSBody( $this->wtID ."id" );
+			
+			// add custom options
+			foreach( $options as $name => $value )
+				$this->waitingMessageCode .= $this->wtID . "." . $name . " = '" . $value . "';";
 
 			// create js function headers to show/hide waiting message div
 			$this->wtFunctionShow = $this->wtID . "show()";
@@ -499,13 +482,16 @@
 				// if effect id is not a form element then its a html id
 				$id = $effect->getId();
 			}
-		
+
 			// if some html id has not already an effect applyed we must send effect header
 			if ( !in_array( $effect->getVariable(), $this->effects ) )
 				$js = $effect->getJSHead( $id );
 
-			// send	js
-			$this->response->addScript( $js . $effect->getJSBody( $id ) );
+			$js .= $effect->getJSBody( $id );
+
+			// if effect is added before a response we must included it on "onload" effects
+			if ( !$this->onResponse )  $this->effects[ $effect->getVariable() ] = $effect->getJSBody( $id );
+			else                       $this->response->addScript( $js );
 		}
 
 
@@ -539,24 +525,33 @@
 						
 					// get element object
 					$elem = & $form->getElement( $arg );
-
+					
 					// get element type to invoke the custom js to get the value
 					switch( $elem->getType() ){
 						case 'autocompleter' :
-						case 'text' :			$args[] = $this->_getValueText(           $elem, $options ); break;
-						case 'password' :		$args[] = $this->_getValuePassword(       $elem, $options ); break;
-						case 'textarea' :		$args[] = $this->_getValueTextarea(       $elem, $options ); break;
-						case 'radio' :			$args[] = $this->_getValueRadio(          $elem, $options ); break;
-						case 'checkbox' :		$args[] = $this->_getValueCheckbox(       $elem, $options ); break;
-						case 'dateselect' :		$args[] = $this->_getValueDateSelect(     $elem, $options ); break;
-						case 'datetimeselect' :	$args[] = $this->_getValueDateTimeSelect( $elem, $options ); break;
-						case 'timeselect' :		$args[] = $this->_getValueTimeSelect(     $elem, $options ); break;
-						case 'span' :			$args[] = $this->_getValueSpan(           $elem, $options ); break;
-						case 'select' :			$args[] = $this->_getValueSelect(         $elem, $options ); break;
+						case 'text' :			$js = $this->_getValueText(           $elem, $options ); break;
+						case 'password' :		$js = $this->_getValuePassword(       $elem, $options ); break;
+						case 'textarea' :		$js = $this->_getValueTextarea(       $elem, $options ); break;
+						case 'radio' :			$js = $this->_getValueRadio(          $elem, $options ); break;
+						case 'checkbox' :		$js = $this->_getValueCheckbox(       $elem, $options ); break;
+						case 'dateselect' :		$js = $this->_getValueDateSelect(     $elem, $options ); break;
+						case 'datetimeselect' :	$js = $this->_getValueDateTimeSelect( $elem, $options ); break;
+						case 'timeselect' :		$js = $this->_getValueTimeSelect(     $elem, $options ); break;
+						case 'span' :			$js = $this->_getValueSpan(           $elem, $options ); break;
+						case 'select' :			$js = $this->_getValueSelect(         $elem, $options ); break;
 																							
 						default : die ( 'Element type "' . $elem->getType() . '" is not supported as dynamic argument' );
 					}
 					
+					// compute javascript function name
+					$jsfunction = $this->prefix . 'get' . $elem->getName() . '()';
+
+					// add javascript function code to custom js (to be included in template head)
+					$this->customjs[$jsfunction] = $js;
+					
+					// add function name to arguments list
+					$args[] = $jsfunction;
+					
 					continue;
 				}
 
@@ -719,6 +714,9 @@
          */	
 		function processEvents(){
 
+			// we will start a response
+			$this->onResponse = true;
+
 			// check autocompleters
 			$this->__computeAutocompletersCode();
 			
@@ -813,171 +811,126 @@
 		// internal method to create the needed js function to retrieve a text value
 		function _getValueText( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
-			// add our custom js function to retrieve this text element value (it will replace possible js functions for this element because we cannot have 2 functions with the same name)
-			$this->customjs[$jsfunction] = 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-
-			// return function invocation
-			return $jsfunction;
+			// return js code
+			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
 		}
 
 
 		// internal method to create the needed js function to retrieve a select value
 		function _getValueSelect( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-
 			// if we want all values and not only the select one
 			if (in_array( 'all', $options )){
 
-				$this->customjs[$jsfunction]  = "\n\t" . 'var __ydtmparr = new Array();';
-				$this->customjs[$jsfunction] .= "\n\t" . 'var __ydtmpsel = document.getElementById("' . $element->getAttribute('id') . '");';
-				$this->customjs[$jsfunction] .= "\n\t" . 'for (i = 0; i < __ydtmpsel.length; i++){';
-				$this->customjs[$jsfunction] .= "\n\t" . '    __ydtmparr[ __ydtmpsel.options[i].value ] = __ydtmpsel.options[i].text;';
-				$this->customjs[$jsfunction] .= "\n\t" . '}';
-				$this->customjs[$jsfunction] .= "\n\t" . 'return __ydtmparr;' . "\n";
+				$js  = "\n\t" . 'var __ydtmparr = new Array();';
+				$js .= "\n\t" . 'var __ydtmpsel = document.getElementById("' . $element->getAttribute('id') . '");';
+				$js .= "\n\t" . 'for (i = 0; i < __ydtmpsel.length; i++){';
+				$js .= "\n\t" . '    __ydtmparr[ __ydtmpsel.options[i].value ] = __ydtmpsel.options[i].text;';
+				$js .= "\n\t" . '}';
+				$js .= "\n\t" . 'return __ydtmparr;' . "\n";
 		
-				return $jsfunction;
+				return $js;
 			}
 		
-			// add our custom js function
-			$this->customjs[$jsfunction] = 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-
-			// return function invocation
-			return $jsfunction;
+			// return just the value 
+			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
 		}
 
 
 		// internal method to create the needed js function to retrieve a password value
 		function _getValuePassword( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
-			// add our custom js function
-			$this->customjs[$jsfunction] = 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-
-			// return function invocation
-			return $jsfunction;
+			// return value
+			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
 		}
 		
 
 		// internal method to create the needed js function to retrieve a textarea value
 		function _getValueTextarea( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
-			// add our custom js function
-			$this->customjs[$jsfunction] = 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-
-			// return function invocation
-			return $jsfunction;
+			// return value
+			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
 		}
 		
 		
 		// internal method to create the needed js function to retrieve a span value
 		function _getValueSpan( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
-			// add our custom js function
-			$this->customjs[$jsfunction] = 'return document.getElementById("' . $element->getAttribute('id') . '").innerHTML;';
-
-			// return function invocation
-			return $jsfunction;
+			// return innerhmtl
+			return 'return document.getElementById("' . $element->getAttribute('id') . '").innerHTML;';
 		}		
 		
 
 		// internal method to create the needed js function to retrieve a dateselect value
 		function _getValueDateSelect( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
 			// add our custom js function
-			$this->customjs[$jsfunction]  = "\n\t" . 'var day   = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var month = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var year  = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var mydate = new Date( year, month, day ); ';
-			$this->customjs[$jsfunction] .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
+			$js  = "\n\t" . 'var day   = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
+			$js .= "\n\t" . 'var month = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
+			$js .= "\n\t" . 'var year  = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
+			$js .= "\n\t" . 'var mydate = new Date( year, month, day ); ';
+			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
 
-			// return function invocation
-			return $jsfunction;
+			// return function code
+			return $js;
 		}
 
 
 		// internal method to create the needed js function to retrieve a timeselect value
 		function _getValueTimeSelect( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
 			// add our custom js function
-			$this->customjs[$jsfunction]  = "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var mydate = new Date( 1970, 1, 1, hours, minutes ); ';
-			$this->customjs[$jsfunction] .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
+			$js  = "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
+			$js .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
+			$js .= "\n\t" . 'var mydate = new Date( 1970, 1, 1, hours, minutes ); ';
+			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
 
-			// return function invocation
-			return $jsfunction;
+			// return function code
+			return $js;
 		}		
 
 
 		// internal method to create the needed js function to retrieve a datetimeselect value
 		function _getValueDateTimeSelect( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
 			// add our custom js function
-			$this->customjs[$jsfunction]  = "\n\t" . 'var day      = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var month    = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var year     = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'var mydate = new Date( year, month, day, hours, minutes ); ';
-			$this->customjs[$jsfunction] .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
+			$js  = "\n\t" . 'var day      = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
+			$js .= "\n\t" . 'var month    = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
+			$js .= "\n\t" . 'var year     = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
+			$js .= "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
+			$js .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
+			$js .= "\n\t" . 'var mydate = new Date( year, month, day, hours, minutes ); ';
+			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
 
-			// return function invocation
-			return $jsfunction;
+			// return function code
+			return $js;
 		}				
 		
 
 		// internal method to create the needed js function to retrieve a checkbox value
 		function _getValueCheckbox( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-		
 			// add our custom js function
-			$this->customjs[$jsfunction]  =	"\n\t" . 'if (document.getElementById("' . $element->getAttribute('id') . '").checked)';
-			$this->customjs[$jsfunction] .=	"\n\t" . '	return 1;';
-			$this->customjs[$jsfunction] .=	"\n\t" . 'return 0;' . "\n";
+			$js  = "\n\t" . 'if (document.getElementById("' . $element->getAttribute('id') . '").checked)';
+			$js .= "\n\t" . '	return 1;';
+			$js .= "\n\t" . 'return 0;' . "\n";
 
-			// return function invocation
-			return $jsfunction;
+			// return function code
+			return $js;
 		}
 		
 
 		// internal method to create the needed js function to retrieve a radio value
 		function _getValueRadio( & $element, $options ){
 		
-			// generate function name
-			$jsfunction = $this->prefix . 'get' . $element->getName() . '()';
-			
 			// add custom js function
-			$this->customjs[$jsfunction]  = "\n\t" . 'var __ydftmp = document.getElementById("' . $element->getAttribute('id') . '");';
-			$this->customjs[$jsfunction] .= "\n\t" . 'for (counter = 0; counter < __ydftmp.length; counter++)';
-			$this->customjs[$jsfunction] .= "\n\t" . '	if (__ydftmp[counter].checked) return __ydftmp[counter].value;';
-			$this->customjs[$jsfunction] .= "\n\t" . 'return false;' . "\n";
+			$js  = "\n\t" . 'var __ydftmp = document.getElementById("' . $element->getAttribute('id') . '");';
+			$js .= "\n\t" . 'for (counter = 0; counter < __ydftmp.length; counter++)';
+			$js .= "\n\t" . '   if (__ydftmp[counter].checked) return __ydftmp[counter].value;';
+			$js .= "\n\t" . 'return false;' . "\n";
 
-			// return function invocation
-			return $jsfunction;
+			// return function code
+			return $jscode;
 		}		
 
 
@@ -1419,7 +1372,8 @@
 									break;
 									
 				case 'show' :
-				case 'hide' :       $header = '';
+				case 'hide' :
+				case 'focus' :      $header = '';
                                     break;
 
 				default :           die( 'Effect type ' . $this->name . ' is not supported by YDAjaxEffect' );
@@ -1446,6 +1400,7 @@
 				case 'opacity' : return $this->js . '.' . $this->method . ';';
 				case 'show' :    return 'document.getElementById("' . $id . '").style.display = "block";';
 				case 'hide' :    return 'document.getElementById("' . $id . '").style.display = "none";';
+				case 'focus' :   return 'document.getElementById("' . $id . '").focus();';
 			}
 		}
 



From ximian at berlios.de  Sun Mar 12 21:11:38 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 12 Mar 2006 21:11:38 +0100
Subject: [ydf-devel] r1777 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603122011.k2CKBc8j025246@sheep.berlios.de>

Author: ximian
Date: 2006-03-12 21:10:36 +0100 (Sun, 12 Mar 2006)
New Revision: 1777

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
Log:
- forced browser autocompleter to off when form element is a autocompleter.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-12 19:45:22 UTC (rev 1776)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-12 20:10:36 UTC (rev 1777)
@@ -64,7 +64,10 @@
 
             // Create the list of attributes
             $attribs = array(
-                'type' => 'text', 'name' => $this->_form . '_' . $this->_name, 'value' => $this->_value
+                'type' => 'text',
+				'name' => $this->_form . '_' . $this->_name,
+				'value' => $this->_value,
+				'autocomplete' => 'off'
             );
             $attribs = array_merge( $this->_attributes, $attribs );
 



From ximian at berlios.de  Sun Mar 12 21:13:56 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 12 Mar 2006 21:13:56 +0100
Subject: [ydf-devel] r1778 - YDFramework2.0/trunk/examples/ajax
Message-ID: <200603122013.k2CKDuJk025688@sheep.berlios.de>

Author: ximian
Date: 2006-03-12 21:13:35 +0100 (Sun, 12 Mar 2006)
New Revision: 1778

Modified:
   YDFramework2.0/trunk/examples/ajax/autocompleter.php
Log:
- added focus effect to a text element in the YDAjax autocompleter example

Modified: YDFramework2.0/trunk/examples/ajax/autocompleter.php
===================================================================
--- YDFramework2.0/trunk/examples/ajax/autocompleter.php	2006-03-12 20:10:36 UTC (rev 1777)
+++ YDFramework2.0/trunk/examples/ajax/autocompleter.php	2006-03-12 20:13:35 UTC (rev 1778)
@@ -37,11 +37,14 @@
 			$this->ajax->addForm( $form1 );
 			$this->ajax->addForm( $form2 );
 
+			// add focus effect to 'arg2' form element. Simple, hein? ;)
+			$this->ajax->addEffect( new YDAjaxEffect( 'arg2', 'focus' ) );
+
 			// process events added
 			$this->ajax->processEvents();
 
 			// assign form and display template
-			$this->tpl->assign( 'title', 'Just start typing a coutry name in the box to see the effect' );
+			$this->tpl->assign( 'title', 'This example demonstrates 2 autocompleters and a text element with focus' );
 			$this->tpl->assign( 'form',  $form1->tohtml() . $form2->tohtml() );
 			$this->tpl->display();
 		}



From pclaerhout at berlios.de  Mon Mar 13 20:36:32 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Mon, 13 Mar 2006 20:36:32 +0100
Subject: [ydf-devel] r1779 - YDFramework2.0/trunk/examples/weblog/include
Message-ID: <200603131936.k2DJaWnE020107@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-13 20:36:20 +0100 (Mon, 13 Mar 2006)
New Revision: 1779

Modified:
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php
Log:
The template variables for the admin interface now point to the correct skin and uploads directory.

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php	2006-03-12 20:13:35 UTC (rev 1778)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogRequest.php	2006-03-13 19:36:20 UTC (rev 1779)
@@ -318,8 +318,8 @@
             $this->tpl->assign( 'weblog_description', YDConfig::get( 'weblog_description', 'Untitled Weblog Description' ) );
 
             // Get the link to the different directories
-            $uploads_dir = YDUrl::makeLinkAbsolute( $this->dir_uploads );
-            $skin_dir    = YDUrl::makeLinkAbsolute( $this->dir_skins . $this->skin );
+            $uploads_dir = YDUrl::makeLinkAbsolute( '../' . $this->dir_uploads );
+            $skin_dir    = YDUrl::makeLinkAbsolute( '../' . $this->dir_skins . $this->skin );
             $image_dir   = YDUrl::makeLinkAbsolute( $skin_dir . '/images' );
 
             // Add the different directories to the template



From pclaerhout at berlios.de  Mon Mar 13 20:41:48 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Mon, 13 Mar 2006 20:41:48 +0100
Subject: [ydf-devel] r1780 - YDFramework2.0/trunk/examples
Message-ID: <200603131941.k2DJfmrb022524@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-13 20:41:30 +0100 (Mon, 13 Mar 2006)
New Revision: 1780

Modified:
   YDFramework2.0/trunk/examples/array_paging_with_sorting.php
   YDFramework2.0/trunk/examples/array_paging_with_sorting.tpl
Log:
Fixed the paged array with sorting example.

Modified: YDFramework2.0/trunk/examples/array_paging_with_sorting.php
===================================================================
--- YDFramework2.0/trunk/examples/array_paging_with_sorting.php	2006-03-13 19:36:20 UTC (rev 1779)
+++ YDFramework2.0/trunk/examples/array_paging_with_sorting.php	2006-03-13 19:41:30 UTC (rev 1780)
@@ -9,7 +9,7 @@
     YDInclude( 'YDTemplate.php' );
 
     // Define the default pagesize
-    YDConfig::set( 'YD_DB_DEFAULTPAGESIZE', 15000 );
+    YDConfig::set( 'YD_DB_DEFAULTPAGESIZE', 15 );
 
     // Class definition
     class array_paging_with_sorting extends YDRequest {
@@ -23,6 +23,10 @@
         // Default action
         function actionDefault() {
 
+            // Get the pagesize and current page from the query string
+            $page = @ $_GET['page'];
+            $size = @ $_GET['size'];
+
             // Get the database connection
             $db = YDDatabase::getInstance( 'mysql', 'test', 'root', '', 'localhost' );
 
@@ -33,7 +37,7 @@
             $db->close();
 
             // Create the YDRecordSet object
-            $recordset = new YDRecordSet( $recordset, -1, null );
+            $recordset = new YDRecordSet( $recordset, $page, $size );
 
             // Setup the template
             $this->template->assign( 'recordset', $recordset );

Modified: YDFramework2.0/trunk/examples/array_paging_with_sorting.tpl
===================================================================
--- YDFramework2.0/trunk/examples/array_paging_with_sorting.tpl	2006-03-13 19:36:20 UTC (rev 1779)
+++ YDFramework2.0/trunk/examples/array_paging_with_sorting.tpl	2006-03-13 19:41:30 UTC (rev 1780)
@@ -1,3 +1,27 @@
+{capture assign="browsebar"}
+    {if $recordset->pages}
+        <p>
+        {if ! $recordset->isFirstPage}
+            <a href="{$recordset->getPreviousUrl()}">previous</a>
+        {else}
+            previous
+        {/if}
+        {foreach from=$recordset->pages item="page"}
+            {if $page == $recordset->page}
+                {$page}
+            {else}
+                <a href="{$recordset->getPageUrl($page)}">{$page}</a>
+            {/if}
+        {/foreach}
+        {if ! $recordset->isLastPage}
+            <a href="{$recordset->getNextUrl()}">next</a>
+        {else}
+            next
+        {/if}
+        </p>
+    {/if}
+{/capture}
+
 <html>
 
 <head>
@@ -11,6 +35,11 @@
     <h3>Array paging example</h3>
 
     {if $recordset->set}
+        <p>
+            Showing page {$recordset->page} of {$recordset->totalPages} pages
+            ({$recordset->totalRowsOnPage} row(s))
+        </p>
+        {$browsebar}
         <table border="1" width="400">
         <tr>
             <th>
@@ -29,6 +58,7 @@
             </tr>
         {/foreach}
         </table>
+        {$browsebar}
     {else}
         <p>No files were found.</p>
     {/if}



From francisco at fusemail.com  Mon Mar 13 22:55:20 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Mon, 13 Mar 2006 21:55:20 +0000
Subject: [ydf-devel] 2 new methods for YDFormElements
In-Reply-To: <441472A5.2070702@fusemail.com>
References: <441472A5.2070702@fusemail.com>
Message-ID: <4415EA48.8040607@fusemail.com>

> I propose to include these methods inside each form element. 

I will start creating all setJS and getJS for all YDForm elements.

Francisco A


From francisco at fusemail.com  Mon Mar 13 22:59:11 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Mon, 13 Mar 2006 21:59:11 +0000
Subject: [ydf-devel] YDDatabaseObject indirect relations
In-Reply-To: <12260be20603070438k7d53f7d9w20a3be8751ff734e@mail.gmail.com>
References: <43F79DC0.6080900@fusemail.com>	 <12260be20602181504p35c5af88ga6276069057996a3@mail.gmail.com>	 <43F7AD97.4050002@fusemail.com>	 <12260be20602181716r6c8c39ccj4c636ab91e4b0a4@mail.gmail.com>	 <43F89A2A.4050809@fusemail.com>	 <12260be20602191258i43f55d3dx3d582d2b24bae14f@mail.gmail.com> <12260be20603070438k7d53f7d9w20a3be8751ff734e@mail.gmail.com>
Message-ID: <4415EB2F.7080506@fusemail.com>

Hi David

> I thought a lot about this and the only way of doing it is to change the 
> class usage a bit.
> 
> This will break our current codes.
> 
> I'm thinking more about it and will get back to you later.

Sure. No problem.

Francisco A


From muitocomplicado at gmail.com  Tue Mar 14 21:49:41 2006
From: muitocomplicado at gmail.com (David Bittencourt)
Date: Tue, 14 Mar 2006 17:49:41 -0300
Subject: [ydf-devel] 2 new methods for YDFormElements
In-Reply-To: <4415EA48.8040607@fusemail.com>
References: <441472A5.2070702@fusemail.com> <4415EA48.8040607@fusemail.com>
Message-ID: <12260be20603141249k7e6d894cob93d51493bd1cb47@mail.gmail.com>

I think calling them setJavascript and getJavascript is better.

-db

On 3/13/06, Francisco Azevedo <francisco at fusemail.com> wrote:
>
>
> > I propose to include these methods inside each form element.
>
> I will start creating all setJS and getJS for all YDForm elements.
>
> Francisco A
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060314/08080b33/attachment.html>

From ximian at berlios.de  Wed Mar 15 00:12:21 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:12:21 +0100
Subject: [ydf-devel] r1782 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603142312.k2ENCLad019032@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:11:58 +0100 (Wed, 15 Mar 2006)
New Revision: 1782

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
Log:
added generic methods (about javascript) to the abstract YDFormElement

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-03-14 23:10:04 UTC (rev 1781)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDForm.php	2006-03-14 23:11:58 UTC (rev 1782)
@@ -1523,6 +1523,41 @@
         function toHtml() {
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            die( 'Element type (' . $this->getType() . ') is not supported in YDAjax' );
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            die( 'Element type (' . $this->getType() . ') is not supported in YDAjax events' );
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            die( 'Element type (' . $this->getType() . ') is not supported in YDAjax responses' );
+        }
+
+
+
     }
 
     /**



From ximian at berlios.de  Wed Mar 15 00:10:31 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:10:31 +0100
Subject: [ydf-devel] r1781 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603142310.k2ENAV8B018897@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:10:04 +0100 (Wed, 15 Mar 2006)
New Revision: 1781

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
Log:
YDTemplate::addJavascript now supports onload code.
Onload code is javascript code that is executed in the end.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2006-03-13 19:41:30 UTC (rev 1780)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDTemplate.php	2006-03-14 23:10:04 UTC (rev 1781)
@@ -85,10 +85,11 @@
                 $this->register_function( 't', 'YDTemplate_function_t' );
 
                 // custom javascript code
-                $this->customJavascript = null;
+                $this->customJavascript       = '';
+                $this->customJavascriptOnload = '';
 
                 // custom Css code
-                $this->customCss = null;
+                $this->customCss = '';
             }
 
             /**
@@ -212,11 +213,15 @@
                 $code = '';
 
                 // test if customCss is set
-                if ( !is_null( $this->customCss ) )
-                    $code  = "\n<style type=\"text/css\">\n" . $this->customCss . "</style>";
+                if ( $this->customCss != '' )
+                    $code = "\n<style type=\"text/css\">\n" . $this->customCss . "</style>";
 
+                // add onload code to custom javascript code
+                if ( $this->customJavascriptOnload != '' )
+                    $this->customJavascript .= "window.onload = function() {" . $this->customJavascriptOnload . "}\n";
+
                 // test if customJavascript is set
-                if ( !is_null( $this->customJavascript ) ) 
+                if ( $this->customJavascript != '' ) 
                     $code .= "\n<script type=\"text/javascript\">\n" . $this->customJavascript . "</script>\n";
 
                 if ( $code == '' ) return $tpl_source;
@@ -230,11 +235,18 @@
              *
              *	@param $jsCode	   Javascript code to add
              *	@param $prepend    (Optional) Boolean that defines if code should be prepended
+             *	@param $onload     (Optional) Boolean that defines if code should be added after page load
              */
-            function addJavascript( $jsCode, $prepend = false ) {
+            function addJavascript( $jsCode, $prepend = false, $onload = false ) {
 
-                if (!$prepend) $this->customJavascript  = $this->customJavascript . $jsCode . "\n";
-                else           $this->customJavascript  = $jsCode . $this->customJavascript . "\n";
+                if ( $onload ){
+                    if ( !$prepend ) $this->customJavascriptOnload = $this->customJavascriptOnload . $jsCode . "\n";
+                    else             $this->customJavascriptOnload = $jsCode . $this->customJavascriptOnload . "\n";
+                    return;
+                }
+
+                if (!$prepend) $this->customJavascript = $this->customJavascript . $jsCode . "\n";
+                else           $this->customJavascript = $jsCode . $this->customJavascript . "\n";
             }
 
             /**



From ximian at berlios.de  Wed Mar 15 00:17:13 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:17:13 +0100
Subject: [ydf-devel] r1783 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142317.k2ENHD6K019368@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:16:51 +0100 (Wed, 15 Mar 2006)
New Revision: 1783

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-14 23:11:58 UTC (rev 1782)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Autocompleter.php	2006-03-14 23:16:51 UTC (rev 1783)
@@ -132,6 +132,37 @@
 		}
 
 
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:19:13 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:19:13 +0100
Subject: [ydf-devel] r1784 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142319.k2ENJDLn019629@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:18:49 +0100 (Wed, 15 Mar 2006)
New Revision: 1784

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Button.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Button.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Button.php	2006-03-14 23:16:51 UTC (rev 1783)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Button.php	2006-03-14 23:18:49 UTC (rev 1784)
@@ -92,6 +92,32 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onclick';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if ( is_null( $attribute ) ) $attribute = 'value';
+
+            // assign result to form element
+            return 'document.getElementById("' . $this->getAttribute('id') . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:23:29 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:23:29 +0100
Subject: [ydf-devel] r1785 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142323.k2ENNTo3019836@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:23:06 +0100 (Wed, 15 Mar 2006)
New Revision: 1785

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php	2006-03-14 23:18:49 UTC (rev 1784)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Checkbox.php	2006-03-14 23:23:06 UTC (rev 1785)
@@ -131,6 +131,64 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // add our custom js function
+            $js  = "\n\t" . 'if (document.getElementById("' . $this->getAttribute('id') . '").checked)';
+            $js .= "\n\t" . '	return 1;';
+            $js .= "\n\t" . 'return 0;' . "\n";
+
+            // return function code
+            return $js;
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if ( is_null( $attribute ) ) $attribute = 'checked';
+
+            if ( $attribute != 'checked' )
+                return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+
+            // if atribute is 'checked' and result is true, check this checkbox
+            if ( is_bool( $result ) && $result == true )
+                return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").checked = true;';
+
+            // if atribute is 'checked' and result is false, clean checkbox selection
+            if ( is_bool( $result ) && $result == false )
+                return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").checked = false;';
+
+            // if atribute is 'checked' and result is 'toggle', checkbox will have the opposite value
+            if ( $result == "toggle" )
+                return 'var __ydftmp = document.getElementById("' . $this->getAttribute( 'id' ) . '");
+                        if (__ydftmp.checked == false) {__ydftmp.checked = true;} else {__ydftmp.checked = false;}';
+
+            return '';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:24:27 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:24:27 +0100
Subject: [ydf-devel] r1786 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142324.k2ENOR5j019910@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:24:03 +0100 (Wed, 15 Mar 2006)
New Revision: 1786

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php	2006-03-14 23:23:06 UTC (rev 1785)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_BBTextArea.php	2006-03-14 23:24:03 UTC (rev 1786)
@@ -221,6 +221,47 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:27:46 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:27:46 +0100
Subject: [ydf-devel] r1787 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142327.k2ENRkcC020059@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:27:23 +0100 (Wed, 15 Mar 2006)
New Revision: 1787

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php	2006-03-14 23:24:03 UTC (rev 1786)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Date.php	2006-03-14 23:27:23 UTC (rev 1787)
@@ -482,6 +482,89 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // get elements
+            $elements = $this->_getElements();
+
+            // initialize js code
+            $js = '';
+
+            // add our custom js function
+            if ( !in_array( 'year', $elements ) )    $js .= "\n\t" . 'var year = 1970;';
+            else                                     $js .= "\n\t" . 'var year = document.getElementById("' . $this->getAttribute('id') . '[year]").value;';
+
+            if ( !in_array( 'month', $elements ) )   $js .= "\n\t" . 'var month = 0;';
+            else                                     $js .= "\n\t" . 'var month = document.getElementById("' . $this->getAttribute('id') . '[month]").value - 1;';
+
+            if ( !in_array( 'day', $elements ) )     $js .= "\n\t" . 'var day = 1;';
+            else                                     $js .= "\n\t" . 'var day = document.getElementById("' . $this->getAttribute('id') . '[day]").value;';
+
+            if ( !in_array( 'hours', $elements ) )   $js .= "\n\t" . 'var hours = 1;';
+            else                                     $js .= "\n\t" . 'var hours = document.getElementById("' . $this->getAttribute('id') . '[hours]").value;';
+
+            if ( !in_array( 'minutes', $elements ) ) $js .= "\n\t" . 'var minutes = 1;';
+            else                                     $js .= "\n\t" . 'var minutes = document.getElementById("' . $this->getAttribute('id') . '[minutes]").value;';
+
+            if ( !in_array( 'seconds', $elements ) ) $js .= "\n\t" . 'var seconds = 1;';
+            else                                     $js .= "\n\t" . 'var seconds = document.getElementById("' . $this->getAttribute('id') . '[seconds]").value;';
+
+            $js .= "\n\t" . 'var mydate = new Date( year, month, day, hours, minutes, seconds ); ';
+            $js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
+
+            // return function code
+            return $js;
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute is not defined we must create the default one
+            if ( is_null( $attribute ) ) $attribute = 'value';
+
+            // get timestamp individual values
+            $parsed  = getdate( $result );
+
+            // get elements
+            $elements = $this->_getElements();
+
+            $js = '';
+
+            // add our custom js function
+            if ( in_array( 'year', $elements ) )    $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[year]").'.     $attribute . ' = "' . $parsed['year']    . '";';
+            if ( in_array( 'month', $elements ) )   $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[day]").'.      $attribute . ' = "' . $parsed['mon']     . '";';
+            if ( in_array( 'day', $elements ) )     $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[day]").'.      $attribute . ' = "' . $parsed['mday']    . '";';
+            if ( in_array( 'hours', $elements ) )   $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[hours]").'.    $attribute . ' = "' . $parsed['hours']   . '";';
+            if ( in_array( 'minutes', $elements ) ) $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[minutes]").'.  $attribute . ' = "' . $parsed['minutes'] . '";';
+            if ( in_array( 'seconds', $elements ) ) $js .= 'document.getElementById("' . $this->getAttribute( 'id' ) .'[seconds]").'.  $attribute . ' = "' . $parsed['seconds'] . '";';
+
+            // return function code
+            return $js;
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:28:45 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:28:45 +0100
Subject: [ydf-devel] r1788 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142328.k2ENSjsR020085@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:28:25 +0100 (Wed, 15 Mar 2006)
New Revision: 1788

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Image.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Image.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Image.php	2006-03-14 23:27:23 UTC (rev 1787)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Image.php	2006-03-14 23:28:25 UTC (rev 1788)
@@ -92,6 +92,16 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            die( 'Images cannot be used in ajax because they force submition. Use "img" element instead.' );
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:30:24 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:30:24 +0100
Subject: [ydf-devel] r1789 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142330.k2ENUO5R021046@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:29:58 +0100 (Wed, 15 Mar 2006)
New Revision: 1789

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Hidden.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Hidden.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Hidden.php	2006-03-14 23:28:25 UTC (rev 1788)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Hidden.php	2006-03-14 23:29:58 UTC (rev 1789)
@@ -90,6 +90,38 @@
 
         }
 
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if ( is_null( $attribute ) ) $attribute = 'value';
+
+            // check and convert $result
+            $result = htmlspecialchars( $result );
+
+            // assign result to form element
+            return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:33:17 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:33:17 +0100
Subject: [ydf-devel] r1791 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142333.k2ENXHjL024018@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:32:57 +0100 (Wed, 15 Mar 2006)
New Revision: 1791

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Password.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Password.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Password.php	2006-03-14 23:31:55 UTC (rev 1790)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Password.php	2006-03-14 23:32:57 UTC (rev 1791)
@@ -74,6 +74,48 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:32:22 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:32:22 +0100
Subject: [ydf-devel] r1790 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142332.k2ENWMLu023590@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:31:55 +0100 (Wed, 15 Mar 2006)
New Revision: 1790

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php	2006-03-14 23:29:58 UTC (rev 1789)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php	2006-03-14 23:31:55 UTC (rev 1790)
@@ -92,6 +92,51 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onclick';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if ( is_null( $attribute ) ){
+
+                // the default atribute of an image is its source address
+                $attribute = 'src';
+
+                // if we want to display a new image, we must create a new src value otherwise the browser won't replace
+                $result .= '?' . microtime();
+            }
+
+            // assign result image
+            return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:36:06 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:36:06 +0100
Subject: [ydf-devel] r1793 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142336.k2ENa6uM025077@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:35:45 +0100 (Wed, 15 Mar 2006)
New Revision: 1793

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php	2006-03-14 23:33:52 UTC (rev 1792)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Span.php	2006-03-14 23:35:45 UTC (rev 1793)
@@ -92,6 +92,50 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onclick';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").innerHTML;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if (is_null( $attribute )) $attribute = 'innerHTML';
+
+            // if result is an array we should export to a valid js string
+            if (is_array( $result )) $result = str_replace( "\n", "<br>", var_export( $result, true ) ) ;
+
+            // escape string
+            $result = addslashes( $result );
+
+            // assign result to form element using the id
+            return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:34:15 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:34:15 +0100
Subject: [ydf-devel] r1792 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142334.k2ENYF6M024476@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:33:52 +0100 (Wed, 15 Mar 2006)
New Revision: 1792

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Link.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Link.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Link.php	2006-03-14 23:32:57 UTC (rev 1791)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Link.php	2006-03-14 23:33:52 UTC (rev 1792)
@@ -95,6 +95,16 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onclick';
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:37:04 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:37:04 +0100
Subject: [ydf-devel] r1794 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142337.k2ENb4KY025209@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:36:40 +0100 (Wed, 15 Mar 2006)
New Revision: 1794

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextArea.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextArea.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextArea.php	2006-03-14 23:35:45 UTC (rev 1793)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextArea.php	2006-03-14 23:36:40 UTC (rev 1794)
@@ -69,6 +69,49 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:39:41 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:39:41 +0100
Subject: [ydf-devel] r1795 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142339.k2ENdf5l026051@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:39:00 +0100 (Wed, 15 Mar 2006)
New Revision: 1795

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Radio.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Radio.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Radio.php	2006-03-14 23:36:40 UTC (rev 1794)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Radio.php	2006-03-14 23:39:00 UTC (rev 1795)
@@ -91,6 +91,56 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // add custom js function
+            $js  = "\n\t" . 'var __ydftmp = document.getElementById("' . $this->getAttribute('id') . '");';
+            $js .= "\n\t" . 'for (counter = 0; counter < __ydftmp.length; counter++)';
+            $js .= "\n\t" . '   if (__ydftmp[counter].checked) return __ydftmp[counter].value;';
+            $js .= "\n\t" . 'return false;' . "\n";
+
+            // return function code
+            return $jscode;
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute is not defined we must create the default one
+            if ( is_null( $attribute ) ) $attribute = 'value';
+
+            // check and convert $result
+            $result = htmlspecialchars( $result );
+
+            // we must cycle all radio instances of this radio element
+            return '__ydftmp = document.getElementById("' . $this->getAttribute( 'id' ) . '");
+                    for (counter = 0; counter < __ydftmp.length; counter++)
+                        if (__ydftmp[counter].value == "' . $result . '") __ydftmp[counter].checked = true;
+                        else __ydftmp[counter].checked = false;';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:43:01 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:43:01 +0100
Subject: [ydf-devel] r1796 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142343.k2ENh1sB027855@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:42:29 +0100 (Wed, 15 Mar 2006)
New Revision: 1796

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Select.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Select.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Select.php	2006-03-14 23:39:00 UTC (rev 1795)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Select.php	2006-03-14 23:42:29 UTC (rev 1796)
@@ -82,6 +82,73 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // if we want all values and not only the select one
+            if (in_array( 'all', $options )){
+
+                $js  = "\n\t" . 'var __ydtmparr = new Array();';
+                $js .= "\n\t" . 'var __ydtmpsel = document.getElementById("' . $this->getAttribute('id') . '");';
+                $js .= "\n\t" . 'for (i = 0; i < __ydtmpsel.length; i++){';
+                $js .= "\n\t" . '    __ydtmparr[ __ydtmpsel.options[i].value ] = __ydtmpsel.options[i].text;';
+                $js .= "\n\t" . '}';
+                $js .= "\n\t" . 'return __ydtmparr;' . "\n";
+
+                return $js;
+            }
+
+            // return just the value 
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+            // if atribute event is not defined we must create a default one
+            if ( is_null( $attribute ) ) $attribute = 'value';
+
+            // create select variable
+            $js = 'var __ydfselect = document.getElementById("' . $this->getAttribute('id') . '");';
+
+            // if we want to define the selected option
+            if ( !is_array( $result ) )
+                return $js . 'for (counter = 0; counter < __ydfselect.length; counter++){
+                                 if (__ydfselect[counter].value == "' . addslashes( $result ) . '"){
+                                     __ydfselect.selectedIndex = counter;
+                                 }
+                              }';
+
+            // if we want to replace all select options
+            $js .= '__ydfselect.options.length = 0;';
+            foreach( $result as $key => $value )
+                $js .= '    __ydfselect.options[ __ydfselect.options.length  ] = new Option("' . addslashes( $value ) . '","' . addslashes( $key ) . '"); ';
+
+            return $js;
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:44:00 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:44:00 +0100
Subject: [ydf-devel] r1797 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142344.k2ENi0qb029275@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:43:29 +0100 (Wed, 15 Mar 2006)
New Revision: 1797

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Submit.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Submit.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Submit.php	2006-03-14 23:42:29 UTC (rev 1796)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Submit.php	2006-03-14 23:43:29 UTC (rev 1797)
@@ -92,6 +92,16 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            die( 'Submit buttons cannot be used in ajax because they force submition.' );
+        }
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:45:29 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:45:29 +0100
Subject: [ydf-devel] r1798 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142345.k2ENjTV6032238@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:44:26 +0100 (Wed, 15 Mar 2006)
New Revision: 1798

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Text.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Text.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Text.php	2006-03-14 23:43:29 UTC (rev 1797)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Text.php	2006-03-14 23:44:26 UTC (rev 1798)
@@ -71,6 +71,47 @@
 
         }
 
+
+        /**
+         *	This function returns the default javascript event of this element
+         */
+        function getJSEvent(){ 
+
+            return 'onchange';
+        }
+
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:46:27 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:46:27 +0100
Subject: [ydf-devel] r1799 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603142346.k2ENkRKl000326@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:46:05 +0100 (Wed, 15 Mar 2006)
New Revision: 1799

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php
Log:
added Javascript methods

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php	2006-03-14 23:44:26 UTC (rev 1798)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_TextAreaCounter.php	2006-03-14 23:46:05 UTC (rev 1799)
@@ -116,6 +116,40 @@
 
         }
 
+
+        /**
+         *	This function gets an element value using javascript
+         *
+         *	@param $options		(optional) The options for the elment.
+         */
+        function getJS( $options = null ){ 
+
+            // return js code
+            return 'return document.getElementById("' . $this->getAttribute('id') . '").value;';
+        }
+
+
+        /**
+         *	This function sets an element value using javascript
+         *
+         *	@param $result		The result value
+         *	@param $attribute	(optional) Element attribute
+         *	@param $options		(optional) The options for the elment.
+         */
+        function setJS( $result, $attribute = null, $options = null ){ 
+
+             // if atribute is not defined we must create the default one
+             if ( is_null( $attribute ) ) $attribute = 'value';
+
+             // convert $result
+             $result = htmlspecialchars( $result );
+
+             // assign result
+             return 'document.getElementById("' . $this->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";';
+        }
+
+
+
     }
 
 ?>
\ No newline at end of file



From ximian at berlios.de  Wed Mar 15 00:53:46 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Wed, 15 Mar 2006 00:53:46 +0100
Subject: [ydf-devel] r1800 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603142353.k2ENrknM006345@sheep.berlios.de>

Author: ximian
Date: 2006-03-15 00:53:09 +0100 (Wed, 15 Mar 2006)
New Revision: 1800

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
YDAjax v2.6 not_rock_stable
- less 500 lines of code 
- now using the specific js methods defined inside each element
- 4 forms instead of 10 (cleanup)
- support for any type of date element (and not only date/time/datetime elements)

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-14 23:46:05 UTC (rev 1799)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-14 23:53:09 UTC (rev 1800)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.5';
+            $this->_version = '2.6';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -78,12 +78,9 @@
 			// initialize xajax object
 			$this->xajax( "", $this->prefix, YDConfig::get( 'YD_AJAX_ENCODING' ) );
 			
-			// initilize all possible forms (10)
+			// initilize all possible forms (4)
 			$this->form_0 = null; $this->form_1 = null;
 			$this->form_2 = null; $this->form_3 = null;
-			$this->form_4 = null; $this->form_5 = null;
-			$this->form_6 = null; $this->form_7 = null;
-			$this->form_8 = null; $this->form_9 = null;
 
 			// initilize template
 			$this->template = & $template;
@@ -138,24 +135,6 @@
 			// send autocompleter code
 			$html .= $this->autocompleterCode;
 
-			// compute ONLOAD code
-			$onload = '';
-
-				// export effects js
-				foreach( $this->effects as $eff_name => $eff_code )
-					$onload  .= "\t" . $eff_code . "\n";
-
-				// send js waiting message creation code
-				if( $this->waitingMessageCode != '' )
-					$onload  .= "\t" . $this->waitingMessageCode . "\n";
-
-				// send autocompleter functions code
-				if( !empty( $this->autocompleterCodeFunctions ) )
-					$onload  .= "\t" . implode( "\n\t", $this->autocompleterCodeFunctions ) . "\n";
-
-			// if there are on load js just export it
-			if ( $onload != '' ) $html .= "window.onload = function() {\n" . $onload . "}\n";
-
 			// send js function to hide waiting message
 			$html .= $this->waitingMessageCodeFunction;
 
@@ -181,6 +160,24 @@
 
 			// add all code to template html
 			$this->template->addJavascript( trim( $html ), true );
+
+			// compute ONLOAD code
+			$onload = '';
+
+				// export effects js
+				foreach( $this->effects as $eff_name => $eff_code )
+					$onload  .= "\n\t" . $eff_code;
+
+				// send js waiting message creation code
+				if( $this->waitingMessageCode != '' )
+					$onload  .= "\n\t" . $this->waitingMessageCode;
+
+				// send autocompleter functions code
+				if( !empty( $this->autocompleterCodeFunctions ) )
+					$onload  .= "\n\t" . implode( "\n\t", $this->autocompleterCodeFunctions );
+
+			// add all code to template html
+			$this->template->addJavascript( $onload, false, true );
 		}
 
 
@@ -279,12 +276,6 @@
 			if ( !is_null( $this->form_1 ) && $this->form_1->isElement( $name ) ) return $this->form_1;
 			if ( !is_null( $this->form_2 ) && $this->form_2->isElement( $name ) ) return $this->form_2;
 			if ( !is_null( $this->form_3 ) && $this->form_3->isElement( $name ) ) return $this->form_3;
-			if ( !is_null( $this->form_4 ) && $this->form_4->isElement( $name ) ) return $this->form_4;
-			if ( !is_null( $this->form_5 ) && $this->form_5->isElement( $name ) ) return $this->form_5;
-			if ( !is_null( $this->form_6 ) && $this->form_6->isElement( $name ) ) return $this->form_6;
-			if ( !is_null( $this->form_7 ) && $this->form_7->isElement( $name ) ) return $this->form_7;
-			if ( !is_null( $this->form_8 ) && $this->form_8->isElement( $name ) ) return $this->form_8;
-			if ( !is_null( $this->form_9 ) && $this->form_9->isElement( $name ) ) return $this->form_9;
 
 			return null;
 		}
@@ -296,12 +287,6 @@
 			if ( !is_null( $this->form_1 ) && $this->form_1->getName() == $formName ) return true;
 			if ( !is_null( $this->form_2 ) && $this->form_2->getName() == $formName ) return true;
 			if ( !is_null( $this->form_3 ) && $this->form_3->getName() == $formName ) return true;
-			if ( !is_null( $this->form_4 ) && $this->form_4->getName() == $formName ) return true;
-			if ( !is_null( $this->form_5 ) && $this->form_5->getName() == $formName ) return true;
-			if ( !is_null( $this->form_6 ) && $this->form_6->getName() == $formName ) return true;
-			if ( !is_null( $this->form_7 ) && $this->form_7->getName() == $formName ) return true;
-			if ( !is_null( $this->form_8 ) && $this->form_8->getName() == $formName ) return true;
-			if ( !is_null( $this->form_9 ) && $this->form_9->getName() == $formName ) return true;
 			
 			return false;
 		}
@@ -313,16 +298,12 @@
          */		
 		function addForm( & $form ){
 		
-			if ( is_null( $this->form_0 ) ){ $this->form_0 = & $form; return; }
-			if ( is_null( $this->form_1 ) ){ $this->form_1 = & $form; return; }
-			if ( is_null( $this->form_2 ) ){ $this->form_2 = & $form; return; }
-			if ( is_null( $this->form_3 ) ){ $this->form_3 = & $form; return; }
-			if ( is_null( $this->form_4 ) ){ $this->form_4 = & $form; return; }
-			if ( is_null( $this->form_5 ) ){ $this->form_5 = & $form; return; }
-			if ( is_null( $this->form_6 ) ){ $this->form_6 = & $form; return; }
-			if ( is_null( $this->form_7 ) ){ $this->form_7 = & $form; return; }
-			if ( is_null( $this->form_8 ) ){ $this->form_8 = & $form; return; }
-			if ( is_null( $this->form_9 ) ){ $this->form_9 = & $form; return; }	
+			if ( is_null( $this->form_0 ) ){ $this->form_0 = & $form; return true; }
+			if ( is_null( $this->form_1 ) ){ $this->form_1 = & $form; return true; }
+			if ( is_null( $this->form_2 ) ){ $this->form_2 = & $form; return true; }
+			if ( is_null( $this->form_3 ) ){ $this->form_3 = & $form; return true; }
+
+			return false;
 		}
 
 
@@ -376,7 +357,7 @@
 			$formElement = & $form->getElement( $formElementName );
 
 			// if event is null we must check the form element type to compute the default event
-			if( is_null( $event ) ) $event = $this->_getDefaultEvent( $formElement->getType() );
+			if( is_null( $event ) ) $event = $formElement->getJSEvent();
 
 			// parse event
 			$event = strtolower( $event );
@@ -526,23 +507,9 @@
 					// get element object
 					$elem = & $form->getElement( $arg );
 					
-					// get element type to invoke the custom js to get the value
-					switch( $elem->getType() ){
-						case 'autocompleter' :
-						case 'text' :			$js = $this->_getValueText(           $elem, $options ); break;
-						case 'password' :		$js = $this->_getValuePassword(       $elem, $options ); break;
-						case 'textarea' :		$js = $this->_getValueTextarea(       $elem, $options ); break;
-						case 'radio' :			$js = $this->_getValueRadio(          $elem, $options ); break;
-						case 'checkbox' :		$js = $this->_getValueCheckbox(       $elem, $options ); break;
-						case 'dateselect' :		$js = $this->_getValueDateSelect(     $elem, $options ); break;
-						case 'datetimeselect' :	$js = $this->_getValueDateTimeSelect( $elem, $options ); break;
-						case 'timeselect' :		$js = $this->_getValueTimeSelect(     $elem, $options ); break;
-						case 'span' :			$js = $this->_getValueSpan(           $elem, $options ); break;
-						case 'select' :			$js = $this->_getValueSelect(         $elem, $options ); break;
-																							
-						default : die ( 'Element type "' . $elem->getType() . '" is not supported as dynamic argument' );
-					}
-					
+					// invoke the custom js to get the value
+					$js = $elem->getJS( $options );					
+
 					// compute javascript function name
 					$jsfunction = $this->prefix . 'get' . $elem->getName() . '()';
 
@@ -603,7 +570,7 @@
 			$elem = & $form->getElement( $formElementName );
 
 			// check default event
-			if ( is_null( $event ) ) $event = $this->_getDefaultEvent( $elem->getType() );
+			if ( is_null( $event ) ) $event = $elem->getJSEvent();
 
 			// check if atribute exist
 			$attribute = $elem->getAttribute( $event );
@@ -646,31 +613,6 @@
 		}
 
 
-		// internal method. Returns the default event for a html element type
-		function _getDefaultEvent( $type ){
-
-			switch( $type ){
-				case 'submit' : trigger_error( 'Submit buttons cannot be used in ajax because they force submition.' ); break;
-				case 'image' :  trigger_error( 'Images cannot be used in ajax because they force submition. Use "img" element instead.' ); break;
-				case 'img' :		return 'onclick';
-				case 'button' :		return 'onclick';
-				case 'span' :		return 'onclick';
-				case 'link' :		return 'onclick';
-				case 'dateselect' :	return 'onchange';
-				case 'radio' :		return 'onchange';
-				case 'checkbox' :	return 'onchange';
-				case 'text' :		return 'onchange';
-				case 'textarea' :	return 'onchange';
-				case 'bbtextarea' :	return 'onchange';
-				case 'password' :	return 'onchange';
-				case 'select' :		return 'onchange';
-					
-				// if element doesn't exist return a php error
-				default : trigger_error( 'Element type (' . $type . ') is not supported in YDAjax' ); break;
-			}
-		}
-
-
         /**
          *	This method creates an alias (a js function) to a event
          *
@@ -697,7 +639,7 @@
 			$elem = & $form->getElement( $formElementName );
 			
 			// if we don't define a event we must check default one
-			if ( is_null( $event ) ) $event = $this->_getDefaultEvent( $elem->getType() );
+			if ( is_null( $event ) ) $event = $elem->getJSEvent();
 			
 			// get atribute from element
 			$attribute = $elem->getAttribute( $event );
@@ -787,14 +729,28 @@
 			// if is not a form element, assign result to a html id
 			$form = $this->__getForm( $formElementName );
 
-			if ( is_null( $form ) )
-				return $this->response->assignId( $formElementName, $result, $attribute, $options );
+			// if $formElementName is really an form element
+			if ( !is_null( $form ) ){
 
-			// if is a form element, get element
-			$elem = & $form->getElement( $formElementName );
+				// if is a form element, get element
+				$elem = & $form->getElement( $formElementName );
 
-			// assign result to element
-			return $this->response->assignResult( $elem, $result, $attribute, $options);
+				// assign result to element
+				return $this->response->addScript( $elem->setJS( $result, $attribute, $options ) );
+			}
+
+			// if $formElementName is a simple html ID
+			// if atribute is not defined we must create a default one
+			if (is_null( $attribute )) $attribute = 'innerHTML';
+
+			// if result is an array we should export to a valid js string
+			if (is_array( $result )) $result = str_replace( "\n", "<br>", var_export( $result, true ) );
+		
+			// escape string
+			$result = addslashes( $result );
+			
+			// assign result to form element using the id
+			return $this->response->addScript( 'document.getElementById("' . $formElementName . '").' . $attribute . ' = "' . $result . '";' );
 		}
 
 
@@ -806,134 +762,8 @@
 			// return XML to client browser
 			return $this->response->getXML();
 		}
-		
-		
-		// internal method to create the needed js function to retrieve a text value
-		function _getValueText( & $element, $options ){
-		
-			// return js code
-			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-		}
 
 
-		// internal method to create the needed js function to retrieve a select value
-		function _getValueSelect( & $element, $options ){
-		
-			// if we want all values and not only the select one
-			if (in_array( 'all', $options )){
-
-				$js  = "\n\t" . 'var __ydtmparr = new Array();';
-				$js .= "\n\t" . 'var __ydtmpsel = document.getElementById("' . $element->getAttribute('id') . '");';
-				$js .= "\n\t" . 'for (i = 0; i < __ydtmpsel.length; i++){';
-				$js .= "\n\t" . '    __ydtmparr[ __ydtmpsel.options[i].value ] = __ydtmpsel.options[i].text;';
-				$js .= "\n\t" . '}';
-				$js .= "\n\t" . 'return __ydtmparr;' . "\n";
-		
-				return $js;
-			}
-		
-			// return just the value 
-			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-		}
-
-
-		// internal method to create the needed js function to retrieve a password value
-		function _getValuePassword( & $element, $options ){
-		
-			// return value
-			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-		}
-		
-
-		// internal method to create the needed js function to retrieve a textarea value
-		function _getValueTextarea( & $element, $options ){
-		
-			// return value
-			return 'return document.getElementById("' . $element->getAttribute('id') . '").value;';
-		}
-		
-		
-		// internal method to create the needed js function to retrieve a span value
-		function _getValueSpan( & $element, $options ){
-		
-			// return innerhmtl
-			return 'return document.getElementById("' . $element->getAttribute('id') . '").innerHTML;';
-		}		
-		
-
-		// internal method to create the needed js function to retrieve a dateselect value
-		function _getValueDateSelect( & $element, $options ){
-		
-			// add our custom js function
-			$js  = "\n\t" . 'var day   = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
-			$js .= "\n\t" . 'var month = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
-			$js .= "\n\t" . 'var year  = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
-			$js .= "\n\t" . 'var mydate = new Date( year, month, day ); ';
-			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
-
-			// return function code
-			return $js;
-		}
-
-
-		// internal method to create the needed js function to retrieve a timeselect value
-		function _getValueTimeSelect( & $element, $options ){
-		
-			// add our custom js function
-			$js  = "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
-			$js .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
-			$js .= "\n\t" . 'var mydate = new Date( 1970, 1, 1, hours, minutes ); ';
-			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
-
-			// return function code
-			return $js;
-		}		
-
-
-		// internal method to create the needed js function to retrieve a datetimeselect value
-		function _getValueDateTimeSelect( & $element, $options ){
-		
-			// add our custom js function
-			$js  = "\n\t" . 'var day      = document.getElementById("' . $element->getAttribute('id') . '[day]").value;';
-			$js .= "\n\t" . 'var month    = document.getElementById("' . $element->getAttribute('id') . '[month]").value - 1;';
-			$js .= "\n\t" . 'var year     = document.getElementById("' . $element->getAttribute('id') . '[year]").value;';
-			$js .= "\n\t" . 'var hours    = document.getElementById("' . $element->getAttribute('id') . '[hours]").value;';
-			$js .= "\n\t" . 'var minutes  = document.getElementById("' . $element->getAttribute('id') . '[minutes]").value;';
-			$js .= "\n\t" . 'var mydate = new Date( year, month, day, hours, minutes ); ';
-			$js .= "\n\t" . 'return mydate.getTime() / 1000;' . "\n";
-
-			// return function code
-			return $js;
-		}				
-		
-
-		// internal method to create the needed js function to retrieve a checkbox value
-		function _getValueCheckbox( & $element, $options ){
-		
-			// add our custom js function
-			$js  = "\n\t" . 'if (document.getElementById("' . $element->getAttribute('id') . '").checked)';
-			$js .= "\n\t" . '	return 1;';
-			$js .= "\n\t" . 'return 0;' . "\n";
-
-			// return function code
-			return $js;
-		}
-		
-
-		// internal method to create the needed js function to retrieve a radio value
-		function _getValueRadio( & $element, $options ){
-		
-			// add custom js function
-			$js  = "\n\t" . 'var __ydftmp = document.getElementById("' . $element->getAttribute('id') . '");';
-			$js .= "\n\t" . 'for (counter = 0; counter < __ydftmp.length; counter++)';
-			$js .= "\n\t" . '   if (__ydftmp[counter].checked) return __ydftmp[counter].value;';
-			$js .= "\n\t" . 'return false;' . "\n";
-
-			// return function code
-			return $jscode;
-		}		
-
-
         /**
          *	This method adds a js alert message to ajax response
          *
@@ -973,331 +803,10 @@
 			$this->xajaxResponse( $encoding );
 		}
 		
-		
-        /**
-         *	This method assigns a server result to a form element in the client side.
-         *
-         *	@param $formElement			Form element object.
-         *	@param $result				Result value.
-         *	@param $attribute			Custom atribute (auto-detection by default).
-         *	@param $options				Other options.
-         */		
-		function assignResult( & $formElement, $result, $attribute = null, $options = array()){
-	
-			// depending on the type we must invoke the custom function for the element
-			switch( strtolower( $formElement->getType() ) ){
+	}
 
-				case 'submit' :
-				
-				case 'button' :			$this->assignButton(         $formElement, $result, $attribute, $options ); break;
-				case 'checkbox' :		$this->assignCheckbox(       $formElement, $result, $attribute, $options ); break;
-				case 'dateselect' :		$this->assignDateSelect(     $formElement, $result, $attribute, $options ); break;
-				case 'datetimeselect' :	$this->assignDateTimeSelect( $formElement, $result, $attribute, $options ); break;
-				case 'timeselect' :		$this->assignTimeSelect(     $formElement, $result, $attribute, $options ); break;
-				case 'bbtextarea' :		$this->assignBBtextarea(     $formElement, $result, $attribute, $options ); break;
-				case 'img' :			$this->assignImg(            $formElement, $result, $attribute, $options ); break;
-				case 'hidden' :			$this->assignHidden(         $formElement, $result, $attribute, $options ); break;
-				case 'text' :			$this->assignText(           $formElement, $result, $attribute, $options ); break;
-				case 'textarea' :		$this->assignTextarea(       $formElement, $result, $attribute, $options ); break;
-				case 'radio' :			$this->assignRadio(          $formElement, $result, $attribute, $options ); break;
-				case 'password' :		$this->assignPassword(       $formElement, $result, $attribute, $options ); break;
-				case 'span' :			$this->assignSpan(           $formElement, $result, $attribute, $options ); break;
-				case 'select' :			$this->assignSelect(         $formElement, $result, $attribute, $options ); break;
-				case 'image' :			$this->addAlert('Input type image cannot be used. Please use a img instead.'); break;
 
-				// if element doesn't exist return an js alert
-				default : $this->addAlert( 'Element type "' . $formElement->getType() . '" is not supported in YDAjax' ); break;
-			}
-		}
 
-
-        /**
-         *	This method assigns a server result to a element using just the id
-         *
-         *	@param $id			Html element id.
-         *	@param $result		Result value.
-         *	@param $attribute	Custom atribute (auto-detection by default).
-         *	@param $options		Other options (not used).
-         */	
-		function assignId( $id, $result, $attribute, $options ){
-		
-			// if atribute is not defined we must create a default one
-			if (is_null( $attribute )) $attribute = 'innerHTML';
-
-			// if result is an array we should export to a valid js string
-			if (is_array( $result )) $result = str_replace( "\n", "<br>", var_export( $result, true ) );
-		
-			// escape string
-			$result = addslashes( $result );
-			
-			// assign result to form element using the id
-			$this->addScript( 'document.getElementById("' . $id . '").' . $attribute . ' = "' . $result . '";' );
-		}
-
-
-		// internal method to assign a value to a select element
-		function assignSelect( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-
-			// if we want to replace all select options
-			if ( is_array( $result ) ){
-			
-				// compute options
-				$options = '__ydfselect.options.length = 0;';
-				foreach( $result as $key => $value ){
-					$key   = addslashes( $key );
-					$value = addslashes( $value );
-					$options .= '    __ydfselect.options[ __ydfselect.options.length  ] = new Option("' . $value . '","' . $key . '"); ';
-				}
-
-			// if we want to define the selected option
-			}else{
-			
-				$options = 'for (counter = 0; counter < __ydfselect.length; counter++){
-							 	if (__ydfselect[counter].value == "' . addslashes( $result ) . '"){
-								   __ydfselect.selectedIndex = counter;
-								}
-							}';
-			}
-
-			// assign result to form element
-			$this->addScript( 'var __ydfselect = document.getElementById("' . $formElement->getAttribute('id') . '");' . $options );
-		}
-
-
-		// internal method to assign a value to a BBtextarea element
-		function assignBBtextarea( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if (is_null( $attribute )) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') . '").' . $attribute . ' = "' . $result . '";');
-		}
-		
-		
-		// internal method to assign a value to a img element
-		function assignImg( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ){
-				
-				// the default atribute of an image is its source address
-				$attribute = 'src';
-			
-				// if we want to display a new image, we must create a new src value otherwise the browser won't replace
-				$result .= '?' . microtime();
-			}
-
-			// assign result image
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";');
-		}		
-
-		
-		// internal method to assign a value to a text element
-		function assignText( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";');
-		}
-
-
-		// internal method to assign a value to a span element
-		function assignSpan( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if (is_null( $attribute )) $attribute = 'innerHTML';
-
-			// if result is an array we should export to a valid js string
-			if (is_array( $result )) $result =  str_replace( "\n", "<br>", var_export( $result, true ) ) ;
-
-			// escape string
-			$result = addslashes( $result );
-		
-			// assign result to form element using the id
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";' );
-		}
-		
-				
-		// internal method to assign a value to a textarea element
-		function assignTextarea( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";' );
-		}
-		
-
-		// internal method to assign a value to a radio element
-		function assignRadio( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// we must cycle all radio instances of this radio element
-			$this->addScript( '__ydftmp = document.getElementById("' . $formElement->getAttribute( 'id' ) . '");
-							  for (counter = 0; counter < __ydftmp.length; counter++)
-							 	 if (__ydftmp[counter].value == "' . $result . '") __ydftmp[counter].checked = true;
-								 else __ydftmp[counter].checked = false;' );
-		}		
-		
-
-		// internal method to assign a value to a password element
-		function assignPassword( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";');
-		}		
-		
-
-		// internal method to assign a value to a hidden element
-		function assignHidden( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// check and convert $result
-			$result = htmlspecialchars( $result );
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";' );
-		}
-
-
-		// internal method to assign a value to a dateselect element
-		function assignDateSelect( & $formElement, $result, $attribute, $options ){
-
-			// result must be a timestamp
-			if ( !is_integer( $result ) )
-				return $this->addAlert( "DateSelect elements in YDAjax only support timestamps in assignResult" );
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// get timestamp individual values
-			$parsed = getdate( $result );
-			$day    = $parsed['mday'];
-			$month  = $parsed['mon'];
-			$year   = $parsed['year'];
-			
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') . '[day]").' .   $attribute . ' = "' . $day . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') . '[month]").' . $attribute . ' = "' . $month . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') . '[year]").' .  $attribute . ' = "' . $year . '";' );
-		}		
-		
-
-		// internal method to assign a value to a datetimeselect element
-		function assignDateTimeSelect( & $formElement, $result, $attribute, $options ){
-
-			// result must be a timestamp
-			if ( !is_integer( $result ) )
-				return $this->addAlert( "DateSelect elements in YDAjax only support timestamps in assignResult" );
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-			
-			// get timestamp individual values
-			$parsed  = getdate( $result );
-			$day     = $parsed['mday'];
-			$month   = $parsed['mon'];
-			$year    = $parsed['year'];
-			$hours   = $parsed['hours'];
-			$minutes = $parsed['minutes'];
-
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) .'[day]").'.      $attribute . ' = "' . $day     . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) .'[month]").'.    $attribute . ' = "' . $month   . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) .'[year]").'.     $attribute . ' = "' . $year    . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) .'[hours]").'.    $attribute . ' = "' . $hours   . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) .'[minutes]").'.  $attribute . ' = "' . $minutes . '";' );
-		}		
-
-		
-		// internal method to assign a value to a timeselect element
-		function assignTimeSelect( & $formElement, $result, $attribute, $options ){
-
-			//  result must be a timestamp
-			if ( !is_integer( $result ) )
-				return $this->addAlert( "TimeSelect elements in YDAjax only support timestamps in assignResult" );
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-		
-			// get timestamp individual values
-			$parsed  = getdate( $result );
-			$hours   = $parsed['hours'];
-			$minutes = $parsed['minutes'];
-			
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') .'[hours]").'.   $attribute . ' = "' . $hours   . '";' );
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') .'[minutes]").'. $attribute . ' = "' . $minutes . '";' );
-		}	
-		
-
-		// internal method to assign a value to a button element
-		function assignButton( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'value';
-			
-			// assign result to form element
-			$this->addScript( 'document.getElementById("' . $formElement->getAttribute('id') . '").' . $attribute . ' = "' . $result . '";' );
-		}
-		
-		
-		// internal method to assign a value to a checkbox element
-		function assignCheckbox( & $formElement, $result, $attribute, $options ){
-
-			// if atribute event is not defined we must create a default one
-			if ( is_null( $attribute ) ) $attribute = 'checked';
-
-			if ( $attribute != 'checked' )
-				return $this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").' . $attribute . ' = "' . $result . '";' );
-
-			// if atribute is 'checked' and result is true, check this checkbox
-			if ( is_bool( $result ) && $result == true )
-				return $this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").checked = true;' );
-
-			// if atribute is 'checked' and result is false, clean checkbox selection
-			if ( is_bool( $result ) && $result == false )
-				return $this->addScript( 'document.getElementById("' . $formElement->getAttribute( 'id' ) . '").checked = false;' );
-
-			// if atribute is 'checked' and result is 'toggle', checkbox will have the opposite value
-			if ( $result == "toggle" )
-				return $this->addScript( 'var __ydftmp = document.getElementById("' . $formElement->getAttribute( 'id' ) . '");
-										  if (__ydftmp.checked == false) {__ydftmp.checked = true;} else {__ydftmp.checked = false;}' );
-
-		}
-		
-}
-
-
     /**
      *  Class definition for YDAjax effects.
      */



From david_db at berlios.de  Wed Mar 15 05:24:24 2006
From: david_db at berlios.de (david_db at berlios.de)
Date: Wed, 15 Mar 2006 05:24:24 +0100
Subject: [ydf-devel] r1801 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers
Message-ID: <200603150424.k2F4OOSH027556@sheep.berlios.de>

Author: david_db
Date: 2006-03-15 05:23:51 +0100 (Wed, 15 Mar 2006)
New Revision: 1801

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_xml.php
Log:
Fixed XML form renderer using labelname instead of label.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_xml.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_xml.php	2006-03-14 23:53:09 UTC (rev 1800)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormRenderers/YDFormRenderer_xml.php	2006-03-15 04:23:51 UTC (rev 1801)
@@ -102,7 +102,7 @@
                     // Labels (support only default values)
                     $e_lab = & $elem[$i]['#']['labels'][0]['#']['label'];
                     $e_lab[0]['@']['id']    = 'default';
-                    $e_lab[0]['@']['value'] = $arr['labelname'];
+                    $e_lab[0]['@']['value'] = $arr['label'];
                     
                     // Values (support only default values)
                     $e_val = & $elem[$i]['#']['values'][0]['#']['value'];



From pclaerhout at berlios.de  Wed Mar 15 18:58:20 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 15 Mar 2006 18:58:20 +0100
Subject: [ydf-devel] r1802 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603151758.k2FHwK2Q013700@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-15 18:58:19 +0100 (Wed, 15 Mar 2006)
New Revision: 1802

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php
Log:
Fixed the include_once statement in YDXml so that including phpdomxml cannot return any errors and notices anymore.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php	2006-03-15 04:23:51 UTC (rev 1801)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDXml.php	2006-03-15 17:58:19 UTC (rev 1802)
@@ -27,7 +27,7 @@
     }
 
     // Includes
-    include_once( YD_DIR_HOME . '/3rdparty/phpdomxml/lib.xml.inc.php' );
+    @include_once( YD_DIR_HOME . '/3rdparty/phpdomxml/lib.xml.inc.php' );
     
     // YDXml constants
     define( 'YD_XML_FILE',   1 );



From francisco at fusemail.com  Thu Mar 16 00:06:23 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Wed, 15 Mar 2006 23:06:23 +0000
Subject: [ydf-devel] t function
Message-ID: <44189DEF.6060709@fusemail.com>

Pieter

Can you add the 't' translation function?

Francisco A


From pclaerhout at berlios.de  Fri Mar 17 09:08:32 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Fri, 17 Mar 2006 09:08:32 +0100
Subject: [ydf-devel] r1803 - in YDFramework2.0/trunk: YDFramework2/YDClasses/YDFormElements examples/weblog/include
Message-ID: <200603170808.k2H88Wh5027412@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-17 09:08:01 +0100 (Fri, 17 Mar 2006)
New Revision: 1803

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
Log:
Commented out the chmod operations from the weblog application as it gives big problems on some servers (like yellowduck.be).

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2006-03-15 17:58:19 UTC (rev 1802)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2006-03-17 08:08:01 UTC (rev 1803)
@@ -109,8 +109,8 @@
                 $path
             );
 
-            @chmod( realpath( $dir ), 0700 );
-            @chmod( $path, 0700 );
+            //@chmod( realpath( $dir ), 0700 );
+            //@chmod( $path, 0700 );
 
             // Provide an interface to some more useful information on the file
             $this->fileo = new YDFSFile( $path );

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-15 17:58:19 UTC (rev 1802)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-17 08:08:01 UTC (rev 1803)
@@ -68,7 +68,7 @@
         fclose( $f );
 
         // Set the right permissions
-        @chmod( dirname( __FILE__ ) . '/config.php', 0700 );
+        //@chmod( dirname( __FILE__ ) . '/config.php', 0700 );
 
         // Create a .htaccess file if needed
         $htaccessPath = dirname( dirname( __FILE__ ) ) . '/.htaccess';
@@ -89,7 +89,7 @@
             fclose( $f );
 
             // Set the right permissions
-            @chmod( $htaccessPath, 0700 );
+            //@chmod( $htaccessPath, 0700 );
 
         }
 



From pieter at yellowduck.be  Mon Mar 20 13:43:14 2006
From: pieter at yellowduck.be (Pieter Claerhout)
Date: Mon, 20 Mar 2006 13:43:14 +0100
Subject: [ydf-devel] t function
In-Reply-To: <44189DEF.6060709@fusemail.com>
References: <44189DEF.6060709@fusemail.com>
Message-ID: <4aef63030603200443n3150ca63t5ea03635751089f8@mail.gmail.com>

I will whenever I have the time (read: hopefully somewhere today).

pieter

On 3/16/06, Francisco Azevedo <francisco at fusemail.com> wrote:
>
> Pieter
>
> Can you add the 't' translation function?
>
> Francisco A
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>



--
pieter claerhout . pieter at yellowduck.be . http://www.yellowduck.be/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060320/0725ce5f/attachment.html>

From pclaerhout at berlios.de  Tue Mar 21 15:51:03 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 21 Mar 2006 15:51:03 +0100
Subject: [ydf-devel] r1806 - YDFramework2.0/trunk/examples/weblog/manage
Message-ID: <200603211451.k2LEp3wU012660@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-21 15:50:49 +0100 (Tue, 21 Mar 2006)
New Revision: 1806

Modified:
   YDFramework2.0/trunk/examples/weblog/manage/items_gallery.tpl
Log:
The links to the thumbnails in the gallery is now correct.

Modified: YDFramework2.0/trunk/examples/weblog/manage/items_gallery.tpl
===================================================================
--- YDFramework2.0/trunk/examples/weblog/manage/items_gallery.tpl	2006-03-20 19:59:04 UTC (rev 1805)
+++ YDFramework2.0/trunk/examples/weblog/manage/items_gallery.tpl	2006-03-21 14:50:49 UTC (rev 1806)
@@ -95,7 +95,7 @@
                 <tr onMouseOver="YDRowMouseOver(this);" onMouseOut="YDRowMouseOut(this);">
                     <td class="adminRowL" valign="top">{$image->getLastModified()|date:'%Y/%m/%d %H:%M'}</td>
                     <td class="adminRowL" valign="top">
-                        <img src="../{$uploads_dir}/{$image->relative_path_s}" alt="{$image->getBaseName()}">
+                        <img src="{$uploads_dir}/{$image->relative_path_s}" alt="{$image->getBaseName()}">
                     </td>
                     <td class="adminRowL" valign="top">
                         <a href="{$YD_SELF_SCRIPT}?do=showimage&id={$item.id}&img={$image->relative_path}" target="_blank">{$image->getBaseName()}</a>



From pclaerhout at berlios.de  Tue Mar 21 15:51:34 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 21 Mar 2006 15:51:34 +0100
Subject: [ydf-devel] r1807 - YDFramework2.0/trunk/examples/weblog/manage
Message-ID: <200603211451.k2LEpYor012868@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-21 15:51:33 +0100 (Tue, 21 Mar 2006)
New Revision: 1807

Modified:
   YDFramework2.0/trunk/examples/weblog/manage/items.php
Log:
The links in the emails for new items are now working properly.

Modified: YDFramework2.0/trunk/examples/weblog/manage/items.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/manage/items.php	2006-03-21 14:50:49 UTC (rev 1806)
+++ YDFramework2.0/trunk/examples/weblog/manage/items.php	2006-03-21 14:51:33 UTC (rev 1807)
@@ -122,6 +122,9 @@
                     // Send an email if configured
                     if ( YDConfig::get( 'email_new_item', true ) ) {
 
+                        // Add the item ID
+                        $values['id'] = $this->weblog->db->getLastInsertID();
+
                         // Include the YDEmail library
                         YDInclude( 'YDEmail.php' );
 
@@ -130,6 +133,7 @@
 
                         // Add the comment to the email template
                         $this->tpl->assign( 'item', $values );
+                        $this->tpl->assign( 'weblog_link', YDUrl::makeLinkAbsolute( '../index.php' ) );
 
                         // Create the email and send it
                         $eml = new YDEmail();



From pclaerhout at berlios.de  Wed Mar 22 10:52:49 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 22 Mar 2006 10:52:49 +0100
Subject: [ydf-devel] r1808 - in YDFramework2.0/trunk/examples/weblog: include skins/default
Message-ID: <200603220952.k2M9qnNp004952@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-22 10:52:41 +0100 (Wed, 22 Mar 2006)
New Revision: 1808

Modified:
   YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
   YDFramework2.0/trunk/examples/weblog/skins/default/archive_gallery.tpl
   YDFramework2.0/trunk/examples/weblog/skins/default/item.tpl
   YDFramework2.0/trunk/examples/weblog/skins/default/item_gallery.tpl
Log:
The image thumbnail views now include the image size to optimize the rendering in a browser.

Modified: YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php
===================================================================
--- YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-21 14:51:33 UTC (rev 1807)
+++ YDFramework2.0/trunk/examples/weblog/include/YDWeblogAPI.php	2006-03-22 09:52:41 UTC (rev 1808)
@@ -263,6 +263,10 @@
                     $image->relative_path_s = dirname( $image->relative_path ) . '/s_' . basename( $image->relative_path );
                     $image->relative_path_m = dirname( $image->relative_path ) . '/m_' . basename( $image->relative_path );
 
+                    // Add the thumbnails as objects
+                    $image->relative_path_s_obj = new YDFSImage( $dir_uploads->getAbsolutePath() . '/' . $image->relative_path_s );
+                    $image->relative_path_m_obj = new YDFSImage( $dir_uploads->getAbsolutePath() . '/' . $image->relative_path_m );
+
                     // Update the original image
                     $images[$key] = $image;
 

Modified: YDFramework2.0/trunk/examples/weblog/skins/default/archive_gallery.tpl
===================================================================
--- YDFramework2.0/trunk/examples/weblog/skins/default/archive_gallery.tpl	2006-03-21 14:51:33 UTC (rev 1807)
+++ YDFramework2.0/trunk/examples/weblog/skins/default/archive_gallery.tpl	2006-03-22 09:52:41 UTC (rev 1808)
@@ -17,7 +17,7 @@
                         {foreach from=$image_row item="image"}
                             <td width="12%" align="center" valign="middle" height="60">
                                 {if $image}
-                                    <a href="item_gallery.php?id={$image->relative_path}"><img src="{$image|link_thumb_small}" alt="{$image->getBaseName()}"></a>
+                                    <a href="item_gallery.php?id={$image->relative_path}"><img src="{$image|link_thumb_small}" alt="{$image->getBaseName()}" width="{$image->relative_path_s_obj->getWidth()}" height="{$image->relative_path_s_obj->getHeight()}"></a>
                                 {else}
                                     &nbsp;
                                 {/if}

Modified: YDFramework2.0/trunk/examples/weblog/skins/default/item.tpl
===================================================================
--- YDFramework2.0/trunk/examples/weblog/skins/default/item.tpl	2006-03-21 14:51:33 UTC (rev 1807)
+++ YDFramework2.0/trunk/examples/weblog/skins/default/item.tpl	2006-03-22 09:52:41 UTC (rev 1808)
@@ -51,7 +51,8 @@
                 {foreach from=$image_row item="image"}
                     <td width="33%" align="center" style="vertical-align: middle;" height="100">
                         {if $image}
-                            <a href="{$image->relative_path|@link_item_gallery}"><img src="{$image|link_thumb}" alt="{$image->getBaseName()}"></a>
+                            <a href="{$image->relative_path|@link_item_gallery}"><img src="{$image|link_thumb}" alt="{$image->getBaseName()}"
+                             width="{$image->relative_path_m_obj->getWidth()}" height="{$image->relative_path_m_obj->getHeight()}"></a>
                         {else}
                             &nbsp;
                         {/if}

Modified: YDFramework2.0/trunk/examples/weblog/skins/default/item_gallery.tpl
===================================================================
--- YDFramework2.0/trunk/examples/weblog/skins/default/item_gallery.tpl	2006-03-21 14:51:33 UTC (rev 1807)
+++ YDFramework2.0/trunk/examples/weblog/skins/default/item_gallery.tpl	2006-03-22 09:52:41 UTC (rev 1808)
@@ -33,7 +33,7 @@
             {if $image->getWidth() > $max_img_size}
                 <iframe src="{$uploads_dir}/{$image->relative_path}" width="{$max_img_size}" height="{$image->getHeight()+20}" marginwidth="0" marginheight="0"></iframe>
             {else}
-                <img src="{$uploads_dir}/{$image->relative_path}">
+                <img src="{$uploads_dir}/{$image->relative_path}" width="{$image->getWidth()}" height="{$image->getHeight()}">
             {/if}
             </p>
 



From pclaerhout at berlios.de  Wed Mar 22 20:40:28 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 22 Mar 2006 20:40:28 +0100
Subject: [ydf-devel] r1809 - in YDFramework2.0/trunk/YDFramework2: . YDClasses
Message-ID: <200603221940.k2MJeSfX002183@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-22 20:40:26 +0100 (Wed, 22 Mar 2006)
New Revision: 1809

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
   YDFramework2.0/trunk/YDFramework2/YDF2_process.php
Log:
The SQL statements are now logged in a more readable manner.

Feature Request #2020

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-22 09:52:41 UTC (rev 1808)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-22 19:40:26 UTC (rev 1809)
@@ -1176,9 +1176,27 @@
          *  @internal
          */
         function _logSql( $sql ) {
+
+            // Split the SQL in different lines
+            $sql = str_replace( 'FROM', YD_CRLF . 'FROM', $sql );
+            $sql = str_replace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
+            $sql = str_replace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
+            $sql = str_replace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
+            $sql = str_replace( 'WHERE', YD_CRLF . 'WHERE', $sql );
+            $sql = str_replace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
+
+            // Get the backtrace
             $trace = debug_backtrace();
-            $sql = $sql . ' [' . $trace[2]['file'] . ':' . $trace[2]['line'] . ']';
-            array_push( $GLOBALS['YD_SQL_QUERY'], YDStringUtil::removeWhiteSpace( $sql ) );
+
+            // Format the SQL
+            $sql_final = '';
+            foreach ( explode( YD_CRLF, $sql ) as $line ) {
+                $sql_final .= '[' . $trace[2]['file'] . ':' . $trace[2]['line'] . '] ' . $line . YD_CRLF;
+            }
+
+            // Add it to the query log
+            array_push( $GLOBALS['YD_SQL_QUERY'], $sql_final );
+
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/YDF2_process.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_process.php	2006-03-22 09:52:41 UTC (rev 1808)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_process.php	2006-03-22 19:40:26 UTC (rev 1809)
@@ -178,7 +178,10 @@
                 if ( sizeof( $GLOBALS['YD_SQL_QUERY'] ) > 0 ) {
                     $debug .= 'EXECUTED SQL QUERIES (' . sizeof( $GLOBALS['YD_SQL_QUERY'] ) . ' queries)' . YD_CRLF . YD_CRLF;
                     foreach ( $GLOBALS['YD_SQL_QUERY'] as $key=>$query ) {
-                        $debug .= "\t" . ($key+1) . ': ' . trim( $query ) . YD_CRLF . YD_CRLF;
+                        foreach ( explode( YD_CRLF, trim( $query ) ) as $line ) {
+                            $debug .= "\t" . ( $key+1 ) . ':' . "\t" . trim( $line ) . YD_CRLF;
+                        }
+                        $debug .= YD_CRLF;
                     }
                 }
 



From pclaerhout at berlios.de  Wed Mar 22 21:07:27 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Wed, 22 Mar 2006 21:07:27 +0100
Subject: [ydf-devel] r1810 - in YDFramework2.0/trunk/YDFramework2/YDClasses: . YDDatabaseDrivers
Message-ID: <200603222007.k2MK7Ra4014319@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-22 21:07:20 +0100 (Wed, 22 Mar 2006)
New Revision: 1810

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_oracle.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_postgres.php
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_sqlite.php
Log:
The connect function now returns true or false depending on whether the connection was succesfull or not.

Feature Request #2031

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-22 19:40:26 UTC (rev 1809)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-22 20:07:20 UTC (rev 1810)
@@ -701,6 +701,8 @@
 
         /**
          *  Function that makes the actual connection.
+         *
+         *  @returns    Boolean indicating if the connection was succesfull or not.
          */
         function connect() {
         }
@@ -1272,22 +1274,38 @@
          *  @returns    The version of the database server software.
          */
         function getServerVersion() {
-            $this->connect();
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && is_null( $this->_conn ) && $this->_failOnError === true ) {
+                trigger_error( mysql_error(), YD_ERROR );
+            }
+            if ( ! $result && ! is_null( $this->_conn ) && $this->_failOnError === true ) {
+                trigger_error( mysql_error( $this->_conn ), YD_ERROR );
+            }
+
+            // Return the version
             return 'MySQL ' . mysql_get_server_info();
+
         }
 
         /**
          *  Function that makes the actual connection.
+         *
+         *  @returns    Boolean indicating if the connection was succesfull or not.
          */
         function connect() {
-            $conn = @mysql_connect( $this->_host, $this->_user, $this->_pass );
-            if ( ! $conn ) {
-                trigger_error( mysql_error(), YD_ERROR );
+            if ( $this->_conn == null ) {
+                $conn = @mysql_connect( $this->_host, $this->_user, $this->_pass );
+                if ( ! $conn ) {
+                    return false;
+                }
+                if ( ! @mysql_select_db( $this->_db, $conn ) ) {
+                    return false;
+                }
+                $this->_conn = $conn;
             }
-            if ( ! @mysql_select_db( $this->_db, $conn ) ) {
-                trigger_error( mysql_error( $conn ), YD_ERROR );
-            }
-            $this->_conn = $conn;
+            return true;
         }
 
         /**
@@ -1402,14 +1420,35 @@
          *  @internal
          */
         function & _connectAndExec( $sql ) {
+
+            // Add the table prefix
             $sql = str_replace( ' #_', ' ' . YDConfig::get( 'YD_DB_TABLEPREFIX', '' ), $sql );
+
+            // Log the statement
             $this->_logSql( $sql );
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && is_null( $this->_conn ) && $this->_failOnError === true ) {
+                trigger_error( mysql_error(), YD_ERROR );
+            }
+            if ( ! $result && ! is_null( $this->_conn ) && $this->_failOnError === true ) {
+                trigger_error( mysql_error( $this->_conn ), YD_ERROR );
+            }
+
+            // Execute the query
             $result = @mysql_query( $sql, $this->_conn );
+
+            // Handle errors
             if ( $result === false && $this->_failOnError === true ) {
                 trigger_error( '[' . mysql_errno( $this->_conn ) . '] ' . mysql_error( $this->_conn ), YD_ERROR );
             }
+
+            // Return the result
             return $result;
+
         }
 
     }

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_oracle.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_oracle.php	2006-03-22 19:40:26 UTC (rev 1809)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_oracle.php	2006-03-22 20:07:20 UTC (rev 1810)
@@ -67,19 +67,31 @@
          *	@returns	The version of the database server software.
          */
         function getServerVersion() {
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && $this->_failOnError === true ) {
+                $error = ocierror();
+                trigger_error( $error['message'], YD_ERROR );
+            }
+
+            // Return the version
             return 'Oracle ' . ociserverversion( $this->_conn );
+
         }
 
         /**
          *	Function that makes the actual connection.
+         *
+         *  @returns    Boolean indicating if the connection was succesfull or not.
          */
         function connect() {
             if ( $this->_conn == null ) {
                 $conn = @OCILogon( $this->_user, $this->_pass, $this->_db );
                 if ( ! $conn ) {
-                    $error = ocierror( $conn );
-                    trigger_error( $error['message'], YD_ERROR );
+                    return false;
                 }
                 $this->_conn = $conn;
                 $stmt = OCIParse(
@@ -87,6 +99,7 @@
                 );
                 @OCIExecute( $stmt );
             }
+            return true;
         }
 
         /**
@@ -247,15 +260,35 @@
          *	@internal
          */
         function & _connectAndExec( $sql ) {
+
+            // Add the table prefix
             $sql = str_replace( ' #_', ' ' . YDConfig::get( 'YD_DB_TABLEPREFIX', '' ), $sql );
+
+            // Log the statement
             $this->_logSql( $sql );
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && $this->_failOnError === true ) {
+                $error = ocierror();
+                trigger_error( $error['message'], YD_ERROR );
+            }
+
+            // Create statement
             $stmt = OCIParse( $this->_conn, $sql );
-            if ( ! $stmt ) {
+
+            // Handle errors
+            if ( ! $stmt && $this->_failOnError === true ) {
                 $error = ocierror( $stmt );
                 trigger_error( $error['message'], YD_ERROR );
             }
+
+            // Execute
             $result = @OCIExecute( $stmt );
+
+            // Handle errors
             if ( $result === false && $this->_failOnError === true ) {
                 $error = ocierror( $stmt );
                 if ( ! empty( $error['sqltext'] ) ) {
@@ -263,7 +296,10 @@
                 }
                 trigger_error( $error['message'], YD_ERROR );
             }
+
+            // Return the result
             return $stmt;
+
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_postgres.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_postgres.php	2006-03-22 19:40:26 UTC (rev 1809)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_postgres.php	2006-03-22 20:07:20 UTC (rev 1810)
@@ -87,10 +87,11 @@
                 $connstr = implode( ' ', $connstr );
                 $conn = pg_connect( $connstr );
                 if ( ! $conn ) {
-                    trigger_error( pg_last_error( $conn ), YD_ERROR );
+                    return false;
                 }
                 $this->_conn = $conn;
             }
+            return true;
         }
 
         /**
@@ -191,14 +192,32 @@
          *	@internal
          */
         function & _connectAndExec( $sql ) {
+
+            // Add the table prefix
             $sql = str_replace( ' #_', ' ' . YDConfig::get( 'YD_DB_TABLEPREFIX', '' ), $sql );
+
+            // Log the SQL
             $this->_logSql( $sql );
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && $this->_failOnError === true ) {
+                trigger_error( pg_last_error(), YD_ERROR );
+            }
+
+            // Perform the query
             $result = @pg_query( $this->_conn, $sql );
+
+            // Handle errors
             if ( $result === false && $this->_failOnError === true ) {
                 trigger_error( pg_last_error( $conn ), YD_ERROR );
             }
+
+            // Return the result
             return $result;
+
         }
 
         /**

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_sqlite.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_sqlite.php	2006-03-22 19:40:26 UTC (rev 1809)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabaseDrivers/YDDatabaseDriver_sqlite.php	2006-03-22 20:07:20 UTC (rev 1810)
@@ -64,8 +64,18 @@
          *	@returns	The version of the database server software.
          */
         function getServerVersion() {
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && $this->_failOnError === true ) {
+                trigger_error( $GLOBALS['YD_SQLITE_error'], YD_ERROR );
+            }
+
+            // Return the version
             return 'SQLite ' . sqlite_libversion();
+
         }
 
         /**
@@ -75,10 +85,11 @@
             if ( $this->_conn == null ) {
                 $conn = @sqlite_open( $this->_db, 0666, $error );
                 if ( ! $conn ) {
-                    trigger_error( $error, YD_ERROR );
+                    return false;
                 }
                 $this->_conn = $conn;
             }
+            return true;
         }
 
         /**
@@ -189,14 +200,32 @@
          *	@internal
          */
         function & _connectAndExec( $sql ) {
+
+            // Add the table prefix
             $sql = str_replace( ' #_', ' ' . YDConfig::get( 'YD_DB_TABLEPREFIX', '' ), $sql );
+
+            // Log the statement
             $this->_logSql( $sql );
-            $this->connect();
+
+            // Connect
+            $result = $this->connect();
+
+            // Handle errors
+            if ( ! $result && $this->_failOnError === true ) {
+                trigger_error( $GLOBALS['YD_SQLITE_error'], YD_ERROR );
+            }
+
+            // Execute the query
             $result = @sqlite_query( $sql, $this->_conn );
+
+            // Handle errors
             if ( $result === false && $this->_failOnError === true ) {
                 trigger_error( sqlite_error_string( sqlite_last_error( $this->_conn ) ), YD_ERROR );
             }
+
+            // Return the result
             return $result;
+
         }
 
     }



From pclaerhout at berlios.de  Thu Mar 23 09:26:16 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 23 Mar 2006 09:26:16 +0100
Subject: [ydf-devel] r1811 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603230826.k2N8QGun028493@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-23 09:25:38 +0100 (Thu, 23 Mar 2006)
New Revision: 1811

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
Log:
Fixed a small bug in the YDDatabaseDriver::_logSql function as it was case sensitive when adding the newlines, even though it shouldn't.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-22 20:07:20 UTC (rev 1810)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-23 08:25:38 UTC (rev 1811)
@@ -1180,12 +1180,12 @@
         function _logSql( $sql ) {
 
             // Split the SQL in different lines
-            $sql = str_replace( 'FROM', YD_CRLF . 'FROM', $sql );
-            $sql = str_replace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
-            $sql = str_replace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
-            $sql = str_replace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
-            $sql = str_replace( 'WHERE', YD_CRLF . 'WHERE', $sql );
-            $sql = str_replace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
+            $sql = str_ireplace( 'FROM', YD_CRLF . 'FROM', $sql );
+            $sql = str_ireplace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
+            $sql = str_ireplace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
+            $sql = str_ireplace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
+            $sql = str_ireplace( 'WHERE', YD_CRLF . 'WHERE', $sql );
+            $sql = str_ireplace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
 
             // Get the backtrace
             $trace = debug_backtrace();



From phmassa at gmail.com  Thu Mar 23 09:54:05 2006
From: phmassa at gmail.com (ph-m)
Date: Thu, 23 Mar 2006 09:54:05 +0100
Subject: [ydf-devel] Error in YDDatabase
Message-ID: <829084a60603230054g7d23f7eei@mail.gmail.com>

hi,

since last release ?, I've got this error :

[Thu Mar 23 09:38:42 2006] [error] [client 192.168.1.1] PHP Warning: 
array_slice(): The first argument should be an array in
e:\\wamp\\phpshare\\includes\\YDFramework2\\YDClasses\\YDDatabase.php
on line 225, referer: http://localhost/test/
[Thu Mar 23 09:38:51 2006] [error] [client 192.168.1.1] PHP Fatal
error:  Call to undefined function:  str_ireplace() in
e:\\wamp\\phpshare\\includes\\YDFramework2\\YDClasses\\YDDatabase.php
on line 1183


++
ph-m


From pclaerhout at berlios.de  Thu Mar 23 10:57:33 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 23 Mar 2006 10:57:33 +0100
Subject: [ydf-devel] r1812 - YDFramework2.0/trunk/YDFramework2/YDClasses
Message-ID: <200603230957.k2N9vXOa014641@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-23 10:57:31 +0100 (Thu, 23 Mar 2006)
New Revision: 1812

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
Log:
Fixed the logSql function as it was using a PHP5 only function.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-23 08:25:38 UTC (rev 1811)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-23 09:57:31 UTC (rev 1812)
@@ -1180,12 +1180,12 @@
         function _logSql( $sql ) {
 
             // Split the SQL in different lines
-            $sql = str_ireplace( 'FROM', YD_CRLF . 'FROM', $sql );
-            $sql = str_ireplace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
-            $sql = str_ireplace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
-            $sql = str_ireplace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
-            $sql = str_ireplace( 'WHERE', YD_CRLF . 'WHERE', $sql );
-            $sql = str_ireplace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
+            $sql = str_replace( 'FROM', YD_CRLF . 'FROM', $sql );
+            $sql = str_replace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
+            $sql = str_replace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
+            $sql = str_replace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
+            $sql = str_replace( 'WHERE', YD_CRLF . 'WHERE', $sql );
+            $sql = str_replace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
 
             // Get the backtrace
             $trace = debug_backtrace();



From pieter at yellowduck.be  Thu Mar 23 10:57:55 2006
From: pieter at yellowduck.be (Pieter Claerhout)
Date: Thu, 23 Mar 2006 10:57:55 +0100
Subject: [ydf-devel] Error in YDDatabase
In-Reply-To: <829084a60603230054g7d23f7eei@mail.gmail.com>
References: <829084a60603230054g7d23f7eei@mail.gmail.com>
Message-ID: <4aef63030603230157n12b249hd3eb538b7da87591@mail.gmail.com>

Damn, str_ireplace is PHP5 only. Changed to str_replace again in build 1812.

pieter

On 3/23/06, ph-m <phmassa at gmail.com> wrote:
>
> hi,
>
> since last release ?, I've got this error :
>
> [Thu Mar 23 09:38:42 2006] [error] [client 192.168.1.1] PHP Warning:
> array_slice(): The first argument should be an array in
> e:\\wamp\\phpshare\\includes\\YDFramework2\\YDClasses\\YDDatabase.php
> on line 225, referer: http://localhost/test/
> [Thu Mar 23 09:38:51 2006] [error] [client 192.168.1.1] PHP Fatal
> error:  Call to undefined function:  str_ireplace() in
> e:\\wamp\\phpshare\\includes\\YDFramework2\\YDClasses\\YDDatabase.php
> on line 1183
>
>
> ++
> ph-m
> _______________________________________________
> YDFramework-devel mailing list
> YDFramework-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/ydframework-devel
>



--
pieter claerhout . pieter at yellowduck.be . http://www.yellowduck.be/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/ydframework-devel/attachments/20060323/8c475d24/attachment.html>

From pclaerhout at berlios.de  Thu Mar 23 14:25:19 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 23 Mar 2006 14:25:19 +0100
Subject: [ydf-devel] r1813 - YDFramework2.0/trunk/examples
Message-ID: <200603231325.k2NDPJSx018982@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-23 14:25:06 +0100 (Thu, 23 Mar 2006)
New Revision: 1813

Added:
   YDFramework2.0/trunk/examples/form_checkboxgroup.php
   YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
Modified:
   YDFramework2.0/trunk/examples/index.tpl
Log:
Added an example on how to use the checkboxgroup form element.

Added: YDFramework2.0/trunk/examples/form_checkboxgroup.php
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-03-23 09:57:31 UTC (rev 1812)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.php	2006-03-23 13:25:06 UTC (rev 1813)
@@ -0,0 +1,54 @@
+<?php
+
+    // Standard include
+    include_once( dirname( __FILE__ ) . '/../YDFramework2/YDF2_init.php' );
+
+    // Includes
+    YDInclude( 'YDForm.php' );
+    YDInclude( 'YDTemplate.php' );
+
+    // Class definition
+    class form_checkboxgroup extends YDRequest {
+
+        // Class constructor
+        function form_checkboxgroup() {
+            $this->YDRequest();
+        }
+
+        // Default action
+        function actionDefault() {
+
+            // Create the form
+            $form = new YDForm( 'form1' );
+
+            // Add the radiobutton
+            $form->addElement( 'checkboxgroup', 'choose_multiple', 'Choose multiple', array(), array( 0 => 'choice 1', 1 => 'choice 2' ) );
+
+            // Add the submit button
+            $form->addElement( 'submit', 'btnSubmit', 'submit' );
+
+            // Set the defaults
+            $form->setDefaults( array( 'choose_multiple' => array( 0=>0, 1=>1 ) ) );
+
+            // Process the form
+            if ( $form->validate() === true ) {
+                YDDebugUtil::dump( $form->getValues() );
+            }
+
+            // Add the template
+            $tpl = new YDTemplate();
+
+            // Add the form to the template
+            $tpl->assignForm ( 'form',$form );
+
+            // Display the template
+            $tpl->display();
+
+        }
+
+    }
+
+    // Process the request
+    YDInclude( 'YDF2_process.php' );
+
+?>
\ No newline at end of file

Added: YDFramework2.0/trunk/examples/form_checkboxgroup.tpl
===================================================================
--- YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-03-23 09:57:31 UTC (rev 1812)
+++ YDFramework2.0/trunk/examples/form_checkboxgroup.tpl	2006-03-23 13:25:06 UTC (rev 1813)
@@ -0,0 +1,5 @@
+{$form.tag}
+    {$form.choose_multiple.html|@replace:'##ITEMSEP##':'<br/>'}
+    <br/>
+    {$form.btnSubmit.html}
+{$form.endtag}

Modified: YDFramework2.0/trunk/examples/index.tpl
===================================================================
--- YDFramework2.0/trunk/examples/index.tpl	2006-03-23 09:57:31 UTC (rev 1812)
+++ YDFramework2.0/trunk/examples/index.tpl	2006-03-23 13:25:06 UTC (rev 1813)
@@ -191,7 +191,7 @@
             <td width="43%"><b>&nbsp;</b></td>
         </tr>
         <tr>
-            <td rowspan="10" valign="top">&nbsp;</td>
+            <td rowspan="11" valign="top">&nbsp;</td>
             <td valign="top"><a href="form.php">Form handling and validation</a> </td>
             <td valign="top">
                 <a href="{$YD_SELF_SCRIPT}?do=source&id=form.php">form.php</a>
@@ -258,6 +258,14 @@
             </td>
         </tr>
         <tr>
+            <td valign="top"><a href="form_checkboxgroup.php">Using the checkboxgroup elementL</a></td>
+            <td valign="top">
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_checkboxgroup.php">form_checkboxgroup.php</a>
+                <br/>
+                <a href="{$YD_SELF_SCRIPT}?do=source&id=form_checkboxgroup.tpl">form_checkboxgroup.tpl</a>
+            </td>
+        </tr>
+        <tr>
             <td colspan="2"><b>&nbsp;<br/>Using logfiles</b></td>
             <td width="43%"><b>&nbsp;</b></td>
         </tr>



From pclaerhout at berlios.de  Thu Mar 23 14:39:22 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Thu, 23 Mar 2006 14:39:22 +0100
Subject: [ydf-devel] r1814 - in YDFramework2.0/trunk/YDFramework2: . YDClasses
Message-ID: <200603231339.k2NDdMt7026776@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-23 14:39:08 +0100 (Thu, 23 Mar 2006)
New Revision: 1814

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
   YDFramework2.0/trunk/YDFramework2/YDF2_core.php
Log:
Fixed the logSQL function so that it now works in PHP 4 and 5.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-23 13:25:06 UTC (rev 1813)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDDatabase.php	2006-03-23 13:39:08 UTC (rev 1814)
@@ -1180,12 +1180,20 @@
         function _logSql( $sql ) {
 
             // Split the SQL in different lines
-            $sql = str_replace( 'FROM', YD_CRLF . 'FROM', $sql );
-            $sql = str_replace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
-            $sql = str_replace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
-            $sql = str_replace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
-            $sql = str_replace( 'WHERE', YD_CRLF . 'WHERE', $sql );
-            $sql = str_replace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
+            $sql = str_ireplace( 'SELECT', 'SELECT', $sql );
+            $sql = str_ireplace( 'UPDATE', 'UPDATE', $sql );
+            $sql = str_ireplace( 'DELETE', 'DELETE', $sql );
+            $sql = str_ireplace( 'INSERT', 'INSERT', $sql );
+            $sql = str_ireplace( 'FROM', YD_CRLF . 'FROM', $sql );
+            $sql = str_ireplace( 'INTO', YD_CRLF . 'INTO', $sql );
+            $sql = str_ireplace( 'VALUES', YD_CRLF . 'VALUES', $sql );
+            $sql = str_ireplace( 'LEFT JOIN', YD_CRLF . 'LEFT JOIN', $sql );
+            $sql = str_ireplace( 'RIGHT JOIN', YD_CRLF . 'RIGHT JOIN', $sql );
+            $sql = str_ireplace( 'INNER JOIN', YD_CRLF . 'INNER JOIN', $sql );
+            $sql = str_ireplace( 'WHERE', YD_CRLF . 'WHERE', $sql );
+            $sql = str_ireplace( 'ORDER BY', YD_CRLF . 'ORDER BY', $sql );
+            $sql = str_ireplace( 'GROUP BY', YD_CRLF . 'GROUP BY', $sql );
+            $sql = str_ireplace( 'LIMIT', YD_CRLF . 'LIMIT', $sql );
 
             // Get the backtrace
             $trace = debug_backtrace();

Modified: YDFramework2.0/trunk/YDFramework2/YDF2_core.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_core.php	2006-03-23 13:25:06 UTC (rev 1813)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_core.php	2006-03-23 13:39:08 UTC (rev 1814)
@@ -413,4 +413,68 @@
 
     }
 
+    // Add if not exists yet
+    if (!function_exists('str_ireplace')) {
+
+        /**
+         *  Function to do a case insensitve str_replace
+         *
+         *  @param  $search     The string to search for.
+         *  @param  $replace    The replacement string.
+         *  @param  $subject    The string to replace in
+         *  @param  $count      (optional) The maximum number of replacements. Default us all.
+         *
+         *  @returns    The updated string.
+         */
+        function str_ireplace( $search, $replace, $subject, $count = null ) {
+            if ( is_string( $search ) && is_array( $replace ) ) {
+                user_error( 'Array to string conversion', E_USER_NOTICE );
+                $replace = ( string ) $replace;
+            }
+            if ( ! is_array( $search ) ) {
+                $search = array( $search );
+            }
+            $search = array_values( $search );
+            if ( ! is_array( $replace ) ) {
+                $replace_string = $replace;
+                $replace = array();
+                for ( $i = 0, $c = count( $search ); $i < $c; $i++ ) {
+                    $replace[$i] = $replace_string;
+                }
+            }
+            $replace = array_values( $replace );
+            $length_replace = count( $replace );
+            $length_search = count( $search );
+            if ( $length_replace < $length_search ) {
+                for ( $i = $length_replace; $i < $length_search; $i++ ) {
+                    $replace[$i] = '';
+                }
+            }
+            $was_array = false;
+            if ( ! is_array( $subject ) ) {
+                $was_array = true;
+                $subject = array( $subject );
+            }
+            $count = 0;
+            foreach ( $subject as $subject_key => $subject_value ) {
+                foreach ( $search as $search_key => $search_value ) {
+                    $segments = explode( strtolower( $search_value ), strtolower( $subject_value ) );
+                    $count += count( $segments ) - 1;
+                    $pos = 0;
+                    foreach ( $segments as $segment_key => $segment_value ) {
+                        $segments[$segment_key] = substr( $subject_value, $pos, strlen( $segment_value ) );
+                        $pos += strlen( $segment_value ) + strlen( $search_value );
+                    }
+                    $subject_value = implode( $replace[$search_key], $segments );
+                }
+                $result[$subject_key] = $subject_value;
+            }
+            if ( $was_array === true ) {
+                return $result[0];
+            }
+            return $result;
+        }
+
+    }
+
 ?>



From ximian at berlios.de  Fri Mar 24 11:37:50 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Fri, 24 Mar 2006 11:37:50 +0100
Subject: [ydf-devel] r1815 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603241037.k2OAboMu018931@sheep.berlios.de>

Author: ximian
Date: 2006-03-24 11:37:39 +0100 (Fri, 24 Mar 2006)
New Revision: 1815

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
- FIX: parse new lines when adding results

- NEW FEATURE: default events can be created now.
  eg, $ajax->addEvent( '*', array( &$this, 'default_php_function' ) );

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-23 13:39:08 UTC (rev 1814)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-24 10:37:39 UTC (rev 1815)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.6';
+            $this->_version = '2.62';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -343,6 +343,10 @@
          */		
 		 function addEvent( $formElementName, $serverFunction, $arguments = null, $event = null, $options = null, $effects = null ){ 
 		 
+			// if formElementName is "*" we want to define a default event
+			if ( $formElementName === "*" )
+				return $this->registerCatchAllFunction( array( $serverFunction[1], $serverFunction[0], $serverFunction[1] ) );
+
 		 	if( !is_array( $options ) ) $options = array( $options );
 		 
 			// serverFunction must be an array with a class and the method (get function name)
@@ -729,6 +733,15 @@
 			// if is not a form element, assign result to a html id
 			$form = $this->__getForm( $formElementName );
 
+			// if result is a string we must parse it. Javascript strings cannot contain new lines
+			if ( is_string( $result ) ){
+
+				// escape string
+				$result = addslashes( $result );
+				$result = str_replace( "\n", " ", $result );
+				$result = str_replace( "\r", " ", $result );
+			}
+
 			// if $formElementName is really an form element
 			if ( !is_null( $form ) ){
 
@@ -745,9 +758,6 @@
 
 			// if result is an array we should export to a valid js string
 			if (is_array( $result )) $result = str_replace( "\n", "<br>", var_export( $result, true ) );
-		
-			// escape string
-			$result = addslashes( $result );
 			
 			// assign result to form element using the id
 			return $this->response->addScript( 'document.getElementById("' . $formElementName . '").' . $attribute . ' = "' . $result . '";' );



From francisco at fusemail.com  Sun Mar 26 01:33:02 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Sun, 26 Mar 2006 00:33:02 +0000
Subject: [ydf-devel] YDDatabaseObject extra arguments
Message-ID: <4425E13E.7070302@fusemail.com>

Hi David.

Currently in YDDatabaseObject::getInstance we can only use one extra 
argument for class parameters.
When we need to pass more than one we can create an array with all 
parameters.. but the problem is when those arguments need to be passed 
by reference.
Afaik, this is not possible to use an array for this.

I propose to create more than one extra parameter for this method. Then 
we can use it like:

YDDatabaseObject::getInstance( $name, &$var1, &$var2, &$var3 );

What do you think?

Francisco A


From ximian at berlios.de  Sun Mar 26 03:39:48 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 26 Mar 2006 03:39:48 +0200
Subject: [ydf-devel] r1816 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603260139.k2Q1dmfl001069@sheep.berlios.de>

Author: ximian
Date: 2006-03-26 03:39:10 +0200 (Sun, 26 Mar 2006)
New Revision: 1816

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php
Log:
img elements should always have a 'alt' tag.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php	2006-03-24 10:37:39 UTC (rev 1815)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_Img.php	2006-03-26 01:39:10 UTC (rev 1816)
@@ -83,7 +83,7 @@
 
             // Create the list of attributes
             $attribs = array(
-                'id' => $this->_form . '_' . $this->_name, 'src' => $this->_value
+                'id' => $this->_form . '_' . $this->_name, 'src' => $this->_value, 'alt' => $this->_name
             );
             $attribs = array_merge( $this->_attributes, $attribs );
 



From francisco at fusemail.com  Sun Mar 26 03:50:05 2006
From: francisco at fusemail.com (Francisco Azevedo)
Date: Sun, 26 Mar 2006 02:50:05 +0100
Subject: [ydf-devel] YDDatabaseObject extra arguments
In-Reply-To: <4425E13E.7070302@fusemail.com>
References: <4425E13E.7070302@fusemail.com>
Message-ID: <4425F34D.2040801@fusemail.com>

> Afaik, this is not possible to use an array for this.

Yes, it's possible.. my mistake.
Please ignore this.

Francisco A


From ximian at berlios.de  Sun Mar 26 21:17:08 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Sun, 26 Mar 2006 21:17:08 +0200
Subject: [ydf-devel] r1817 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603261917.k2QJH8Lm030943@sheep.berlios.de>

Author: ximian
Date: 2006-03-26 21:16:34 +0200 (Sun, 26 Mar 2006)
New Revision: 1817

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
new YDAjax::addRuntimeEvent method. Now it's possible to create simple events and send them to a response (to be used later). For experts only ;)


Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-26 01:39:10 UTC (rev 1816)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-26 19:16:34 UTC (rev 1817)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.62';
+            $this->_version = '2.63';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -538,6 +538,34 @@
 
 
         /**
+         *	This method adds an event to a response to loaded for future use.
+         *
+         *	@param $formElementName		Form element name (string) or js function.
+         *	@param $serverFunction		Array with class and method.
+         *	@param $arguments			(Optional) Arguments for this function call
+         *	@param $event				(Optional) Html event name (auto-detection by default when using null).
+         *	@param $options				(Optional) Custom options.
+         *	@param $effects				(Optional) Effect or array of effects to execute on event (before ajax call).
+         */		
+		function addRuntimeEvent( $formElementName, $serverFunction, $arguments = null, $event = null, $options = null, $effects = null ){
+		
+			// get function name
+			$functionName = $this->_getWMFunctionShow() . $this->sWrapperPrefix . $serverFunction . '(' . $this->_computeFunctionArguments( $arguments, $options ) . ');';
+
+			// create js variable to handle ajax request
+			$js  = $this->sWrapperPrefix . $serverFunction .'=function(){return xajax.call("' . $serverFunction .'", arguments, 1);};';
+
+			// parse harcoded js function
+			ereg ( "^(.*)(\(.*\))$", $formElementName, $res );
+
+			// create custom js function
+			$js .= $res[1] . '=function'. $res[2] .'{' . $functionName . '};';
+
+			// add all js code to response
+			$this->response->addScript( $js );
+		}
+		
+        /**
          *	This method adds confirmation to a element event
          *
          *	@param $formElementName		Form element name or js function.



From ximian at berlios.de  Mon Mar 27 11:21:31 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Mon, 27 Mar 2006 11:21:31 +0200
Subject: [ydf-devel] r1818 - YDFramework2.0/trunk/YDFramework2
Message-ID: <200603270921.k2R9LVeD026126@sheep.berlios.de>

Author: ximian
Date: 2006-03-27 11:21:17 +0200 (Mon, 27 Mar 2006)
New Revision: 1818

Modified:
   YDFramework2.0/trunk/YDFramework2/YDF2_core.php
Log:
new YDLocale::addDirectory( $dir ). Feature #2045

now, it's possible to define directories that contains language files using YDLocale::addDirectory().

when changing locale (using YDLocale::set) all added directories will be read to include the correspondent translation.



Modified: YDFramework2.0/trunk/YDFramework2/YDF2_core.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDF2_core.php	2006-03-26 19:16:34 UTC (rev 1817)
+++ YDFramework2.0/trunk/YDFramework2/YDF2_core.php	2006-03-27 09:21:17 UTC (rev 1818)
@@ -160,11 +160,6 @@
             return '';
         }
 
-        // Initialize the language array
-        if ( ! isset( $GLOBALS['t'] ) ) {
-            $GLOBALS['t'] = array();
-        }
-
         // Return the right translation
         $t = strtolower( $t );
         return ( array_key_exists( $t, $GLOBALS['t'] ) ? $GLOBALS['t'][$t] : "%$t%" );
@@ -384,8 +379,16 @@
             // Set the locale
             YDConfig::set( YD_LOCALE_KEY, $locale );
 
+            // initialize t array
+            $GLOBALS['t'] = array();
+
+            // if directories array exist we must include all files
+            if ( isset( $GLOBALS[ 'YD_LANGUAGES_DIRECTORIES' ] ) )
+                foreach ( $GLOBALS[ 'YD_LANGUAGES_DIRECTORIES' ] as $dir )
+                    @include_once( $dir . '/' . YDLocale::get() . '.php' );
         }
 
+
         /**
          *	@returns	The current locale.
          */
@@ -394,8 +397,32 @@
             return strtolower( YDConfig::get( YD_LOCALE_KEY ) );
         }
 
+
+        /**
+         *	This function adds a new directory
+         *
+         *	@param	$dir       Directory to add
+         */
+        function addDirectory( $dir ){
+
+            // check if directories array exists
+            if ( !isset( $GLOBALS[ 'YD_LANGUAGES_DIRECTORIES' ] ) )
+                $GLOBALS[ 'YD_LANGUAGES_DIRECTORIES' ] = array();
+
+            // add directory to array. Needed when changing locale
+            $GLOBALS[ 'YD_LANGUAGES_DIRECTORIES' ][] = $dir;
+
+            // check if translations array exists
+            if ( !isset( $GLOBALS['t'] ) )
+                $GLOBALS['t'] = array();
+
+            // include directory
+            include_once( $dir . '/' . YDLocale::get() . '.php' );
+        }
+
     }
 
+
     /**
      *	This is the base class for all other YD classes.
      */



From ximian at berlios.de  Mon Mar 27 15:39:15 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Mon, 27 Mar 2006 15:39:15 +0200
Subject: [ydf-devel] r1819 - YDFramework2.0/trunk/YDFramework2/addons/YDMysqlDump
Message-ID: <200603271339.k2RDdFTr029822@sheep.berlios.de>

Author: ximian
Date: 2006-03-27 15:39:04 +0200 (Mon, 27 Mar 2006)
New Revision: 1819

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDMysqlDump/YDMysqlDump.php
Log:
YDMysqlDump: support for database named instances

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDMysqlDump/YDMysqlDump.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDMysqlDump/YDMysqlDump.php	2006-03-27 09:21:17 UTC (rev 1818)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDMysqlDump/YDMysqlDump.php	2006-03-27 13:39:04 UTC (rev 1819)
@@ -36,20 +36,22 @@
          *
          *  @param $dbinstance      Database instance
          */
-        function YDMysqlDump( $dbinstance ) {
+        function YDMysqlDump( $dbinstance = null ) {
 
             // Initializes YDBase
             $this->YDAddOnModule();
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '1.1';
+            $this->_version = '1.2';
             $this->_copyright = '(c) 2005 Francisco Azevedo, francisco at fusemail.com';
             $this->_description = 'This class defines a mysql backup/restore system.';
 
             // database instance
-            $this->dbinstance = $dbinstance;
-            
+            if ( is_null( $dbinstance ) )        $this->dbinstance = YDDatabase::getNamedInstance();
+            else if ( is_string( $dbinstance ) ) $this->dbinstance = YDDatabase::getNamedInstance( $dbinstance );
+            else                                 $this->dbinstance = $dbinstance;
+
             // predefined filepath for store content (used if we don't want a string)
             $this->filepath = YD_DIR_TEMP . '/backup.sql';
 



From pclaerhout at berlios.de  Tue Mar 28 09:08:20 2006
From: pclaerhout at berlios.de (pclaerhout at BerliOS)
Date: Tue, 28 Mar 2006 09:08:20 +0200
Subject: [ydf-devel] r1820 - YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements
Message-ID: <200603280708.k2S78Kci028648@sheep.berlios.de>

Author: pclaerhout
Date: 2006-03-28 09:08:14 +0200 (Tue, 28 Mar 2006)
New Revision: 1820

Modified:
   YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
Log:
Added a missing include for YDFileSystem to the file form element.

Modified: YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2006-03-27 13:39:04 UTC (rev 1819)
+++ YDFramework2.0/trunk/YDFramework2/YDClasses/YDFormElements/YDFormElement_File.php	2006-03-28 07:08:14 UTC (rev 1820)
@@ -28,6 +28,7 @@
 
     // Includes
     include_once( YD_DIR_HOME_CLS . '/YDForm.php');
+    include_once( YD_DIR_HOME_CLS . '/YDFileSystem.php');
 
     /**
      *	This is the class that define a file upload form element.



From ximian at berlios.de  Thu Mar 30 18:01:06 2006
From: ximian at berlios.de (ximian at berlios.de)
Date: Thu, 30 Mar 2006 18:01:06 +0200
Subject: [ydf-devel] r1821 - YDFramework2.0/trunk/YDFramework2/addons/YDAjax
Message-ID: <200603301601.k2UG16W4024689@sheep.berlios.de>

Author: ximian
Date: 2006-03-30 18:00:48 +0200 (Thu, 30 Mar 2006)
New Revision: 1821

Modified:
   YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
Log:
new experimental YDAjax release 2.7b

- deleted addRuntimeEvent and included all logic inside addEvent.
This means that we can use addEvent on a response to add runtime events.

Modified: YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php
===================================================================
--- YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-28 07:08:14 UTC (rev 1820)
+++ YDFramework2.0/trunk/YDFramework2/addons/YDAjax/YDAjax.php	2006-03-30 16:00:48 UTC (rev 1821)
@@ -68,7 +68,7 @@
 
             // Setup the module
             $this->_author = 'Francisco Azevedo';
-            $this->_version = '2.63';
+            $this->_version = '2.7b';
             $this->_copyright = '(c) Copyright 2002-2006 Francisco Azevedo';
             $this->_description = 'This class makes ajax easy for YDF developers';
 
@@ -329,8 +329,8 @@
 			// send array and method to display autocompleter
 			return $this->addScript( $js . 'autocompleterOpen(' . $jsvar . ');' );
 		}
-		
 
+
         /**
          *	This method assigns a server function and arguments to a form element event.
          *
@@ -343,29 +343,28 @@
          */		
 		 function addEvent( $formElementName, $serverFunction, $arguments = null, $event = null, $options = null, $effects = null ){ 
 		 
-			// if formElementName is "*" we want to define a default event
+			// if formElementName is "*" we want to define a default event (only before responses)
 			if ( $formElementName === "*" )
 				return $this->registerCatchAllFunction( array( $serverFunction[1], $serverFunction[0], $serverFunction[1] ) );
 
 		 	if( !is_array( $options ) ) $options = array( $options );
+
+			// register function in xajax if not on reponse
+			if ( !$this->onResponse )
+				$this->registerFunction( array( $serverFunction[1], $serverFunction[0], $serverFunction[1] ) );
 		 
 			// serverFunction must be an array with a class and the method (get function name)
 			$functionName = $this->computeFunction( $formElementName, $serverFunction, $arguments, $options, $effects );
 
 			// if element don't have a form we must return
-			$form = $this->__getForm( $formElementName );
+			if( is_null( $form = $this->__getForm( $formElementName ) ) ) return;
 
-			if( is_null( $form ) ) return;
-
 			// get form element
 			$formElement = & $form->getElement( $formElementName );
 
 			// if event is null we must check the form element type to compute the default event
 			if( is_null( $event ) ) $event = $formElement->getJSEvent();
 
-			// parse event
-			$event = strtolower( $event );
-
 			// get previous atribute
 			$previous = is_null( $formElement->getAttribute( $event ) ) ? '' : trim( $formElement->getAttribute( $event ) );
 
@@ -385,15 +384,13 @@
 
 		function computeFunction( $formElementName, $serverFunction, $arguments = null, $options = null, $effects = null ){ 
 
-			// register function in xajax
-			$this->registerFunction( array( $serverFunction[1], $serverFunction[0], $serverFunction[1] ) );
+			if( !$this->onResponse ) $serverFunctionName = $serverFunction[1];
+			else                     $serverFunctionName = $serverFunction;
 
-			$serverFunctionName = $serverFunction[1];
-
 			if ( !is_array( $options ) ) $options = array( $options );
 			
 			// get function name
-			$functionName = $this->_getWMFunctionShow() . $this->sWrapperPrefix . $serverFunctionName . '(' . $this->_computeFunctionArguments( $arguments, $options ) . ');';
+			$functionName = $this->_getWMFunctionShow() . $this->prefix . $serverFunctionName . '(' . $this->_computeFunctionArguments( $arguments, $options ) . ');';
 
 			// process effects
 			if ( !is_null( $effects ) ){
@@ -418,12 +415,15 @@
 							// get id
 							$id = $element->getAttribute( 'id' );
 						
-							$this->effects[ $effect->getVariable() ] = $effect->getJSHead( $id );
+							// if before response, add effect js to template. otherwise add it to response
+							if ( !$this->onResponse)	$this->effects[ $effect->getVariable() ] = $effect->getJSHead( $id );
+							else						$this->response->addScript( $effect->getJSHead( $id ) );
 						
 						}
-						else
-							$this->effects[ $effect->getVariable() ] = $effect->getJSHead();
-				
+						else{
+							if ( !$this->onResponse )	$this->effects[ $effect->getVariable() ] = $effect->getJSHead();
+							else						$this->response->addScript( $effect->getJSHead() );
+							}
 					}
 
 					// function is now the effect js created
@@ -432,11 +432,37 @@
 			}
 
 			// if formElementName is a js function we are not assigning an event to a form element but creating a js function
-			if ( ereg ( "^(.*)\(.*\)$", $formElementName, $function ) ){
-				$this->customjs[ $function[0] ] = $functionName;
-				return;
+			if ( ereg ( "^(.*)(\(.*\))$", $formElementName, $res ) ){
+
+				// if we are before reponse we must add function to template
+				if ( !$this->onResponse ) return $this->customjs[ $res[0] ] = $functionName;
+				
+				// create js variable to handle ajax request
+				$js  = $this->prefix . $serverFunction .'=function(){return xajax.call("' . $serverFunction .'", arguments, 1);};';
+
+				// create custom js function
+				$js .= $res[1] . '=function'. $res[2] .'{' . $functionName . '};';
+
+				// add all js code to response
+				return $this->response->addScript( $js );
 			}
 
+			
+			if( $this->onResponse ){
+			
+				// create js variable to handle ajax request
+				$js  = $this->prefix . $serverFunction . '=function(){return xajax.call("' . $serverFunction . '", arguments, 1);};';
+
+				// create custom js function
+				$js .= $this->prefix . $serverFunction . 'get=function(){' .  $functionName . '};';
+
+				// add all js code to response
+				$this->response->addScript( $js );
+				
+				return $this->prefix . $serverFunction . 'get()';
+			}
+
+
 			return $functionName;
 		}
 		
@@ -515,13 +541,14 @@
 					$js = $elem->getJS( $options );					
 
 					// compute javascript function name
-					$jsfunction = $this->prefix . 'get' . $elem->getName() . '()';
+					$jsfunction = $this->prefix . 'get' . $elem->getName();
 
 					// add javascript function code to custom js (to be included in template head)
-					$this->customjs[$jsfunction] = $js;
+					if ( !$this->onResponse ) $this->customjs[$jsfunction] = $js;
+					else                      $this->response->addScript( $jsfunction . '=function(){' . $js . '}' );
 					
 					// add function name to arguments list
-					$args[] = $jsfunction;
+					$args[] = $jsfunction . '()';
 					
 					continue;
 				}
@@ -536,35 +563,7 @@
 			return implode( ",", $args );
 		}
 
-
-        /**
-         *	This method adds an event to a response to loaded for future use.
-         *
-         *	@param $formElementName		Form element name (string) or js function.
-         *	@param $serverFunction		Array with class and method.
-         *	@param $arguments			(Optional) Arguments for this function call
-         *	@param $event				(Optional) Html event name (auto-detection by default when using null).
-         *	@param $options				(Optional) Custom options.
-         *	@param $effects				(Optional) Effect or array of effects to execute on event (before ajax call).
-         */		
-		function addRuntimeEvent( $formElementName, $serverFunction, $arguments = null, $event = null, $options = null, $effects = null ){
 		
-			// get function name
-			$functionName = $this->_getWMFunctionShow() . $this->sWrapperPrefix . $serverFunction . '(' . $this->_computeFunctionArguments( $arguments, $options ) . ');';
-
-			// create js variable to handle ajax request
-			$js  = $this->sWrapperPrefix . $serverFunction .'=function(){return xajax.call("' . $serverFunction .'", arguments, 1);};';
-
-			// parse harcoded js function
-			ereg ( "^(.*)(\(.*\))$", $formElementName, $res );
-
-			// create custom js function
-			$js .= $res[1] . '=function'. $res[2] .'{' . $functionName . '};';
-
-			// add all js code to response
-			$this->response->addScript( $js );
-		}
-		
         /**
          *	This method adds confirmation to a element event
          *
@@ -688,15 +687,15 @@
          */	
 		function processEvents(){
 
-			// we will start a response
-			$this->onResponse = true;
-
 			// check autocompleters
 			$this->__computeAutocompletersCode();
 			
 			// add js code
 			$this->__assignTemplateCode();
 
+			// we will start a response
+			$this->onResponse = true;
+
 			// process all requests and exit
 			return $this->processRequests();
 		}



